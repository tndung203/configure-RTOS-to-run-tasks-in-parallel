
prj6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006560  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007f4  080066f0  080066f0  000076f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee4  08006ee4  0000801c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ee4  08006ee4  00007ee4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006eec  08006eec  0000801c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006eec  08006eec  00007eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ef0  08006ef0  00007ef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20000000  08006ef4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000801c  2**0
                  CONTENTS
 10 .bss          00012ee8  2000001c  2000001c  0000801c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20012f04  20012f04  0000801c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000801c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000158ce  00000000  00000000  0000804c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003446  00000000  00000000  0001d91a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001458  00000000  00000000  00020d60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000fcb  00000000  00000000  000221b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021387  00000000  00000000  00023183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00017d03  00000000  00000000  0004450a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb1a7  00000000  00000000  0005c20d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001273b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000553c  00000000  00000000  001273f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  0012c934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000001c 	.word	0x2000001c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080066d8 	.word	0x080066d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000020 	.word	0x20000020
 80001cc:	080066d8 	.word	0x080066d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b96a 	b.w	80004bc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	460c      	mov	r4, r1
 8000208:	2b00      	cmp	r3, #0
 800020a:	d14e      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020c:	4694      	mov	ip, r2
 800020e:	458c      	cmp	ip, r1
 8000210:	4686      	mov	lr, r0
 8000212:	fab2 f282 	clz	r2, r2
 8000216:	d962      	bls.n	80002de <__udivmoddi4+0xde>
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0320 	rsb	r3, r2, #32
 800021e:	4091      	lsls	r1, r2
 8000220:	fa20 f303 	lsr.w	r3, r0, r3
 8000224:	fa0c fc02 	lsl.w	ip, ip, r2
 8000228:	4319      	orrs	r1, r3
 800022a:	fa00 fe02 	lsl.w	lr, r0, r2
 800022e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000232:	fa1f f68c 	uxth.w	r6, ip
 8000236:	fbb1 f4f7 	udiv	r4, r1, r7
 800023a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800023e:	fb07 1114 	mls	r1, r7, r4, r1
 8000242:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000246:	fb04 f106 	mul.w	r1, r4, r6
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f104 30ff 	add.w	r0, r4, #4294967295
 8000256:	f080 8112 	bcs.w	800047e <__udivmoddi4+0x27e>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 810f 	bls.w	800047e <__udivmoddi4+0x27e>
 8000260:	3c02      	subs	r4, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a59      	subs	r1, r3, r1
 8000266:	fa1f f38e 	uxth.w	r3, lr
 800026a:	fbb1 f0f7 	udiv	r0, r1, r7
 800026e:	fb07 1110 	mls	r1, r7, r0, r1
 8000272:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000276:	fb00 f606 	mul.w	r6, r0, r6
 800027a:	429e      	cmp	r6, r3
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x94>
 800027e:	eb1c 0303 	adds.w	r3, ip, r3
 8000282:	f100 31ff 	add.w	r1, r0, #4294967295
 8000286:	f080 80fc 	bcs.w	8000482 <__udivmoddi4+0x282>
 800028a:	429e      	cmp	r6, r3
 800028c:	f240 80f9 	bls.w	8000482 <__udivmoddi4+0x282>
 8000290:	4463      	add	r3, ip
 8000292:	3802      	subs	r0, #2
 8000294:	1b9b      	subs	r3, r3, r6
 8000296:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029a:	2100      	movs	r1, #0
 800029c:	b11d      	cbz	r5, 80002a6 <__udivmoddi4+0xa6>
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	2200      	movs	r2, #0
 80002a2:	e9c5 3200 	strd	r3, r2, [r5]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d905      	bls.n	80002ba <__udivmoddi4+0xba>
 80002ae:	b10d      	cbz	r5, 80002b4 <__udivmoddi4+0xb4>
 80002b0:	e9c5 0100 	strd	r0, r1, [r5]
 80002b4:	2100      	movs	r1, #0
 80002b6:	4608      	mov	r0, r1
 80002b8:	e7f5      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002ba:	fab3 f183 	clz	r1, r3
 80002be:	2900      	cmp	r1, #0
 80002c0:	d146      	bne.n	8000350 <__udivmoddi4+0x150>
 80002c2:	42a3      	cmp	r3, r4
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xcc>
 80002c6:	4290      	cmp	r0, r2
 80002c8:	f0c0 80f0 	bcc.w	80004ac <__udivmoddi4+0x2ac>
 80002cc:	1a86      	subs	r6, r0, r2
 80002ce:	eb64 0303 	sbc.w	r3, r4, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	2d00      	cmp	r5, #0
 80002d6:	d0e6      	beq.n	80002a6 <__udivmoddi4+0xa6>
 80002d8:	e9c5 6300 	strd	r6, r3, [r5]
 80002dc:	e7e3      	b.n	80002a6 <__udivmoddi4+0xa6>
 80002de:	2a00      	cmp	r2, #0
 80002e0:	f040 8090 	bne.w	8000404 <__udivmoddi4+0x204>
 80002e4:	eba1 040c 	sub.w	r4, r1, ip
 80002e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ec:	fa1f f78c 	uxth.w	r7, ip
 80002f0:	2101      	movs	r1, #1
 80002f2:	fbb4 f6f8 	udiv	r6, r4, r8
 80002f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fa:	fb08 4416 	mls	r4, r8, r6, r4
 80002fe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000302:	fb07 f006 	mul.w	r0, r7, r6
 8000306:	4298      	cmp	r0, r3
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x11c>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x11a>
 8000314:	4298      	cmp	r0, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2b4>
 800031a:	4626      	mov	r6, r4
 800031c:	1a1c      	subs	r4, r3, r0
 800031e:	fa1f f38e 	uxth.w	r3, lr
 8000322:	fbb4 f0f8 	udiv	r0, r4, r8
 8000326:	fb08 4410 	mls	r4, r8, r0, r4
 800032a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800032e:	fb00 f707 	mul.w	r7, r0, r7
 8000332:	429f      	cmp	r7, r3
 8000334:	d908      	bls.n	8000348 <__udivmoddi4+0x148>
 8000336:	eb1c 0303 	adds.w	r3, ip, r3
 800033a:	f100 34ff 	add.w	r4, r0, #4294967295
 800033e:	d202      	bcs.n	8000346 <__udivmoddi4+0x146>
 8000340:	429f      	cmp	r7, r3
 8000342:	f200 80b0 	bhi.w	80004a6 <__udivmoddi4+0x2a6>
 8000346:	4620      	mov	r0, r4
 8000348:	1bdb      	subs	r3, r3, r7
 800034a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800034e:	e7a5      	b.n	800029c <__udivmoddi4+0x9c>
 8000350:	f1c1 0620 	rsb	r6, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 f706 	lsr.w	r7, r2, r6
 800035a:	431f      	orrs	r7, r3
 800035c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000360:	fa04 f301 	lsl.w	r3, r4, r1
 8000364:	ea43 030c 	orr.w	r3, r3, ip
 8000368:	40f4      	lsrs	r4, r6
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	0c38      	lsrs	r0, r7, #16
 8000370:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000374:	fbb4 fef0 	udiv	lr, r4, r0
 8000378:	fa1f fc87 	uxth.w	ip, r7
 800037c:	fb00 441e 	mls	r4, r0, lr, r4
 8000380:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000384:	fb0e f90c 	mul.w	r9, lr, ip
 8000388:	45a1      	cmp	r9, r4
 800038a:	fa02 f201 	lsl.w	r2, r2, r1
 800038e:	d90a      	bls.n	80003a6 <__udivmoddi4+0x1a6>
 8000390:	193c      	adds	r4, r7, r4
 8000392:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000396:	f080 8084 	bcs.w	80004a2 <__udivmoddi4+0x2a2>
 800039a:	45a1      	cmp	r9, r4
 800039c:	f240 8081 	bls.w	80004a2 <__udivmoddi4+0x2a2>
 80003a0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a4:	443c      	add	r4, r7
 80003a6:	eba4 0409 	sub.w	r4, r4, r9
 80003aa:	fa1f f983 	uxth.w	r9, r3
 80003ae:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b2:	fb00 4413 	mls	r4, r0, r3, r4
 80003b6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ba:	fb03 fc0c 	mul.w	ip, r3, ip
 80003be:	45a4      	cmp	ip, r4
 80003c0:	d907      	bls.n	80003d2 <__udivmoddi4+0x1d2>
 80003c2:	193c      	adds	r4, r7, r4
 80003c4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c8:	d267      	bcs.n	800049a <__udivmoddi4+0x29a>
 80003ca:	45a4      	cmp	ip, r4
 80003cc:	d965      	bls.n	800049a <__udivmoddi4+0x29a>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	443c      	add	r4, r7
 80003d2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003d6:	fba0 9302 	umull	r9, r3, r0, r2
 80003da:	eba4 040c 	sub.w	r4, r4, ip
 80003de:	429c      	cmp	r4, r3
 80003e0:	46ce      	mov	lr, r9
 80003e2:	469c      	mov	ip, r3
 80003e4:	d351      	bcc.n	800048a <__udivmoddi4+0x28a>
 80003e6:	d04e      	beq.n	8000486 <__udivmoddi4+0x286>
 80003e8:	b155      	cbz	r5, 8000400 <__udivmoddi4+0x200>
 80003ea:	ebb8 030e 	subs.w	r3, r8, lr
 80003ee:	eb64 040c 	sbc.w	r4, r4, ip
 80003f2:	fa04 f606 	lsl.w	r6, r4, r6
 80003f6:	40cb      	lsrs	r3, r1
 80003f8:	431e      	orrs	r6, r3
 80003fa:	40cc      	lsrs	r4, r1
 80003fc:	e9c5 6400 	strd	r6, r4, [r5]
 8000400:	2100      	movs	r1, #0
 8000402:	e750      	b.n	80002a6 <__udivmoddi4+0xa6>
 8000404:	f1c2 0320 	rsb	r3, r2, #32
 8000408:	fa20 f103 	lsr.w	r1, r0, r3
 800040c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000410:	fa24 f303 	lsr.w	r3, r4, r3
 8000414:	4094      	lsls	r4, r2
 8000416:	430c      	orrs	r4, r1
 8000418:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800041c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000420:	fa1f f78c 	uxth.w	r7, ip
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3110 	mls	r1, r8, r0, r3
 800042c:	0c23      	lsrs	r3, r4, #16
 800042e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000432:	fb00 f107 	mul.w	r1, r0, r7
 8000436:	4299      	cmp	r1, r3
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x24c>
 800043a:	eb1c 0303 	adds.w	r3, ip, r3
 800043e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000442:	d22c      	bcs.n	800049e <__udivmoddi4+0x29e>
 8000444:	4299      	cmp	r1, r3
 8000446:	d92a      	bls.n	800049e <__udivmoddi4+0x29e>
 8000448:	3802      	subs	r0, #2
 800044a:	4463      	add	r3, ip
 800044c:	1a5b      	subs	r3, r3, r1
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb3 f1f8 	udiv	r1, r3, r8
 8000454:	fb08 3311 	mls	r3, r8, r1, r3
 8000458:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800045c:	fb01 f307 	mul.w	r3, r1, r7
 8000460:	42a3      	cmp	r3, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x276>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f101 36ff 	add.w	r6, r1, #4294967295
 800046c:	d213      	bcs.n	8000496 <__udivmoddi4+0x296>
 800046e:	42a3      	cmp	r3, r4
 8000470:	d911      	bls.n	8000496 <__udivmoddi4+0x296>
 8000472:	3902      	subs	r1, #2
 8000474:	4464      	add	r4, ip
 8000476:	1ae4      	subs	r4, r4, r3
 8000478:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800047c:	e739      	b.n	80002f2 <__udivmoddi4+0xf2>
 800047e:	4604      	mov	r4, r0
 8000480:	e6f0      	b.n	8000264 <__udivmoddi4+0x64>
 8000482:	4608      	mov	r0, r1
 8000484:	e706      	b.n	8000294 <__udivmoddi4+0x94>
 8000486:	45c8      	cmp	r8, r9
 8000488:	d2ae      	bcs.n	80003e8 <__udivmoddi4+0x1e8>
 800048a:	ebb9 0e02 	subs.w	lr, r9, r2
 800048e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000492:	3801      	subs	r0, #1
 8000494:	e7a8      	b.n	80003e8 <__udivmoddi4+0x1e8>
 8000496:	4631      	mov	r1, r6
 8000498:	e7ed      	b.n	8000476 <__udivmoddi4+0x276>
 800049a:	4603      	mov	r3, r0
 800049c:	e799      	b.n	80003d2 <__udivmoddi4+0x1d2>
 800049e:	4630      	mov	r0, r6
 80004a0:	e7d4      	b.n	800044c <__udivmoddi4+0x24c>
 80004a2:	46d6      	mov	lr, sl
 80004a4:	e77f      	b.n	80003a6 <__udivmoddi4+0x1a6>
 80004a6:	4463      	add	r3, ip
 80004a8:	3802      	subs	r0, #2
 80004aa:	e74d      	b.n	8000348 <__udivmoddi4+0x148>
 80004ac:	4606      	mov	r6, r0
 80004ae:	4623      	mov	r3, r4
 80004b0:	4608      	mov	r0, r1
 80004b2:	e70f      	b.n	80002d4 <__udivmoddi4+0xd4>
 80004b4:	3e02      	subs	r6, #2
 80004b6:	4463      	add	r3, ip
 80004b8:	e730      	b.n	800031c <__udivmoddi4+0x11c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <display_init>:
#include "display.h"

void display_init(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  //Init LCD
  HAL_GPIO_WritePin(BLK_PORT, BLK_PIN, GPIO_PIN_SET);
 80004c4:	2201      	movs	r2, #1
 80004c6:	2140      	movs	r1, #64	@ 0x40
 80004c8:	4803      	ldr	r0, [pc, #12]	@ (80004d8 <display_init+0x18>)
 80004ca:	f001 f9e1 	bl	8001890 <HAL_GPIO_WritePin>
  ST7789_Init();
 80004ce:	f000 fb47 	bl	8000b60 <ST7789_Init>
}
 80004d2:	bf00      	nop
 80004d4:	bd80      	pop	{r7, pc}
 80004d6:	bf00      	nop
 80004d8:	40020400 	.word	0x40020400

080004dc <display_text>:

void display_text(const char *buffer)
{
 80004dc:	b590      	push	{r4, r7, lr}
 80004de:	b089      	sub	sp, #36	@ 0x24
 80004e0:	af04      	add	r7, sp, #16
 80004e2:	6078      	str	r0, [r7, #4]
  uint16_t x = 10;
 80004e4:	230a      	movs	r3, #10
 80004e6:	81fb      	strh	r3, [r7, #14]
  uint16_t y = 10;
 80004e8:	230a      	movs	r3, #10
 80004ea:	81bb      	strh	r3, [r7, #12]

  for (int i = 0; buffer[i] != '\0'; i++)
 80004ec:	2300      	movs	r3, #0
 80004ee:	60bb      	str	r3, [r7, #8]
 80004f0:	e029      	b.n	8000546 <display_text+0x6a>
  {
    if (buffer[i] == '\n' || buffer[i] == '\r')
 80004f2:	68bb      	ldr	r3, [r7, #8]
 80004f4:	687a      	ldr	r2, [r7, #4]
 80004f6:	4413      	add	r3, r2
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	2b0a      	cmp	r3, #10
 80004fc:	d005      	beq.n	800050a <display_text+0x2e>
 80004fe:	68bb      	ldr	r3, [r7, #8]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	4413      	add	r3, r2
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b0d      	cmp	r3, #13
 8000508:	d105      	bne.n	8000516 <display_text+0x3a>
    {
      y += 10;  // New lines
 800050a:	89bb      	ldrh	r3, [r7, #12]
 800050c:	330a      	adds	r3, #10
 800050e:	81bb      	strh	r3, [r7, #12]
      x = 10;   // Reset to head of lines
 8000510:	230a      	movs	r3, #10
 8000512:	81fb      	strh	r3, [r7, #14]
 8000514:	e014      	b.n	8000540 <display_text+0x64>
    }
    else
    {
      ST7789_WriteChar(x, y, buffer[i], Font_7x10, BLACK, WHITE);
 8000516:	68bb      	ldr	r3, [r7, #8]
 8000518:	687a      	ldr	r2, [r7, #4]
 800051a:	4413      	add	r3, r2
 800051c:	781c      	ldrb	r4, [r3, #0]
 800051e:	4b0f      	ldr	r3, [pc, #60]	@ (800055c <display_text+0x80>)
 8000520:	89b9      	ldrh	r1, [r7, #12]
 8000522:	89f8      	ldrh	r0, [r7, #14]
 8000524:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000528:	9202      	str	r2, [sp, #8]
 800052a:	2200      	movs	r2, #0
 800052c:	9201      	str	r2, [sp, #4]
 800052e:	685a      	ldr	r2, [r3, #4]
 8000530:	9200      	str	r2, [sp, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	4622      	mov	r2, r4
 8000536:	f000 fbef 	bl	8000d18 <ST7789_WriteChar>
      x += 7;  // Increase position of clolumn in 1 char
 800053a:	89fb      	ldrh	r3, [r7, #14]
 800053c:	3307      	adds	r3, #7
 800053e:	81fb      	strh	r3, [r7, #14]
  for (int i = 0; buffer[i] != '\0'; i++)
 8000540:	68bb      	ldr	r3, [r7, #8]
 8000542:	3301      	adds	r3, #1
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	687a      	ldr	r2, [r7, #4]
 800054a:	4413      	add	r3, r2
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d1cf      	bne.n	80004f2 <display_text+0x16>
    }
  }
}
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bd90      	pop	{r4, r7, pc}
 800055c:	20000000 	.word	0x20000000

08000560 <display_clear>:
  uint8_t row = line * 10;
  ST7789_WriteString(column, row, buffer, Font_7x10, BLACK, WHITE);
}

void display_clear(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  ST7789_Fill_Color(WHITE);
 8000564:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000568:	f000 fb98 	bl	8000c9c <ST7789_Fill_Color>

}
 800056c:	bf00      	nop
 800056e:	bd80      	pop	{r7, pc}

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b086      	sub	sp, #24
 8000574:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000576:	f000 fe15 	bl	80011a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057a:	f000 f86b 	bl	8000654 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057e:	f000 f927 	bl	80007d0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000582:	f000 f8fb 	bl	800077c <MX_USART1_UART_Init>
  MX_SPI1_Init();
 8000586:	f000 f8c3 	bl	8000710 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  status = xTaskCreate(LED_Blinking_Task, "LED_Blinking", 200, NULL, 2, &led_handle);
 800058a:	4b29      	ldr	r3, [pc, #164]	@ (8000630 <main+0xc0>)
 800058c:	9301      	str	r3, [sp, #4]
 800058e:	2302      	movs	r3, #2
 8000590:	9300      	str	r3, [sp, #0]
 8000592:	2300      	movs	r3, #0
 8000594:	22c8      	movs	r2, #200	@ 0xc8
 8000596:	4927      	ldr	r1, [pc, #156]	@ (8000634 <main+0xc4>)
 8000598:	4827      	ldr	r0, [pc, #156]	@ (8000638 <main+0xc8>)
 800059a:	f004 f8d1 	bl	8004740 <xTaskCreate>
 800059e:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2b01      	cmp	r3, #1
 80005a4:	d00b      	beq.n	80005be <main+0x4e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005aa:	f383 8811 	msr	BASEPRI, r3
 80005ae:	f3bf 8f6f 	isb	sy
 80005b2:	f3bf 8f4f 	dsb	sy
 80005b6:	60bb      	str	r3, [r7, #8]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	e7fd      	b.n	80005ba <main+0x4a>

  status = xTaskCreate(UART_Receive_Task, "UART_Recieving", 200, NULL, 2, &uart_handle);
 80005be:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <main+0xcc>)
 80005c0:	9301      	str	r3, [sp, #4]
 80005c2:	2302      	movs	r3, #2
 80005c4:	9300      	str	r3, [sp, #0]
 80005c6:	2300      	movs	r3, #0
 80005c8:	22c8      	movs	r2, #200	@ 0xc8
 80005ca:	491d      	ldr	r1, [pc, #116]	@ (8000640 <main+0xd0>)
 80005cc:	481d      	ldr	r0, [pc, #116]	@ (8000644 <main+0xd4>)
 80005ce:	f004 f8b7 	bl	8004740 <xTaskCreate>
 80005d2:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	2b01      	cmp	r3, #1
 80005d8:	d00b      	beq.n	80005f2 <main+0x82>
        __asm volatile
 80005da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005de:	f383 8811 	msr	BASEPRI, r3
 80005e2:	f3bf 8f6f 	isb	sy
 80005e6:	f3bf 8f4f 	dsb	sy
 80005ea:	607b      	str	r3, [r7, #4]
    }
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	e7fd      	b.n	80005ee <main+0x7e>

  status = xTaskCreate(LCD_Display_Task, "LCD_Updating", 200, NULL, 2, &lcd_handle);
 80005f2:	4b15      	ldr	r3, [pc, #84]	@ (8000648 <main+0xd8>)
 80005f4:	9301      	str	r3, [sp, #4]
 80005f6:	2302      	movs	r3, #2
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2300      	movs	r3, #0
 80005fc:	22c8      	movs	r2, #200	@ 0xc8
 80005fe:	4913      	ldr	r1, [pc, #76]	@ (800064c <main+0xdc>)
 8000600:	4813      	ldr	r0, [pc, #76]	@ (8000650 <main+0xe0>)
 8000602:	f004 f89d 	bl	8004740 <xTaskCreate>
 8000606:	60f8      	str	r0, [r7, #12]
  configASSERT(status == pdPASS);
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	2b01      	cmp	r3, #1
 800060c:	d00b      	beq.n	8000626 <main+0xb6>
        __asm volatile
 800060e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000612:	f383 8811 	msr	BASEPRI, r3
 8000616:	f3bf 8f6f 	isb	sy
 800061a:	f3bf 8f4f 	dsb	sy
 800061e:	603b      	str	r3, [r7, #0]
    }
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	e7fd      	b.n	8000622 <main+0xb2>

  //start the freeRTOS scheduler
  vTaskStartScheduler();
 8000626:	f004 fa07 	bl	8004a38 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0xba>
 800062e:	bf00      	nop
 8000630:	200000d8 	.word	0x200000d8
 8000634:	080066f0 	.word	0x080066f0
 8000638:	080008a5 	.word	0x080008a5
 800063c:	200000dc 	.word	0x200000dc
 8000640:	08006700 	.word	0x08006700
 8000644:	080008c5 	.word	0x080008c5
 8000648:	200000e0 	.word	0x200000e0
 800064c:	08006710 	.word	0x08006710
 8000650:	080008e5 	.word	0x080008e5

08000654 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b094      	sub	sp, #80	@ 0x50
 8000658:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065a:	f107 0320 	add.w	r3, r7, #32
 800065e:	2230      	movs	r2, #48	@ 0x30
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f005 fffe 	bl	8006664 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000678:	2300      	movs	r3, #0
 800067a:	60bb      	str	r3, [r7, #8]
 800067c:	4b22      	ldr	r3, [pc, #136]	@ (8000708 <SystemClock_Config+0xb4>)
 800067e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000680:	4a21      	ldr	r2, [pc, #132]	@ (8000708 <SystemClock_Config+0xb4>)
 8000682:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000686:	6413      	str	r3, [r2, #64]	@ 0x40
 8000688:	4b1f      	ldr	r3, [pc, #124]	@ (8000708 <SystemClock_Config+0xb4>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800068c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000694:	2300      	movs	r3, #0
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	4b1c      	ldr	r3, [pc, #112]	@ (800070c <SystemClock_Config+0xb8>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a1b      	ldr	r2, [pc, #108]	@ (800070c <SystemClock_Config+0xb8>)
 800069e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006a2:	6013      	str	r3, [r2, #0]
 80006a4:	4b19      	ldr	r3, [pc, #100]	@ (800070c <SystemClock_Config+0xb8>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80006ac:	607b      	str	r3, [r7, #4]
 80006ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006b0:	2302      	movs	r3, #2
 80006b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b4:	2301      	movs	r3, #1
 80006b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b8:	2310      	movs	r3, #16
 80006ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006c0:	f107 0320 	add.w	r3, r7, #32
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 f917 	bl	80018f8 <HAL_RCC_OscConfig>
 80006ca:	4603      	mov	r3, r0
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	d001      	beq.n	80006d4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80006d0:	f000 f938 	bl	8000944 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006d4:	230f      	movs	r3, #15
 80006d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80006d8:	2300      	movs	r3, #0
 80006da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f001 fb7a 	bl	8001de8 <HAL_RCC_ClockConfig>
 80006f4:	4603      	mov	r3, r0
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d001      	beq.n	80006fe <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006fa:	f000 f923 	bl	8000944 <Error_Handler>
  }
}
 80006fe:	bf00      	nop
 8000700:	3750      	adds	r7, #80	@ 0x50
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800
 800070c:	40007000 	.word	0x40007000

08000710 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000714:	4b17      	ldr	r3, [pc, #92]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000716:	4a18      	ldr	r2, [pc, #96]	@ (8000778 <MX_SPI1_Init+0x68>)
 8000718:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800071a:	4b16      	ldr	r3, [pc, #88]	@ (8000774 <MX_SPI1_Init+0x64>)
 800071c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000720:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000722:	4b14      	ldr	r3, [pc, #80]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000724:	2200      	movs	r2, #0
 8000726:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000728:	4b12      	ldr	r3, [pc, #72]	@ (8000774 <MX_SPI1_Init+0x64>)
 800072a:	2200      	movs	r2, #0
 800072c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800072e:	4b11      	ldr	r3, [pc, #68]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000734:	4b0f      	ldr	r3, [pc, #60]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800073a:	4b0e      	ldr	r3, [pc, #56]	@ (8000774 <MX_SPI1_Init+0x64>)
 800073c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000740:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000742:	4b0c      	ldr	r3, [pc, #48]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000744:	2200      	movs	r2, #0
 8000746:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000748:	4b0a      	ldr	r3, [pc, #40]	@ (8000774 <MX_SPI1_Init+0x64>)
 800074a:	2200      	movs	r2, #0
 800074c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800074e:	4b09      	ldr	r3, [pc, #36]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000750:	2200      	movs	r2, #0
 8000752:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000754:	4b07      	ldr	r3, [pc, #28]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000756:	2200      	movs	r2, #0
 8000758:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800075a:	4b06      	ldr	r3, [pc, #24]	@ (8000774 <MX_SPI1_Init+0x64>)
 800075c:	220a      	movs	r2, #10
 800075e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000760:	4804      	ldr	r0, [pc, #16]	@ (8000774 <MX_SPI1_Init+0x64>)
 8000762:	f001 fd53 	bl	800220c <HAL_SPI_Init>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	d001      	beq.n	8000770 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800076c:	f000 f8ea 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000770:	bf00      	nop
 8000772:	bd80      	pop	{r7, pc}
 8000774:	20000038 	.word	0x20000038
 8000778:	40013000 	.word	0x40013000

0800077c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000780:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000782:	4a12      	ldr	r2, [pc, #72]	@ (80007cc <MX_USART1_UART_Init+0x50>)
 8000784:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000786:	4b10      	ldr	r3, [pc, #64]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000788:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800078c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800078e:	4b0e      	ldr	r3, [pc, #56]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000790:	2200      	movs	r2, #0
 8000792:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000794:	4b0c      	ldr	r3, [pc, #48]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 8000796:	2200      	movs	r2, #0
 8000798:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800079a:	4b0b      	ldr	r3, [pc, #44]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007a0:	4b09      	ldr	r3, [pc, #36]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007a2:	220c      	movs	r2, #12
 80007a4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007ac:	4b06      	ldr	r3, [pc, #24]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007b2:	4805      	ldr	r0, [pc, #20]	@ (80007c8 <MX_USART1_UART_Init+0x4c>)
 80007b4:	f002 fa76 	bl	8002ca4 <HAL_UART_Init>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007be:	f000 f8c1 	bl	8000944 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007c2:	bf00      	nop
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	20000090 	.word	0x20000090
 80007cc:	40011000 	.word	0x40011000

080007d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b088      	sub	sp, #32
 80007d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d6:	f107 030c 	add.w	r3, r7, #12
 80007da:	2200      	movs	r2, #0
 80007dc:	601a      	str	r2, [r3, #0]
 80007de:	605a      	str	r2, [r3, #4]
 80007e0:	609a      	str	r2, [r3, #8]
 80007e2:	60da      	str	r2, [r3, #12]
 80007e4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	60bb      	str	r3, [r7, #8]
 80007ea:	4b19      	ldr	r3, [pc, #100]	@ (8000850 <MX_GPIO_Init+0x80>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a18      	ldr	r2, [pc, #96]	@ (8000850 <MX_GPIO_Init+0x80>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b16      	ldr	r3, [pc, #88]	@ (8000850 <MX_GPIO_Init+0x80>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b12      	ldr	r3, [pc, #72]	@ (8000850 <MX_GPIO_Init+0x80>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080a:	4a11      	ldr	r2, [pc, #68]	@ (8000850 <MX_GPIO_Init+0x80>)
 800080c:	f043 0302 	orr.w	r3, r3, #2
 8000810:	6313      	str	r3, [r2, #48]	@ 0x30
 8000812:	4b0f      	ldr	r3, [pc, #60]	@ (8000850 <MX_GPIO_Init+0x80>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	f003 0302 	and.w	r3, r3, #2
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin
 800081e:	2200      	movs	r2, #0
 8000820:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8000824:	480b      	ldr	r0, [pc, #44]	@ (8000854 <MX_GPIO_Init+0x84>)
 8000826:	f001 f833 	bl	8001890 <HAL_GPIO_WritePin>
                          |LCD_DC_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PB0 LCD_RST_Pin LCD_BL_Pin LCD_CS_Pin
                           LCD_DC_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LCD_RST_Pin|LCD_BL_Pin|LCD_CS_Pin
 800082a:	f240 13c5 	movw	r3, #453	@ 0x1c5
 800082e:	60fb      	str	r3, [r7, #12]
                          |LCD_DC_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000830:	2301      	movs	r3, #1
 8000832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000834:	2300      	movs	r3, #0
 8000836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	2300      	movs	r3, #0
 800083a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800083c:	f107 030c 	add.w	r3, r7, #12
 8000840:	4619      	mov	r1, r3
 8000842:	4804      	ldr	r0, [pc, #16]	@ (8000854 <MX_GPIO_Init+0x84>)
 8000844:	f000 fe88 	bl	8001558 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000848:	bf00      	nop
 800084a:	3720      	adds	r7, #32
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	40023800 	.word	0x40023800
 8000854:	40020400 	.word	0x40020400

08000858 <HAL_UARTEx_RxEventCallback>:
//	xTaskNotifyFromISR(lcd_handle, 0,eNoAction, NULL);
//    HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 12);
//}

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af02      	add	r7, sp, #8
 800085e:	6078      	str	r0, [r7, #4]
 8000860:	460b      	mov	r3, r1
 8000862:	807b      	strh	r3, [r7, #2]
    RxDataLen = Size;
 8000864:	4a0b      	ldr	r2, [pc, #44]	@ (8000894 <HAL_UARTEx_RxEventCallback+0x3c>)
 8000866:	887b      	ldrh	r3, [r7, #2]
 8000868:	8013      	strh	r3, [r2, #0]
    xTaskNotifyFromISR(lcd_handle, 0,eNoAction, NULL);
 800086a:	4b0b      	ldr	r3, [pc, #44]	@ (8000898 <HAL_UARTEx_RxEventCallback+0x40>)
 800086c:	6818      	ldr	r0, [r3, #0]
 800086e:	2300      	movs	r3, #0
 8000870:	9301      	str	r3, [sp, #4]
 8000872:	2300      	movs	r3, #0
 8000874:	9300      	str	r3, [sp, #0]
 8000876:	2300      	movs	r3, #0
 8000878:	2200      	movs	r2, #0
 800087a:	2100      	movs	r1, #0
 800087c:	f004 fe0c 	bl	8005498 <xTaskGenericNotifyFromISR>
    HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 8000880:	2228      	movs	r2, #40	@ 0x28
 8000882:	4906      	ldr	r1, [pc, #24]	@ (800089c <HAL_UARTEx_RxEventCallback+0x44>)
 8000884:	4806      	ldr	r0, [pc, #24]	@ (80008a0 <HAL_UARTEx_RxEventCallback+0x48>)
 8000886:	f002 fa5d 	bl	8002d44 <HAL_UARTEx_ReceiveToIdle_IT>
}
 800088a:	bf00      	nop
 800088c:	3708      	adds	r7, #8
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	2000010c 	.word	0x2000010c
 8000898:	200000e0 	.word	0x200000e0
 800089c:	200000e4 	.word	0x200000e4
 80008a0:	20000090 	.word	0x20000090

080008a4 <LED_Blinking_Task>:

static void LED_Blinking_Task(void *parameters)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	while(1){
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008ac:	2101      	movs	r1, #1
 80008ae:	4804      	ldr	r0, [pc, #16]	@ (80008c0 <LED_Blinking_Task+0x1c>)
 80008b0:	f001 f807 	bl	80018c2 <HAL_GPIO_TogglePin>
		vTaskDelay(pdMS_TO_TICKS(1000));
 80008b4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80008b8:	f004 f888 	bl	80049cc <vTaskDelay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008bc:	bf00      	nop
 80008be:	e7f5      	b.n	80008ac <LED_Blinking_Task+0x8>
 80008c0:	40020400 	.word	0x40020400

080008c4 <UART_Receive_Task>:
	}
}

static void UART_Receive_Task(void *parameters){
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1, UART1_RxBuffer, UART_RX_BUFFER_SIZE);
 80008cc:	2228      	movs	r2, #40	@ 0x28
 80008ce:	4903      	ldr	r1, [pc, #12]	@ (80008dc <UART_Receive_Task+0x18>)
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <UART_Receive_Task+0x1c>)
 80008d2:	f002 fa37 	bl	8002d44 <HAL_UARTEx_ReceiveToIdle_IT>
	while(1){
 80008d6:	bf00      	nop
 80008d8:	e7fd      	b.n	80008d6 <UART_Receive_Task+0x12>
 80008da:	bf00      	nop
 80008dc:	200000e4 	.word	0x200000e4
 80008e0:	20000090 	.word	0x20000090

080008e4 <LCD_Display_Task>:

	}
}

static void LCD_Display_Task(void *parameters){
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af02      	add	r7, sp, #8
 80008ea:	6078      	str	r0, [r7, #4]
	display_clear();
 80008ec:	f7ff fe38 	bl	8000560 <display_clear>
	display_init();
 80008f0:	f7ff fde6 	bl	80004c0 <display_init>
	BaseType_t status;
	while(1){
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 80008f4:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 80008f8:	9300      	str	r3, [sp, #0]
 80008fa:	2300      	movs	r3, #0
 80008fc:	2200      	movs	r2, #0
 80008fe:	2100      	movs	r1, #0
 8000900:	2000      	movs	r0, #0
 8000902:	f004 fd49 	bl	8005398 <xTaskGenericNotifyWait>
 8000906:	60f8      	str	r0, [r7, #12]
		if (status == pdTRUE){
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2b01      	cmp	r3, #1
 800090c:	d1f2      	bne.n	80008f4 <LCD_Display_Task+0x10>
			display_clear();
 800090e:	f7ff fe27 	bl	8000560 <display_clear>
			display_text((char*)UART1_RxBuffer);
 8000912:	4802      	ldr	r0, [pc, #8]	@ (800091c <LCD_Display_Task+0x38>)
 8000914:	f7ff fde2 	bl	80004dc <display_text>
		status = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000918:	e7ec      	b.n	80008f4 <LCD_Display_Task+0x10>
 800091a:	bf00      	nop
 800091c:	200000e4 	.word	0x200000e4

08000920 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a04      	ldr	r2, [pc, #16]	@ (8000940 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d101      	bne.n	8000936 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000932:	f000 fc59 	bl	80011e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000936:	bf00      	nop
 8000938:	3708      	adds	r7, #8
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40001000 	.word	0x40001000

08000944 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000948:	b672      	cpsid	i
}
 800094a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800094c:	bf00      	nop
 800094e:	e7fd      	b.n	800094c <Error_Handler+0x8>

08000950 <ST7789_WriteCommand>:
 * @brief Write command to ST7789 controller
 * @param cmd -> command to write
 * @return none
 */
static void ST7789_WriteCommand(uint8_t cmd)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 800095a:	2200      	movs	r2, #0
 800095c:	2180      	movs	r1, #128	@ 0x80
 800095e:	480c      	ldr	r0, [pc, #48]	@ (8000990 <ST7789_WriteCommand+0x40>)
 8000960:	f000 ff96 	bl	8001890 <HAL_GPIO_WritePin>
	ST7789_DC_Clr();
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800096a:	4809      	ldr	r0, [pc, #36]	@ (8000990 <ST7789_WriteCommand+0x40>)
 800096c:	f000 ff90 	bl	8001890 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000970:	1df9      	adds	r1, r7, #7
 8000972:	f04f 33ff 	mov.w	r3, #4294967295
 8000976:	2201      	movs	r2, #1
 8000978:	4806      	ldr	r0, [pc, #24]	@ (8000994 <ST7789_WriteCommand+0x44>)
 800097a:	f001 fcd0 	bl	800231e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 800097e:	2201      	movs	r2, #1
 8000980:	2180      	movs	r1, #128	@ 0x80
 8000982:	4803      	ldr	r0, [pc, #12]	@ (8000990 <ST7789_WriteCommand+0x40>)
 8000984:	f000 ff84 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000988:	bf00      	nop
 800098a:	3708      	adds	r7, #8
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	40020400 	.word	0x40020400
 8000994:	20000038 	.word	0x20000038

08000998 <ST7789_WriteData>:
 * @param buff -> pointer of data buffer
 * @param buff_size -> size of the data buffer
 * @return none
 */
static void ST7789_WriteData(uint8_t *buff, size_t buff_size)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
 80009a0:	6039      	str	r1, [r7, #0]
	ST7789_Select();
 80009a2:	2200      	movs	r2, #0
 80009a4:	2180      	movs	r1, #128	@ 0x80
 80009a6:	4816      	ldr	r0, [pc, #88]	@ (8000a00 <ST7789_WriteData+0x68>)
 80009a8:	f000 ff72 	bl	8001890 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 80009ac:	2201      	movs	r2, #1
 80009ae:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80009b2:	4813      	ldr	r0, [pc, #76]	@ (8000a00 <ST7789_WriteData+0x68>)
 80009b4:	f000 ff6c 	bl	8001890 <HAL_GPIO_WritePin>

	// split data in small chunks because HAL can't send more than 64K at once

	while (buff_size > 0) {
 80009b8:	e015      	b.n	80009e6 <ST7789_WriteData+0x4e>
		uint16_t chunk_size = buff_size > 65535 ? 65535 : buff_size;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009c0:	4293      	cmp	r3, r2
 80009c2:	bf28      	it	cs
 80009c4:	4613      	movcs	r3, r2
 80009c6:	81fb      	strh	r3, [r7, #14]
				{}
			}
			else
				HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
		#else
			HAL_SPI_Transmit(&ST7789_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80009c8:	89fa      	ldrh	r2, [r7, #14]
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	480c      	ldr	r0, [pc, #48]	@ (8000a04 <ST7789_WriteData+0x6c>)
 80009d2:	f001 fca4 	bl	800231e <HAL_SPI_Transmit>
		#endif
		buff += chunk_size;
 80009d6:	89fb      	ldrh	r3, [r7, #14]
 80009d8:	687a      	ldr	r2, [r7, #4]
 80009da:	4413      	add	r3, r2
 80009dc:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80009de:	89fb      	ldrh	r3, [r7, #14]
 80009e0:	683a      	ldr	r2, [r7, #0]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	603b      	str	r3, [r7, #0]
	while (buff_size > 0) {
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d1e6      	bne.n	80009ba <ST7789_WriteData+0x22>
	}

	ST7789_UnSelect();
 80009ec:	2201      	movs	r2, #1
 80009ee:	2180      	movs	r1, #128	@ 0x80
 80009f0:	4803      	ldr	r0, [pc, #12]	@ (8000a00 <ST7789_WriteData+0x68>)
 80009f2:	f000 ff4d 	bl	8001890 <HAL_GPIO_WritePin>
}
 80009f6:	bf00      	nop
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40020400 	.word	0x40020400
 8000a04:	20000038 	.word	0x20000038

08000a08 <ST7789_WriteSmallData>:
 * @brief Write data to ST7789 controller, simplify for 8bit data.
 * data -> data to write
 * @return none
 */
static void ST7789_WriteSmallData(uint8_t data)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	4603      	mov	r3, r0
 8000a10:	71fb      	strb	r3, [r7, #7]
	ST7789_Select();
 8000a12:	2200      	movs	r2, #0
 8000a14:	2180      	movs	r1, #128	@ 0x80
 8000a16:	480c      	ldr	r0, [pc, #48]	@ (8000a48 <ST7789_WriteSmallData+0x40>)
 8000a18:	f000 ff3a 	bl	8001890 <HAL_GPIO_WritePin>
	ST7789_DC_Set();
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a22:	4809      	ldr	r0, [pc, #36]	@ (8000a48 <ST7789_WriteSmallData+0x40>)
 8000a24:	f000 ff34 	bl	8001890 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&ST7789_SPI_PORT, &data, sizeof(data), HAL_MAX_DELAY);
 8000a28:	1df9      	adds	r1, r7, #7
 8000a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4806      	ldr	r0, [pc, #24]	@ (8000a4c <ST7789_WriteSmallData+0x44>)
 8000a32:	f001 fc74 	bl	800231e <HAL_SPI_Transmit>
	ST7789_UnSelect();
 8000a36:	2201      	movs	r2, #1
 8000a38:	2180      	movs	r1, #128	@ 0x80
 8000a3a:	4803      	ldr	r0, [pc, #12]	@ (8000a48 <ST7789_WriteSmallData+0x40>)
 8000a3c:	f000 ff28 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000a40:	bf00      	nop
 8000a42:	3708      	adds	r7, #8
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	20000038 	.word	0x20000038

08000a50 <ST7789_SetRotation>:
 * @brief Set the rotation direction of the display
 * @param m -> rotation parameter(please refer it in st7789.h)
 * @return none
 */
void ST7789_SetRotation(uint8_t m)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	71fb      	strb	r3, [r7, #7]
	ST7789_WriteCommand(ST7789_MADCTL);	// MADCTL
 8000a5a:	2036      	movs	r0, #54	@ 0x36
 8000a5c:	f7ff ff78 	bl	8000950 <ST7789_WriteCommand>
	switch (m) {
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b03      	cmp	r3, #3
 8000a64:	d81a      	bhi.n	8000a9c <ST7789_SetRotation+0x4c>
 8000a66:	a201      	add	r2, pc, #4	@ (adr r2, 8000a6c <ST7789_SetRotation+0x1c>)
 8000a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a6c:	08000a7d 	.word	0x08000a7d
 8000a70:	08000a85 	.word	0x08000a85
 8000a74:	08000a8d 	.word	0x08000a8d
 8000a78:	08000a95 	.word	0x08000a95
	case 0:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MY | ST7789_MADCTL_RGB);
 8000a7c:	20c0      	movs	r0, #192	@ 0xc0
 8000a7e:	f7ff ffc3 	bl	8000a08 <ST7789_WriteSmallData>
		break;
 8000a82:	e00c      	b.n	8000a9e <ST7789_SetRotation+0x4e>
	case 1:
		ST7789_WriteSmallData(ST7789_MADCTL_MY | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000a84:	20a0      	movs	r0, #160	@ 0xa0
 8000a86:	f7ff ffbf 	bl	8000a08 <ST7789_WriteSmallData>
		break;
 8000a8a:	e008      	b.n	8000a9e <ST7789_SetRotation+0x4e>
	case 2:
		ST7789_WriteSmallData(ST7789_MADCTL_RGB);
 8000a8c:	2000      	movs	r0, #0
 8000a8e:	f7ff ffbb 	bl	8000a08 <ST7789_WriteSmallData>
		break;
 8000a92:	e004      	b.n	8000a9e <ST7789_SetRotation+0x4e>
	case 3:
		ST7789_WriteSmallData(ST7789_MADCTL_MX | ST7789_MADCTL_MV | ST7789_MADCTL_RGB);
 8000a94:	2060      	movs	r0, #96	@ 0x60
 8000a96:	f7ff ffb7 	bl	8000a08 <ST7789_WriteSmallData>
		break;
 8000a9a:	e000      	b.n	8000a9e <ST7789_SetRotation+0x4e>
	default:
		break;
 8000a9c:	bf00      	nop
	}
}
 8000a9e:	bf00      	nop
 8000aa0:	3708      	adds	r7, #8
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop

08000aa8 <ST7789_SetAddressWindow>:
 * @brief Set address of DisplayWindow
 * @param xi&yi -> coordinates of window
 * @return none
 */
static void ST7789_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4603      	mov	r3, r0
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	807b      	strh	r3, [r7, #2]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	803b      	strh	r3, [r7, #0]
	ST7789_Select();
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2180      	movs	r1, #128	@ 0x80
 8000aca:	4824      	ldr	r0, [pc, #144]	@ (8000b5c <ST7789_SetAddressWindow+0xb4>)
 8000acc:	f000 fee0 	bl	8001890 <HAL_GPIO_WritePin>
	uint16_t x_start = x0 + X_SHIFT, x_end = x1 + X_SHIFT;
 8000ad0:	88fb      	ldrh	r3, [r7, #6]
 8000ad2:	82fb      	strh	r3, [r7, #22]
 8000ad4:	887b      	ldrh	r3, [r7, #2]
 8000ad6:	82bb      	strh	r3, [r7, #20]
	uint16_t y_start = y0 + Y_SHIFT, y_end = y1 + Y_SHIFT;
 8000ad8:	88bb      	ldrh	r3, [r7, #4]
 8000ada:	827b      	strh	r3, [r7, #18]
 8000adc:	883b      	ldrh	r3, [r7, #0]
 8000ade:	823b      	strh	r3, [r7, #16]

	/* Column Address set */
	ST7789_WriteCommand(ST7789_CASET);
 8000ae0:	202a      	movs	r0, #42	@ 0x2a
 8000ae2:	f7ff ff35 	bl	8000950 <ST7789_WriteCommand>
	{
		uint8_t data[] = {x_start >> 8, x_start & 0xFF, x_end >> 8, x_end & 0xFF};
 8000ae6:	8afb      	ldrh	r3, [r7, #22]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	b29b      	uxth	r3, r3
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	733b      	strb	r3, [r7, #12]
 8000af0:	8afb      	ldrh	r3, [r7, #22]
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	737b      	strb	r3, [r7, #13]
 8000af6:	8abb      	ldrh	r3, [r7, #20]
 8000af8:	0a1b      	lsrs	r3, r3, #8
 8000afa:	b29b      	uxth	r3, r3
 8000afc:	b2db      	uxtb	r3, r3
 8000afe:	73bb      	strb	r3, [r7, #14]
 8000b00:	8abb      	ldrh	r3, [r7, #20]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	73fb      	strb	r3, [r7, #15]
		ST7789_WriteData(data, sizeof(data));
 8000b06:	f107 030c 	add.w	r3, r7, #12
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	f7ff ff43 	bl	8000998 <ST7789_WriteData>
	}

	/* Row Address set */
	ST7789_WriteCommand(ST7789_RASET);
 8000b12:	202b      	movs	r0, #43	@ 0x2b
 8000b14:	f7ff ff1c 	bl	8000950 <ST7789_WriteCommand>
	{
		uint8_t data[] = {y_start >> 8, y_start & 0xFF, y_end >> 8, y_end & 0xFF};
 8000b18:	8a7b      	ldrh	r3, [r7, #18]
 8000b1a:	0a1b      	lsrs	r3, r3, #8
 8000b1c:	b29b      	uxth	r3, r3
 8000b1e:	b2db      	uxtb	r3, r3
 8000b20:	723b      	strb	r3, [r7, #8]
 8000b22:	8a7b      	ldrh	r3, [r7, #18]
 8000b24:	b2db      	uxtb	r3, r3
 8000b26:	727b      	strb	r3, [r7, #9]
 8000b28:	8a3b      	ldrh	r3, [r7, #16]
 8000b2a:	0a1b      	lsrs	r3, r3, #8
 8000b2c:	b29b      	uxth	r3, r3
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	72bb      	strb	r3, [r7, #10]
 8000b32:	8a3b      	ldrh	r3, [r7, #16]
 8000b34:	b2db      	uxtb	r3, r3
 8000b36:	72fb      	strb	r3, [r7, #11]
		ST7789_WriteData(data, sizeof(data));
 8000b38:	f107 0308 	add.w	r3, r7, #8
 8000b3c:	2104      	movs	r1, #4
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f7ff ff2a 	bl	8000998 <ST7789_WriteData>
	}
	/* Write to RAM */
	ST7789_WriteCommand(ST7789_RAMWR);
 8000b44:	202c      	movs	r0, #44	@ 0x2c
 8000b46:	f7ff ff03 	bl	8000950 <ST7789_WriteCommand>
	ST7789_UnSelect();
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	2180      	movs	r1, #128	@ 0x80
 8000b4e:	4803      	ldr	r0, [pc, #12]	@ (8000b5c <ST7789_SetAddressWindow+0xb4>)
 8000b50:	f000 fe9e 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000b54:	bf00      	nop
 8000b56:	371c      	adds	r7, #28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd90      	pop	{r4, r7, pc}
 8000b5c:	40020400 	.word	0x40020400

08000b60 <ST7789_Init>:
 * @brief Initialize ST7789 controller
 * @param none
 * @return none
 */
void ST7789_Init(void)
{
 8000b60:	b590      	push	{r4, r7, lr}
 8000b62:	b08b      	sub	sp, #44	@ 0x2c
 8000b64:	af00      	add	r7, sp, #0
	#ifdef USE_DMA
		memset(disp_buf, 0, sizeof(disp_buf));
	#endif
	HAL_Delay(25);
 8000b66:	2019      	movs	r0, #25
 8000b68:	f000 fb5e 	bl	8001228 <HAL_Delay>
    ST7789_RST_Clr();
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2104      	movs	r1, #4
 8000b70:	4846      	ldr	r0, [pc, #280]	@ (8000c8c <ST7789_Init+0x12c>)
 8000b72:	f000 fe8d 	bl	8001890 <HAL_GPIO_WritePin>
    HAL_Delay(25);
 8000b76:	2019      	movs	r0, #25
 8000b78:	f000 fb56 	bl	8001228 <HAL_Delay>
    ST7789_RST_Set();
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	2104      	movs	r1, #4
 8000b80:	4842      	ldr	r0, [pc, #264]	@ (8000c8c <ST7789_Init+0x12c>)
 8000b82:	f000 fe85 	bl	8001890 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8000b86:	2032      	movs	r0, #50	@ 0x32
 8000b88:	f000 fb4e 	bl	8001228 <HAL_Delay>

    ST7789_WriteCommand(ST7789_COLMOD);		//	Set color mode
 8000b8c:	203a      	movs	r0, #58	@ 0x3a
 8000b8e:	f7ff fedf 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData(ST7789_COLOR_MODE_16bit);
 8000b92:	2055      	movs	r0, #85	@ 0x55
 8000b94:	f7ff ff38 	bl	8000a08 <ST7789_WriteSmallData>
  	ST7789_WriteCommand(0xB2);				//	Porch control
 8000b98:	20b2      	movs	r0, #178	@ 0xb2
 8000b9a:	f7ff fed9 	bl	8000950 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0x0C, 0x0C, 0x00, 0x33, 0x33};
 8000b9e:	4a3c      	ldr	r2, [pc, #240]	@ (8000c90 <ST7789_Init+0x130>)
 8000ba0:	f107 0320 	add.w	r3, r7, #32
 8000ba4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000ba8:	6018      	str	r0, [r3, #0]
 8000baa:	3304      	adds	r3, #4
 8000bac:	7019      	strb	r1, [r3, #0]
		ST7789_WriteData(data, sizeof(data));
 8000bae:	f107 0320 	add.w	r3, r7, #32
 8000bb2:	2105      	movs	r1, #5
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f7ff feef 	bl	8000998 <ST7789_WriteData>
	}
	ST7789_SetRotation(ST7789_ROTATION);	//	MADCTL (Display Rotation)
 8000bba:	2002      	movs	r0, #2
 8000bbc:	f7ff ff48 	bl	8000a50 <ST7789_SetRotation>

	/* Internal LCD Voltage generator settings */
    ST7789_WriteCommand(0XB7);				//	Gate Control
 8000bc0:	20b7      	movs	r0, #183	@ 0xb7
 8000bc2:	f7ff fec5 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x35);			//	Default value
 8000bc6:	2035      	movs	r0, #53	@ 0x35
 8000bc8:	f7ff ff1e 	bl	8000a08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xBB);				//	VCOM setting
 8000bcc:	20bb      	movs	r0, #187	@ 0xbb
 8000bce:	f7ff febf 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData(0x19);			//	0.725v (default 0.75v for 0x20)
 8000bd2:	2019      	movs	r0, #25
 8000bd4:	f7ff ff18 	bl	8000a08 <ST7789_WriteSmallData>
    ST7789_WriteCommand(0xC0);				//	LCMCTRL
 8000bd8:	20c0      	movs	r0, #192	@ 0xc0
 8000bda:	f7ff feb9 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x2C);			//	Default value
 8000bde:	202c      	movs	r0, #44	@ 0x2c
 8000be0:	f7ff ff12 	bl	8000a08 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC2);				//	VDV and VRH command Enable
 8000be4:	20c2      	movs	r0, #194	@ 0xc2
 8000be6:	f7ff feb3 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x01);			//	Default value
 8000bea:	2001      	movs	r0, #1
 8000bec:	f7ff ff0c 	bl	8000a08 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC3);				//	VRH set
 8000bf0:	20c3      	movs	r0, #195	@ 0xc3
 8000bf2:	f7ff fead 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x12);			//	+-4.45v (defalut +-4.1v for 0x0B)
 8000bf6:	2012      	movs	r0, #18
 8000bf8:	f7ff ff06 	bl	8000a08 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC4);				//	VDV set
 8000bfc:	20c4      	movs	r0, #196	@ 0xc4
 8000bfe:	f7ff fea7 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x20);			//	Default value
 8000c02:	2020      	movs	r0, #32
 8000c04:	f7ff ff00 	bl	8000a08 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xC6);				//	Frame rate control in normal mode
 8000c08:	20c6      	movs	r0, #198	@ 0xc6
 8000c0a:	f7ff fea1 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0x0F);			//	Default value (60HZ)
 8000c0e:	200f      	movs	r0, #15
 8000c10:	f7ff fefa 	bl	8000a08 <ST7789_WriteSmallData>
    ST7789_WriteCommand (0xD0);				//	Power control
 8000c14:	20d0      	movs	r0, #208	@ 0xd0
 8000c16:	f7ff fe9b 	bl	8000950 <ST7789_WriteCommand>
    ST7789_WriteSmallData (0xA4);			//	Default value
 8000c1a:	20a4      	movs	r0, #164	@ 0xa4
 8000c1c:	f7ff fef4 	bl	8000a08 <ST7789_WriteSmallData>
    ST7789_WriteSmallData (0xA1);			//	Default value
 8000c20:	20a1      	movs	r0, #161	@ 0xa1
 8000c22:	f7ff fef1 	bl	8000a08 <ST7789_WriteSmallData>
	/**************** Division line ****************/

	ST7789_WriteCommand(0xE0);
 8000c26:	20e0      	movs	r0, #224	@ 0xe0
 8000c28:	f7ff fe92 	bl	8000950 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0D, 0x11, 0x13, 0x2B, 0x3F, 0x54, 0x4C, 0x18, 0x0D, 0x0B, 0x1F, 0x23};
 8000c2c:	4b19      	ldr	r3, [pc, #100]	@ (8000c94 <ST7789_Init+0x134>)
 8000c2e:	f107 0410 	add.w	r4, r7, #16
 8000c32:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c34:	c407      	stmia	r4!, {r0, r1, r2}
 8000c36:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000c38:	f107 0310 	add.w	r3, r7, #16
 8000c3c:	210e      	movs	r1, #14
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f7ff feaa 	bl	8000998 <ST7789_WriteData>
	}

    ST7789_WriteCommand(0xE1);
 8000c44:	20e1      	movs	r0, #225	@ 0xe1
 8000c46:	f7ff fe83 	bl	8000950 <ST7789_WriteCommand>
	{
		uint8_t data[] = {0xD0, 0x04, 0x0C, 0x11, 0x13, 0x2C, 0x3F, 0x44, 0x51, 0x2F, 0x1F, 0x1F, 0x20, 0x23};
 8000c4a:	4b13      	ldr	r3, [pc, #76]	@ (8000c98 <ST7789_Init+0x138>)
 8000c4c:	463c      	mov	r4, r7
 8000c4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000c50:	c407      	stmia	r4!, {r0, r1, r2}
 8000c52:	8023      	strh	r3, [r4, #0]
		ST7789_WriteData(data, sizeof(data));
 8000c54:	463b      	mov	r3, r7
 8000c56:	210e      	movs	r1, #14
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f7ff fe9d 	bl	8000998 <ST7789_WriteData>
	}
    ST7789_WriteCommand (ST7789_INVON);		//	Inversion ON
 8000c5e:	2021      	movs	r0, #33	@ 0x21
 8000c60:	f7ff fe76 	bl	8000950 <ST7789_WriteCommand>
	ST7789_WriteCommand (ST7789_SLPOUT);	//	Out of sleep mode
 8000c64:	2011      	movs	r0, #17
 8000c66:	f7ff fe73 	bl	8000950 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_NORON);		//	Normal Display on
 8000c6a:	2013      	movs	r0, #19
 8000c6c:	f7ff fe70 	bl	8000950 <ST7789_WriteCommand>
  	ST7789_WriteCommand (ST7789_DISPON);	//	Main screen turned on
 8000c70:	2029      	movs	r0, #41	@ 0x29
 8000c72:	f7ff fe6d 	bl	8000950 <ST7789_WriteCommand>

	HAL_Delay(50);
 8000c76:	2032      	movs	r0, #50	@ 0x32
 8000c78:	f000 fad6 	bl	8001228 <HAL_Delay>
	ST7789_Fill_Color(WHITE);				//	Fill with Black.
 8000c7c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c80:	f000 f80c 	bl	8000c9c <ST7789_Fill_Color>
}
 8000c84:	bf00      	nop
 8000c86:	372c      	adds	r7, #44	@ 0x2c
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd90      	pop	{r4, r7, pc}
 8000c8c:	40020400 	.word	0x40020400
 8000c90:	08006720 	.word	0x08006720
 8000c94:	08006728 	.word	0x08006728
 8000c98:	08006738 	.word	0x08006738

08000c9c <ST7789_Fill_Color>:
 * @brief Fill the DisplayWindow with single color
 * @param color -> color to Fill with
 * @return none
 */
void ST7789_Fill_Color(uint16_t color)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	80fb      	strh	r3, [r7, #6]
	uint16_t i;
	ST7789_SetAddressWindow(0, 0, ST7789_WIDTH - 1, ST7789_HEIGHT - 1);
 8000ca6:	f240 133f 	movw	r3, #319	@ 0x13f
 8000caa:	22ef      	movs	r2, #239	@ 0xef
 8000cac:	2100      	movs	r1, #0
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fefa 	bl	8000aa8 <ST7789_SetAddressWindow>
	ST7789_Select();
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	2180      	movs	r1, #128	@ 0x80
 8000cb8:	4816      	ldr	r0, [pc, #88]	@ (8000d14 <ST7789_Fill_Color+0x78>)
 8000cba:	f000 fde9 	bl	8001890 <HAL_GPIO_WritePin>
			memset(disp_buf, color, sizeof(disp_buf));
			ST7789_WriteData(disp_buf, sizeof(disp_buf));
		}
	#else
		uint16_t j;
		for (i = 0; i < ST7789_WIDTH; i++)
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	81fb      	strh	r3, [r7, #14]
 8000cc2:	e01a      	b.n	8000cfa <ST7789_Fill_Color+0x5e>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	81bb      	strh	r3, [r7, #12]
 8000cc8:	e010      	b.n	8000cec <ST7789_Fill_Color+0x50>
					uint8_t data[] = {color >> 8, color & 0xFF};
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	0a1b      	lsrs	r3, r3, #8
 8000cce:	b29b      	uxth	r3, r3
 8000cd0:	b2db      	uxtb	r3, r3
 8000cd2:	723b      	strb	r3, [r7, #8]
 8000cd4:	88fb      	ldrh	r3, [r7, #6]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	727b      	strb	r3, [r7, #9]
					ST7789_WriteData(data, sizeof(data));
 8000cda:	f107 0308 	add.w	r3, r7, #8
 8000cde:	2102      	movs	r1, #2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fe59 	bl	8000998 <ST7789_WriteData>
				for (j = 0; j < ST7789_HEIGHT; j++) {
 8000ce6:	89bb      	ldrh	r3, [r7, #12]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	81bb      	strh	r3, [r7, #12]
 8000cec:	89bb      	ldrh	r3, [r7, #12]
 8000cee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000cf2:	d3ea      	bcc.n	8000cca <ST7789_Fill_Color+0x2e>
		for (i = 0; i < ST7789_WIDTH; i++)
 8000cf4:	89fb      	ldrh	r3, [r7, #14]
 8000cf6:	3301      	adds	r3, #1
 8000cf8:	81fb      	strh	r3, [r7, #14]
 8000cfa:	89fb      	ldrh	r3, [r7, #14]
 8000cfc:	2bef      	cmp	r3, #239	@ 0xef
 8000cfe:	d9e1      	bls.n	8000cc4 <ST7789_Fill_Color+0x28>
				}
	#endif
	ST7789_UnSelect();
 8000d00:	2201      	movs	r2, #1
 8000d02:	2180      	movs	r1, #128	@ 0x80
 8000d04:	4803      	ldr	r0, [pc, #12]	@ (8000d14 <ST7789_Fill_Color+0x78>)
 8000d06:	f000 fdc3 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40020400 	.word	0x40020400

08000d18 <ST7789_WriteChar>:
 * @param color -> color of the char
 * @param bgcolor -> background color of the char
 * @return  none
 */
void ST7789_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor)
{
 8000d18:	b082      	sub	sp, #8
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b088      	sub	sp, #32
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000d22:	4603      	mov	r3, r0
 8000d24:	80fb      	strh	r3, [r7, #6]
 8000d26:	460b      	mov	r3, r1
 8000d28:	80bb      	strh	r3, [r7, #4]
 8000d2a:	4613      	mov	r3, r2
 8000d2c:	70fb      	strb	r3, [r7, #3]
	uint32_t i, b, j;
	ST7789_Select();
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2180      	movs	r1, #128	@ 0x80
 8000d32:	4837      	ldr	r0, [pc, #220]	@ (8000e10 <ST7789_WriteChar+0xf8>)
 8000d34:	f000 fdac 	bl	8001890 <HAL_GPIO_WritePin>
	ST7789_SetAddressWindow(x, y, x + font.width - 1, y + font.height - 1);
 8000d38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000d3c:	461a      	mov	r2, r3
 8000d3e:	88fb      	ldrh	r3, [r7, #6]
 8000d40:	4413      	add	r3, r2
 8000d42:	b29b      	uxth	r3, r3
 8000d44:	3b01      	subs	r3, #1
 8000d46:	b29a      	uxth	r2, r3
 8000d48:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000d4c:	4619      	mov	r1, r3
 8000d4e:	88bb      	ldrh	r3, [r7, #4]
 8000d50:	440b      	add	r3, r1
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	3b01      	subs	r3, #1
 8000d56:	b29b      	uxth	r3, r3
 8000d58:	88b9      	ldrh	r1, [r7, #4]
 8000d5a:	88f8      	ldrh	r0, [r7, #6]
 8000d5c:	f7ff fea4 	bl	8000aa8 <ST7789_SetAddressWindow>

	for (i = 0; i < font.height; i++) {
 8000d60:	2300      	movs	r3, #0
 8000d62:	61fb      	str	r3, [r7, #28]
 8000d64:	e041      	b.n	8000dea <ST7789_WriteChar+0xd2>
		b = font.data[(ch - 32) * font.height + i];
 8000d66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	3b20      	subs	r3, #32
 8000d6c:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8000d70:	fb01 f303 	mul.w	r3, r1, r3
 8000d74:	4619      	mov	r1, r3
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	440b      	add	r3, r1
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	4413      	add	r3, r2
 8000d7e:	881b      	ldrh	r3, [r3, #0]
 8000d80:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font.width; j++) {
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
 8000d86:	e027      	b.n	8000dd8 <ST7789_WriteChar+0xc0>
			if ((b << j) & 0x8000) {
 8000d88:	697a      	ldr	r2, [r7, #20]
 8000d8a:	69bb      	ldr	r3, [r7, #24]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d00e      	beq.n	8000db6 <ST7789_WriteChar+0x9e>
				uint8_t data[] = {color >> 8, color & 0xFF};
 8000d98:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000d9a:	0a1b      	lsrs	r3, r3, #8
 8000d9c:	b29b      	uxth	r3, r3
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	743b      	strb	r3, [r7, #16]
 8000da2:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8000da4:	b2db      	uxtb	r3, r3
 8000da6:	747b      	strb	r3, [r7, #17]
				ST7789_WriteData(data, sizeof(data));
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	2102      	movs	r1, #2
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fdf2 	bl	8000998 <ST7789_WriteData>
 8000db4:	e00d      	b.n	8000dd2 <ST7789_WriteChar+0xba>
			}
			else {
				uint8_t data[] = {bgcolor >> 8, bgcolor & 0xFF};
 8000db6:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000db8:	0a1b      	lsrs	r3, r3, #8
 8000dba:	b29b      	uxth	r3, r3
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	733b      	strb	r3, [r7, #12]
 8000dc0:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dc2:	b2db      	uxtb	r3, r3
 8000dc4:	737b      	strb	r3, [r7, #13]
				ST7789_WriteData(data, sizeof(data));
 8000dc6:	f107 030c 	add.w	r3, r7, #12
 8000dca:	2102      	movs	r1, #2
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f7ff fde3 	bl	8000998 <ST7789_WriteData>
		for (j = 0; j < font.width; j++) {
 8000dd2:	69bb      	ldr	r3, [r7, #24]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
 8000dd8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000ddc:	461a      	mov	r2, r3
 8000dde:	69bb      	ldr	r3, [r7, #24]
 8000de0:	4293      	cmp	r3, r2
 8000de2:	d3d1      	bcc.n	8000d88 <ST7789_WriteChar+0x70>
	for (i = 0; i < font.height; i++) {
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	3301      	adds	r3, #1
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000dee:	461a      	mov	r2, r3
 8000df0:	69fb      	ldr	r3, [r7, #28]
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d3b7      	bcc.n	8000d66 <ST7789_WriteChar+0x4e>
			}
		}
	}
	ST7789_UnSelect();
 8000df6:	2201      	movs	r2, #1
 8000df8:	2180      	movs	r1, #128	@ 0x80
 8000dfa:	4805      	ldr	r0, [pc, #20]	@ (8000e10 <ST7789_WriteChar+0xf8>)
 8000dfc:	f000 fd48 	bl	8001890 <HAL_GPIO_WritePin>
}
 8000e00:	bf00      	nop
 8000e02:	3720      	adds	r7, #32
 8000e04:	46bd      	mov	sp, r7
 8000e06:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e0a:	b002      	add	sp, #8
 8000e0c:	4770      	bx	lr
 8000e0e:	bf00      	nop
 8000e10:	40020400 	.word	0x40020400

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
 8000e1e:	4b10      	ldr	r3, [pc, #64]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e22:	4a0f      	ldr	r2, [pc, #60]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e32:	607b      	str	r3, [r7, #4]
 8000e34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	603b      	str	r3, [r7, #0]
 8000e3a:	4b09      	ldr	r3, [pc, #36]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e3e:	4a08      	ldr	r2, [pc, #32]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e46:	4b06      	ldr	r3, [pc, #24]	@ (8000e60 <HAL_MspInit+0x4c>)
 8000e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e4e:	603b      	str	r3, [r7, #0]
 8000e50:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e52:	bf00      	nop
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	40023800 	.word	0x40023800

08000e64 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08a      	sub	sp, #40	@ 0x28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e6c:	f107 0314 	add.w	r3, r7, #20
 8000e70:	2200      	movs	r2, #0
 8000e72:	601a      	str	r2, [r3, #0]
 8000e74:	605a      	str	r2, [r3, #4]
 8000e76:	609a      	str	r2, [r3, #8]
 8000e78:	60da      	str	r2, [r3, #12]
 8000e7a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	4a28      	ldr	r2, [pc, #160]	@ (8000f24 <HAL_SPI_MspInit+0xc0>)
 8000e82:	4293      	cmp	r3, r2
 8000e84:	d149      	bne.n	8000f1a <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
 8000e8a:	4b27      	ldr	r3, [pc, #156]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a26      	ldr	r2, [pc, #152]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000e90:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b24      	ldr	r3, [pc, #144]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e9e:	613b      	str	r3, [r7, #16]
 8000ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
 8000ea6:	4b20      	ldr	r3, [pc, #128]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a1f      	ldr	r2, [pc, #124]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	60fb      	str	r3, [r7, #12]
 8000ebc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	4b19      	ldr	r3, [pc, #100]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a18      	ldr	r2, [pc, #96]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000ec8:	f043 0302 	orr.w	r3, r3, #2
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b16      	ldr	r3, [pc, #88]	@ (8000f28 <HAL_SPI_MspInit+0xc4>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0302 	and.w	r3, r3, #2
 8000ed6:	60bb      	str	r3, [r7, #8]
 8000ed8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    PB3     ------> SPI1_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000eda:	23c0      	movs	r3, #192	@ 0xc0
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000eea:	2305      	movs	r3, #5
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480d      	ldr	r0, [pc, #52]	@ (8000f2c <HAL_SPI_MspInit+0xc8>)
 8000ef6:	f000 fb2f 	bl	8001558 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000efa:	2308      	movs	r3, #8
 8000efc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efe:	2302      	movs	r3, #2
 8000f00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f06:	2303      	movs	r3, #3
 8000f08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000f0a:	2305      	movs	r3, #5
 8000f0c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f0e:	f107 0314 	add.w	r3, r7, #20
 8000f12:	4619      	mov	r1, r3
 8000f14:	4806      	ldr	r0, [pc, #24]	@ (8000f30 <HAL_SPI_MspInit+0xcc>)
 8000f16:	f000 fb1f 	bl	8001558 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f1a:	bf00      	nop
 8000f1c:	3728      	adds	r7, #40	@ 0x28
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40013000 	.word	0x40013000
 8000f28:	40023800 	.word	0x40023800
 8000f2c:	40020000 	.word	0x40020000
 8000f30:	40020400 	.word	0x40020400

08000f34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b08a      	sub	sp, #40	@ 0x28
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3c:	f107 0314 	add.w	r3, r7, #20
 8000f40:	2200      	movs	r2, #0
 8000f42:	601a      	str	r2, [r3, #0]
 8000f44:	605a      	str	r2, [r3, #4]
 8000f46:	609a      	str	r2, [r3, #8]
 8000f48:	60da      	str	r2, [r3, #12]
 8000f4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4a1d      	ldr	r2, [pc, #116]	@ (8000fc8 <HAL_UART_MspInit+0x94>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d134      	bne.n	8000fc0 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	613b      	str	r3, [r7, #16]
 8000f5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000fcc <HAL_UART_MspInit+0x98>)
 8000f5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f5e:	4a1b      	ldr	r2, [pc, #108]	@ (8000fcc <HAL_UART_MspInit+0x98>)
 8000f60:	f043 0310 	orr.w	r3, r3, #16
 8000f64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f66:	4b19      	ldr	r3, [pc, #100]	@ (8000fcc <HAL_UART_MspInit+0x98>)
 8000f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f6a:	f003 0310 	and.w	r3, r3, #16
 8000f6e:	613b      	str	r3, [r7, #16]
 8000f70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <HAL_UART_MspInit+0x98>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a14      	ldr	r2, [pc, #80]	@ (8000fcc <HAL_UART_MspInit+0x98>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b12      	ldr	r3, [pc, #72]	@ (8000fcc <HAL_UART_MspInit+0x98>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0301 	and.w	r3, r3, #1
 8000f8a:	60fb      	str	r3, [r7, #12]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000f8e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000f92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f94:	2302      	movs	r3, #2
 8000f96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fa0:	2307      	movs	r3, #7
 8000fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa4:	f107 0314 	add.w	r3, r7, #20
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4809      	ldr	r0, [pc, #36]	@ (8000fd0 <HAL_UART_MspInit+0x9c>)
 8000fac:	f000 fad4 	bl	8001558 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 6, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2106      	movs	r1, #6
 8000fb4:	2025      	movs	r0, #37	@ 0x25
 8000fb6:	f000 fa13 	bl	80013e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fba:	2025      	movs	r0, #37	@ 0x25
 8000fbc:	f000 fa2c 	bl	8001418 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	@ 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40011000 	.word	0x40011000
 8000fcc:	40023800 	.word	0x40023800
 8000fd0:	40020000 	.word	0x40020000

08000fd4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b08e      	sub	sp, #56	@ 0x38
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	60fb      	str	r3, [r7, #12]
 8000fe8:	4b33      	ldr	r3, [pc, #204]	@ (80010b8 <HAL_InitTick+0xe4>)
 8000fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fec:	4a32      	ldr	r2, [pc, #200]	@ (80010b8 <HAL_InitTick+0xe4>)
 8000fee:	f043 0310 	orr.w	r3, r3, #16
 8000ff2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ff4:	4b30      	ldr	r3, [pc, #192]	@ (80010b8 <HAL_InitTick+0xe4>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff8:	f003 0310 	and.w	r3, r3, #16
 8000ffc:	60fb      	str	r3, [r7, #12]
 8000ffe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001000:	f107 0210 	add.w	r2, r7, #16
 8001004:	f107 0314 	add.w	r3, r7, #20
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f001 f8cc 	bl	80021a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001010:	6a3b      	ldr	r3, [r7, #32]
 8001012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001016:	2b00      	cmp	r3, #0
 8001018:	d103      	bne.n	8001022 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800101a:	f001 f89d 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 800101e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001020:	e004      	b.n	800102c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001022:	f001 f899 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8001026:	4603      	mov	r3, r0
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800102c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800102e:	4a23      	ldr	r2, [pc, #140]	@ (80010bc <HAL_InitTick+0xe8>)
 8001030:	fba2 2303 	umull	r2, r3, r2, r3
 8001034:	0c9b      	lsrs	r3, r3, #18
 8001036:	3b01      	subs	r3, #1
 8001038:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800103a:	4b21      	ldr	r3, [pc, #132]	@ (80010c0 <HAL_InitTick+0xec>)
 800103c:	4a21      	ldr	r2, [pc, #132]	@ (80010c4 <HAL_InitTick+0xf0>)
 800103e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <HAL_InitTick+0xec>)
 8001042:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001046:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001048:	4a1d      	ldr	r2, [pc, #116]	@ (80010c0 <HAL_InitTick+0xec>)
 800104a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800104c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800104e:	4b1c      	ldr	r3, [pc, #112]	@ (80010c0 <HAL_InitTick+0xec>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001054:	4b1a      	ldr	r3, [pc, #104]	@ (80010c0 <HAL_InitTick+0xec>)
 8001056:	2200      	movs	r2, #0
 8001058:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800105a:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <HAL_InitTick+0xec>)
 800105c:	2200      	movs	r2, #0
 800105e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001060:	4817      	ldr	r0, [pc, #92]	@ (80010c0 <HAL_InitTick+0xec>)
 8001062:	f001 fb7d 	bl	8002760 <HAL_TIM_Base_Init>
 8001066:	4603      	mov	r3, r0
 8001068:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 800106c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001070:	2b00      	cmp	r3, #0
 8001072:	d11b      	bne.n	80010ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001074:	4812      	ldr	r0, [pc, #72]	@ (80010c0 <HAL_InitTick+0xec>)
 8001076:	f001 fbcd 	bl	8002814 <HAL_TIM_Base_Start_IT>
 800107a:	4603      	mov	r3, r0
 800107c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001080:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001084:	2b00      	cmp	r3, #0
 8001086:	d111      	bne.n	80010ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001088:	2036      	movs	r0, #54	@ 0x36
 800108a:	f000 f9c5 	bl	8001418 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2b0f      	cmp	r3, #15
 8001092:	d808      	bhi.n	80010a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001094:	2200      	movs	r2, #0
 8001096:	6879      	ldr	r1, [r7, #4]
 8001098:	2036      	movs	r0, #54	@ 0x36
 800109a:	f000 f9a1 	bl	80013e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800109e:	4a0a      	ldr	r2, [pc, #40]	@ (80010c8 <HAL_InitTick+0xf4>)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6013      	str	r3, [r2, #0]
 80010a4:	e002      	b.n	80010ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80010a6:	2301      	movs	r3, #1
 80010a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80010ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	3738      	adds	r7, #56	@ 0x38
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	431bde83 	.word	0x431bde83
 80010c0:	20000110 	.word	0x20000110
 80010c4:	40001000 	.word	0x40001000
 80010c8:	2000000c 	.word	0x2000000c

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <NMI_Handler+0x4>

080010d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
	...

08001104 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001108:	4802      	ldr	r0, [pc, #8]	@ (8001114 <USART1_IRQHandler+0x10>)
 800110a:	f001 fe79 	bl	8002e00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800110e:	bf00      	nop
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	20000090 	.word	0x20000090

08001118 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800111c:	4802      	ldr	r0, [pc, #8]	@ (8001128 <TIM6_DAC_IRQHandler+0x10>)
 800111e:	f001 fbe9 	bl	80028f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000110 	.word	0x20000110

0800112c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001130:	4b06      	ldr	r3, [pc, #24]	@ (800114c <SystemInit+0x20>)
 8001132:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001136:	4a05      	ldr	r2, [pc, #20]	@ (800114c <SystemInit+0x20>)
 8001138:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800113c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001140:	bf00      	nop
 8001142:	46bd      	mov	sp, r7
 8001144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001148:	4770      	bx	lr
 800114a:	bf00      	nop
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001150:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001188 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001154:	f7ff ffea 	bl	800112c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001158:	480c      	ldr	r0, [pc, #48]	@ (800118c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115a:	490d      	ldr	r1, [pc, #52]	@ (8001190 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800115c:	4a0d      	ldr	r2, [pc, #52]	@ (8001194 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800115e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001160:	e002      	b.n	8001168 <LoopCopyDataInit>

08001162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001166:	3304      	adds	r3, #4

08001168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800116c:	d3f9      	bcc.n	8001162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800116e:	4a0a      	ldr	r2, [pc, #40]	@ (8001198 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001170:	4c0a      	ldr	r4, [pc, #40]	@ (800119c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001174:	e001      	b.n	800117a <LoopFillZerobss>

08001176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001178:	3204      	adds	r2, #4

0800117a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800117c:	d3fb      	bcc.n	8001176 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800117e:	f005 fa79 	bl	8006674 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001182:	f7ff f9f5 	bl	8000570 <main>
  bx  lr    
 8001186:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001188:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800118c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001190:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8001194:	08006ef4 	.word	0x08006ef4
  ldr r2, =_sbss
 8001198:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 800119c:	20012f04 	.word	0x20012f04

080011a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a0:	e7fe      	b.n	80011a0 <ADC_IRQHandler>
	...

080011a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011a8:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <HAL_Init+0x40>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	4a0d      	ldr	r2, [pc, #52]	@ (80011e4 <HAL_Init+0x40>)
 80011ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011b4:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <HAL_Init+0x40>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a0a      	ldr	r2, [pc, #40]	@ (80011e4 <HAL_Init+0x40>)
 80011ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80011be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011c0:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <HAL_Init+0x40>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a07      	ldr	r2, [pc, #28]	@ (80011e4 <HAL_Init+0x40>)
 80011c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80011ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011cc:	2003      	movs	r0, #3
 80011ce:	f000 f8fc 	bl	80013ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d2:	200f      	movs	r0, #15
 80011d4:	f7ff fefe 	bl	8000fd4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011d8:	f7ff fe1c 	bl	8000e14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40023c00 	.word	0x40023c00

080011e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011ec:	4b06      	ldr	r3, [pc, #24]	@ (8001208 <HAL_IncTick+0x20>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b06      	ldr	r3, [pc, #24]	@ (800120c <HAL_IncTick+0x24>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	4413      	add	r3, r2
 80011f8:	4a04      	ldr	r2, [pc, #16]	@ (800120c <HAL_IncTick+0x24>)
 80011fa:	6013      	str	r3, [r2, #0]
}
 80011fc:	bf00      	nop
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	20000010 	.word	0x20000010
 800120c:	20000158 	.word	0x20000158

08001210 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  return uwTick;
 8001214:	4b03      	ldr	r3, [pc, #12]	@ (8001224 <HAL_GetTick+0x14>)
 8001216:	681b      	ldr	r3, [r3, #0]
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000158 	.word	0x20000158

08001228 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b084      	sub	sp, #16
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001230:	f7ff ffee 	bl	8001210 <HAL_GetTick>
 8001234:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800123a:	68fb      	ldr	r3, [r7, #12]
 800123c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001240:	d005      	beq.n	800124e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001242:	4b0a      	ldr	r3, [pc, #40]	@ (800126c <HAL_Delay+0x44>)
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	461a      	mov	r2, r3
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	4413      	add	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800124e:	bf00      	nop
 8001250:	f7ff ffde 	bl	8001210 <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	68bb      	ldr	r3, [r7, #8]
 8001258:	1ad3      	subs	r3, r2, r3
 800125a:	68fa      	ldr	r2, [r7, #12]
 800125c:	429a      	cmp	r2, r3
 800125e:	d8f7      	bhi.n	8001250 <HAL_Delay+0x28>
  {
  }
}
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	3710      	adds	r7, #16
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000010 	.word	0x20000010

08001270 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001270:	b480      	push	{r7}
 8001272:	b085      	sub	sp, #20
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f003 0307 	and.w	r3, r3, #7
 800127e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001280:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001282:	68db      	ldr	r3, [r3, #12]
 8001284:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001286:	68ba      	ldr	r2, [r7, #8]
 8001288:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800128c:	4013      	ands	r3, r2
 800128e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001298:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800129c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012a2:	4a04      	ldr	r2, [pc, #16]	@ (80012b4 <__NVIC_SetPriorityGrouping+0x44>)
 80012a4:	68bb      	ldr	r3, [r7, #8]
 80012a6:	60d3      	str	r3, [r2, #12]
}
 80012a8:	bf00      	nop
 80012aa:	3714      	adds	r7, #20
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr
 80012b4:	e000ed00 	.word	0xe000ed00

080012b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012bc:	4b04      	ldr	r3, [pc, #16]	@ (80012d0 <__NVIC_GetPriorityGrouping+0x18>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	0a1b      	lsrs	r3, r3, #8
 80012c2:	f003 0307 	and.w	r3, r3, #7
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b083      	sub	sp, #12
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	db0b      	blt.n	80012fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e6:	79fb      	ldrb	r3, [r7, #7]
 80012e8:	f003 021f 	and.w	r2, r3, #31
 80012ec:	4907      	ldr	r1, [pc, #28]	@ (800130c <__NVIC_EnableIRQ+0x38>)
 80012ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f2:	095b      	lsrs	r3, r3, #5
 80012f4:	2001      	movs	r0, #1
 80012f6:	fa00 f202 	lsl.w	r2, r0, r2
 80012fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	e000e100 	.word	0xe000e100

08001310 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	2b00      	cmp	r3, #0
 8001322:	db0a      	blt.n	800133a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	b2da      	uxtb	r2, r3
 8001328:	490c      	ldr	r1, [pc, #48]	@ (800135c <__NVIC_SetPriority+0x4c>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	0112      	lsls	r2, r2, #4
 8001330:	b2d2      	uxtb	r2, r2
 8001332:	440b      	add	r3, r1
 8001334:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001338:	e00a      	b.n	8001350 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	b2da      	uxtb	r2, r3
 800133e:	4908      	ldr	r1, [pc, #32]	@ (8001360 <__NVIC_SetPriority+0x50>)
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f003 030f 	and.w	r3, r3, #15
 8001346:	3b04      	subs	r3, #4
 8001348:	0112      	lsls	r2, r2, #4
 800134a:	b2d2      	uxtb	r2, r2
 800134c:	440b      	add	r3, r1
 800134e:	761a      	strb	r2, [r3, #24]
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000e100 	.word	0xe000e100
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001364:	b480      	push	{r7}
 8001366:	b089      	sub	sp, #36	@ 0x24
 8001368:	af00      	add	r7, sp, #0
 800136a:	60f8      	str	r0, [r7, #12]
 800136c:	60b9      	str	r1, [r7, #8]
 800136e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	f003 0307 	and.w	r3, r3, #7
 8001376:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	f1c3 0307 	rsb	r3, r3, #7
 800137e:	2b04      	cmp	r3, #4
 8001380:	bf28      	it	cs
 8001382:	2304      	movcs	r3, #4
 8001384:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	3304      	adds	r3, #4
 800138a:	2b06      	cmp	r3, #6
 800138c:	d902      	bls.n	8001394 <NVIC_EncodePriority+0x30>
 800138e:	69fb      	ldr	r3, [r7, #28]
 8001390:	3b03      	subs	r3, #3
 8001392:	e000      	b.n	8001396 <NVIC_EncodePriority+0x32>
 8001394:	2300      	movs	r3, #0
 8001396:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001398:	f04f 32ff 	mov.w	r2, #4294967295
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43da      	mvns	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	401a      	ands	r2, r3
 80013a8:	697b      	ldr	r3, [r7, #20]
 80013aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013ac:	f04f 31ff 	mov.w	r1, #4294967295
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	fa01 f303 	lsl.w	r3, r1, r3
 80013b6:	43d9      	mvns	r1, r3
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013bc:	4313      	orrs	r3, r2
         );
}
 80013be:	4618      	mov	r0, r3
 80013c0:	3724      	adds	r7, #36	@ 0x24
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff ff4c 	bl	8001270 <__NVIC_SetPriorityGrouping>
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b086      	sub	sp, #24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	4603      	mov	r3, r0
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
 80013ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f2:	f7ff ff61 	bl	80012b8 <__NVIC_GetPriorityGrouping>
 80013f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	68b9      	ldr	r1, [r7, #8]
 80013fc:	6978      	ldr	r0, [r7, #20]
 80013fe:	f7ff ffb1 	bl	8001364 <NVIC_EncodePriority>
 8001402:	4602      	mov	r2, r0
 8001404:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001408:	4611      	mov	r1, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff80 	bl	8001310 <__NVIC_SetPriority>
}
 8001410:	bf00      	nop
 8001412:	3718      	adds	r7, #24
 8001414:	46bd      	mov	sp, r7
 8001416:	bd80      	pop	{r7, pc}

08001418 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b082      	sub	sp, #8
 800141c:	af00      	add	r7, sp, #0
 800141e:	4603      	mov	r3, r0
 8001420:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001426:	4618      	mov	r0, r3
 8001428:	f7ff ff54 	bl	80012d4 <__NVIC_EnableIRQ>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b084      	sub	sp, #16
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001440:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001442:	f7ff fee5 	bl	8001210 <HAL_GetTick>
 8001446:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800144e:	b2db      	uxtb	r3, r3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d008      	beq.n	8001466 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2280      	movs	r2, #128	@ 0x80
 8001458:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001462:	2301      	movs	r3, #1
 8001464:	e052      	b.n	800150c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 0216 	bic.w	r2, r2, #22
 8001474:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	695a      	ldr	r2, [r3, #20]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001484:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800148a:	2b00      	cmp	r3, #0
 800148c:	d103      	bne.n	8001496 <HAL_DMA_Abort+0x62>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001492:	2b00      	cmp	r3, #0
 8001494:	d007      	beq.n	80014a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f022 0208 	bic.w	r2, r2, #8
 80014a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f022 0201 	bic.w	r2, r2, #1
 80014b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014b6:	e013      	b.n	80014e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80014b8:	f7ff feaa 	bl	8001210 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b05      	cmp	r3, #5
 80014c4:	d90c      	bls.n	80014e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2220      	movs	r2, #32
 80014ca:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2203      	movs	r2, #3
 80014d0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	2200      	movs	r2, #0
 80014d8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014dc:	2303      	movs	r3, #3
 80014de:	e015      	b.n	800150c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f003 0301 	and.w	r3, r3, #1
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d1e4      	bne.n	80014b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f2:	223f      	movs	r2, #63	@ 0x3f
 80014f4:	409a      	lsls	r2, r3
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800150a:	2300      	movs	r3, #0
}
 800150c:	4618      	mov	r0, r3
 800150e:	3710      	adds	r7, #16
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001522:	b2db      	uxtb	r3, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d004      	beq.n	8001532 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2280      	movs	r2, #128	@ 0x80
 800152c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e00c      	b.n	800154c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2205      	movs	r2, #5
 8001536:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	681a      	ldr	r2, [r3, #0]
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f022 0201 	bic.w	r2, r2, #1
 8001548:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800154a:	2300      	movs	r3, #0
}
 800154c:	4618      	mov	r0, r3
 800154e:	370c      	adds	r7, #12
 8001550:	46bd      	mov	sp, r7
 8001552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001556:	4770      	bx	lr

08001558 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001558:	b480      	push	{r7}
 800155a:	b089      	sub	sp, #36	@ 0x24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001562:	2300      	movs	r3, #0
 8001564:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001566:	2300      	movs	r3, #0
 8001568:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800156a:	2300      	movs	r3, #0
 800156c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
 8001572:	e16b      	b.n	800184c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001574:	2201      	movs	r2, #1
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	fa02 f303 	lsl.w	r3, r2, r3
 800157c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	697a      	ldr	r2, [r7, #20]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	429a      	cmp	r2, r3
 800158e:	f040 815a 	bne.w	8001846 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	685b      	ldr	r3, [r3, #4]
 8001596:	f003 0303 	and.w	r3, r3, #3
 800159a:	2b01      	cmp	r3, #1
 800159c:	d005      	beq.n	80015aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d130      	bne.n	800160c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	689b      	ldr	r3, [r3, #8]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80015b0:	69fb      	ldr	r3, [r7, #28]
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	2203      	movs	r2, #3
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	43db      	mvns	r3, r3
 80015bc:	69ba      	ldr	r2, [r7, #24]
 80015be:	4013      	ands	r3, r2
 80015c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	68da      	ldr	r2, [r3, #12]
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	005b      	lsls	r3, r3, #1
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	69ba      	ldr	r2, [r7, #24]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	69ba      	ldr	r2, [r7, #24]
 80015d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015e0:	2201      	movs	r2, #1
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	fa02 f303 	lsl.w	r3, r2, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4013      	ands	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	091b      	lsrs	r3, r3, #4
 80015f6:	f003 0201 	and.w	r2, r3, #1
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001600:	69ba      	ldr	r2, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	2b03      	cmp	r3, #3
 8001616:	d017      	beq.n	8001648 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	68db      	ldr	r3, [r3, #12]
 800161c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	2203      	movs	r2, #3
 8001624:	fa02 f303 	lsl.w	r3, r2, r3
 8001628:	43db      	mvns	r3, r3
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	4013      	ands	r3, r2
 800162e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	69fb      	ldr	r3, [r7, #28]
 8001636:	005b      	lsls	r3, r3, #1
 8001638:	fa02 f303 	lsl.w	r3, r2, r3
 800163c:	69ba      	ldr	r2, [r7, #24]
 800163e:	4313      	orrs	r3, r2
 8001640:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	69ba      	ldr	r2, [r7, #24]
 8001646:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d123      	bne.n	800169c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	08da      	lsrs	r2, r3, #3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3208      	adds	r2, #8
 800165c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001660:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001662:	69fb      	ldr	r3, [r7, #28]
 8001664:	f003 0307 	and.w	r3, r3, #7
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	220f      	movs	r2, #15
 800166c:	fa02 f303 	lsl.w	r3, r2, r3
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	691a      	ldr	r2, [r3, #16]
 800167c:	69fb      	ldr	r3, [r7, #28]
 800167e:	f003 0307 	and.w	r3, r3, #7
 8001682:	009b      	lsls	r3, r3, #2
 8001684:	fa02 f303 	lsl.w	r3, r2, r3
 8001688:	69ba      	ldr	r2, [r7, #24]
 800168a:	4313      	orrs	r3, r2
 800168c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	08da      	lsrs	r2, r3, #3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	3208      	adds	r2, #8
 8001696:	69b9      	ldr	r1, [r7, #24]
 8001698:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016a2:	69fb      	ldr	r3, [r7, #28]
 80016a4:	005b      	lsls	r3, r3, #1
 80016a6:	2203      	movs	r2, #3
 80016a8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ac:	43db      	mvns	r3, r3
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	4013      	ands	r3, r2
 80016b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685b      	ldr	r3, [r3, #4]
 80016b8:	f003 0203 	and.w	r2, r3, #3
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	005b      	lsls	r3, r3, #1
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	69ba      	ldr	r2, [r7, #24]
 80016c6:	4313      	orrs	r3, r2
 80016c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	685b      	ldr	r3, [r3, #4]
 80016d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016d8:	2b00      	cmp	r3, #0
 80016da:	f000 80b4 	beq.w	8001846 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	60fb      	str	r3, [r7, #12]
 80016e2:	4b60      	ldr	r3, [pc, #384]	@ (8001864 <HAL_GPIO_Init+0x30c>)
 80016e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016e6:	4a5f      	ldr	r2, [pc, #380]	@ (8001864 <HAL_GPIO_Init+0x30c>)
 80016e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ee:	4b5d      	ldr	r3, [pc, #372]	@ (8001864 <HAL_GPIO_Init+0x30c>)
 80016f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f6:	60fb      	str	r3, [r7, #12]
 80016f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016fa:	4a5b      	ldr	r2, [pc, #364]	@ (8001868 <HAL_GPIO_Init+0x310>)
 80016fc:	69fb      	ldr	r3, [r7, #28]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	3302      	adds	r3, #2
 8001702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	f003 0303 	and.w	r3, r3, #3
 800170e:	009b      	lsls	r3, r3, #2
 8001710:	220f      	movs	r2, #15
 8001712:	fa02 f303 	lsl.w	r3, r2, r3
 8001716:	43db      	mvns	r3, r3
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	4013      	ands	r3, r2
 800171c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	4a52      	ldr	r2, [pc, #328]	@ (800186c <HAL_GPIO_Init+0x314>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d02b      	beq.n	800177e <HAL_GPIO_Init+0x226>
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4a51      	ldr	r2, [pc, #324]	@ (8001870 <HAL_GPIO_Init+0x318>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d025      	beq.n	800177a <HAL_GPIO_Init+0x222>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	4a50      	ldr	r2, [pc, #320]	@ (8001874 <HAL_GPIO_Init+0x31c>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d01f      	beq.n	8001776 <HAL_GPIO_Init+0x21e>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	4a4f      	ldr	r2, [pc, #316]	@ (8001878 <HAL_GPIO_Init+0x320>)
 800173a:	4293      	cmp	r3, r2
 800173c:	d019      	beq.n	8001772 <HAL_GPIO_Init+0x21a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a4e      	ldr	r2, [pc, #312]	@ (800187c <HAL_GPIO_Init+0x324>)
 8001742:	4293      	cmp	r3, r2
 8001744:	d013      	beq.n	800176e <HAL_GPIO_Init+0x216>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	4a4d      	ldr	r2, [pc, #308]	@ (8001880 <HAL_GPIO_Init+0x328>)
 800174a:	4293      	cmp	r3, r2
 800174c:	d00d      	beq.n	800176a <HAL_GPIO_Init+0x212>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	4a4c      	ldr	r2, [pc, #304]	@ (8001884 <HAL_GPIO_Init+0x32c>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d007      	beq.n	8001766 <HAL_GPIO_Init+0x20e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4a4b      	ldr	r2, [pc, #300]	@ (8001888 <HAL_GPIO_Init+0x330>)
 800175a:	4293      	cmp	r3, r2
 800175c:	d101      	bne.n	8001762 <HAL_GPIO_Init+0x20a>
 800175e:	2307      	movs	r3, #7
 8001760:	e00e      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001762:	2308      	movs	r3, #8
 8001764:	e00c      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001766:	2306      	movs	r3, #6
 8001768:	e00a      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800176a:	2305      	movs	r3, #5
 800176c:	e008      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800176e:	2304      	movs	r3, #4
 8001770:	e006      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001772:	2303      	movs	r3, #3
 8001774:	e004      	b.n	8001780 <HAL_GPIO_Init+0x228>
 8001776:	2302      	movs	r3, #2
 8001778:	e002      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800177a:	2301      	movs	r3, #1
 800177c:	e000      	b.n	8001780 <HAL_GPIO_Init+0x228>
 800177e:	2300      	movs	r3, #0
 8001780:	69fa      	ldr	r2, [r7, #28]
 8001782:	f002 0203 	and.w	r2, r2, #3
 8001786:	0092      	lsls	r2, r2, #2
 8001788:	4093      	lsls	r3, r2
 800178a:	69ba      	ldr	r2, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001790:	4935      	ldr	r1, [pc, #212]	@ (8001868 <HAL_GPIO_Init+0x310>)
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	089b      	lsrs	r3, r3, #2
 8001796:	3302      	adds	r3, #2
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800179e:	4b3b      	ldr	r3, [pc, #236]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017c2:	4a32      	ldr	r2, [pc, #200]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017c8:	4b30      	ldr	r3, [pc, #192]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017ec:	4a27      	ldr	r2, [pc, #156]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80017f2:	4b26      	ldr	r3, [pc, #152]	@ (800188c <HAL_GPIO_Init+0x334>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	43db      	mvns	r3, r3
 80017fc:	69ba      	ldr	r2, [r7, #24]
 80017fe:	4013      	ands	r3, r2
 8001800:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800180a:	2b00      	cmp	r3, #0
 800180c:	d003      	beq.n	8001816 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800180e:	69ba      	ldr	r2, [r7, #24]
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4313      	orrs	r3, r2
 8001814:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001816:	4a1d      	ldr	r2, [pc, #116]	@ (800188c <HAL_GPIO_Init+0x334>)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800181c:	4b1b      	ldr	r3, [pc, #108]	@ (800188c <HAL_GPIO_Init+0x334>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001822:	693b      	ldr	r3, [r7, #16]
 8001824:	43db      	mvns	r3, r3
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	4013      	ands	r3, r2
 800182a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	4313      	orrs	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001840:	4a12      	ldr	r2, [pc, #72]	@ (800188c <HAL_GPIO_Init+0x334>)
 8001842:	69bb      	ldr	r3, [r7, #24]
 8001844:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3301      	adds	r3, #1
 800184a:	61fb      	str	r3, [r7, #28]
 800184c:	69fb      	ldr	r3, [r7, #28]
 800184e:	2b0f      	cmp	r3, #15
 8001850:	f67f ae90 	bls.w	8001574 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001854:	bf00      	nop
 8001856:	bf00      	nop
 8001858:	3724      	adds	r7, #36	@ 0x24
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	40023800 	.word	0x40023800
 8001868:	40013800 	.word	0x40013800
 800186c:	40020000 	.word	0x40020000
 8001870:	40020400 	.word	0x40020400
 8001874:	40020800 	.word	0x40020800
 8001878:	40020c00 	.word	0x40020c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40021400 	.word	0x40021400
 8001884:	40021800 	.word	0x40021800
 8001888:	40021c00 	.word	0x40021c00
 800188c:	40013c00 	.word	0x40013c00

08001890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	460b      	mov	r3, r1
 800189a:	807b      	strh	r3, [r7, #2]
 800189c:	4613      	mov	r3, r2
 800189e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80018a0:	787b      	ldrb	r3, [r7, #1]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d003      	beq.n	80018ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80018a6:	887a      	ldrh	r2, [r7, #2]
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80018ac:	e003      	b.n	80018b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80018ae:	887b      	ldrh	r3, [r7, #2]
 80018b0:	041a      	lsls	r2, r3, #16
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	619a      	str	r2, [r3, #24]
}
 80018b6:	bf00      	nop
 80018b8:	370c      	adds	r7, #12
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80018c2:	b480      	push	{r7}
 80018c4:	b085      	sub	sp, #20
 80018c6:	af00      	add	r7, sp, #0
 80018c8:	6078      	str	r0, [r7, #4]
 80018ca:	460b      	mov	r3, r1
 80018cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	695b      	ldr	r3, [r3, #20]
 80018d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80018d4:	887a      	ldrh	r2, [r7, #2]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4013      	ands	r3, r2
 80018da:	041a      	lsls	r2, r3, #16
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	43d9      	mvns	r1, r3
 80018e0:	887b      	ldrh	r3, [r7, #2]
 80018e2:	400b      	ands	r3, r1
 80018e4:	431a      	orrs	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	619a      	str	r2, [r3, #24]
}
 80018ea:	bf00      	nop
 80018ec:	3714      	adds	r7, #20
 80018ee:	46bd      	mov	sp, r7
 80018f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f4:	4770      	bx	lr
	...

080018f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b086      	sub	sp, #24
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d101      	bne.n	800190a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001906:	2301      	movs	r3, #1
 8001908:	e267      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d075      	beq.n	8001a02 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001916:	4b88      	ldr	r3, [pc, #544]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
 800191e:	2b04      	cmp	r3, #4
 8001920:	d00c      	beq.n	800193c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001922:	4b85      	ldr	r3, [pc, #532]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001924:	689b      	ldr	r3, [r3, #8]
 8001926:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800192a:	2b08      	cmp	r3, #8
 800192c:	d112      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800192e:	4b82      	ldr	r3, [pc, #520]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001936:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800193a:	d10b      	bne.n	8001954 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800193c:	4b7e      	ldr	r3, [pc, #504]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001944:	2b00      	cmp	r3, #0
 8001946:	d05b      	beq.n	8001a00 <HAL_RCC_OscConfig+0x108>
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	2b00      	cmp	r3, #0
 800194e:	d157      	bne.n	8001a00 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e242      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800195c:	d106      	bne.n	800196c <HAL_RCC_OscConfig+0x74>
 800195e:	4b76      	ldr	r3, [pc, #472]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a75      	ldr	r2, [pc, #468]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001964:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001968:	6013      	str	r3, [r2, #0]
 800196a:	e01d      	b.n	80019a8 <HAL_RCC_OscConfig+0xb0>
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001974:	d10c      	bne.n	8001990 <HAL_RCC_OscConfig+0x98>
 8001976:	4b70      	ldr	r3, [pc, #448]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a6f      	ldr	r2, [pc, #444]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 800197c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	4b6d      	ldr	r3, [pc, #436]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a6c      	ldr	r2, [pc, #432]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001988:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800198c:	6013      	str	r3, [r2, #0]
 800198e:	e00b      	b.n	80019a8 <HAL_RCC_OscConfig+0xb0>
 8001990:	4b69      	ldr	r3, [pc, #420]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a68      	ldr	r2, [pc, #416]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001996:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800199a:	6013      	str	r3, [r2, #0]
 800199c:	4b66      	ldr	r3, [pc, #408]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a65      	ldr	r2, [pc, #404]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d013      	beq.n	80019d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b0:	f7ff fc2e 	bl	8001210 <HAL_GetTick>
 80019b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019b6:	e008      	b.n	80019ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019b8:	f7ff fc2a 	bl	8001210 <HAL_GetTick>
 80019bc:	4602      	mov	r2, r0
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	1ad3      	subs	r3, r2, r3
 80019c2:	2b64      	cmp	r3, #100	@ 0x64
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e207      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ca:	4b5b      	ldr	r3, [pc, #364]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0f0      	beq.n	80019b8 <HAL_RCC_OscConfig+0xc0>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d8:	f7ff fc1a 	bl	8001210 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019de:	e008      	b.n	80019f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019e0:	f7ff fc16 	bl	8001210 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	2b64      	cmp	r3, #100	@ 0x64
 80019ec:	d901      	bls.n	80019f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ee:	2303      	movs	r3, #3
 80019f0:	e1f3      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019f2:	4b51      	ldr	r3, [pc, #324]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d1f0      	bne.n	80019e0 <HAL_RCC_OscConfig+0xe8>
 80019fe:	e000      	b.n	8001a02 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a00:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0302 	and.w	r3, r3, #2
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d063      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a0e:	4b4a      	ldr	r3, [pc, #296]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00b      	beq.n	8001a32 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a1a:	4b47      	ldr	r3, [pc, #284]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001a22:	2b08      	cmp	r3, #8
 8001a24:	d11c      	bne.n	8001a60 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001a26:	4b44      	ldr	r3, [pc, #272]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d116      	bne.n	8001a60 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a32:	4b41      	ldr	r3, [pc, #260]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0302 	and.w	r3, r3, #2
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d005      	beq.n	8001a4a <HAL_RCC_OscConfig+0x152>
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	68db      	ldr	r3, [r3, #12]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d001      	beq.n	8001a4a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a46:	2301      	movs	r3, #1
 8001a48:	e1c7      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4a:	4b3b      	ldr	r3, [pc, #236]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	691b      	ldr	r3, [r3, #16]
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	4937      	ldr	r1, [pc, #220]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a5e:	e03a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d020      	beq.n	8001aaa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a68:	4b34      	ldr	r3, [pc, #208]	@ (8001b3c <HAL_RCC_OscConfig+0x244>)
 8001a6a:	2201      	movs	r2, #1
 8001a6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6e:	f7ff fbcf 	bl	8001210 <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a74:	e008      	b.n	8001a88 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a76:	f7ff fbcb 	bl	8001210 <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e1a8      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a88:	4b2b      	ldr	r3, [pc, #172]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 0302 	and.w	r3, r3, #2
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d0f0      	beq.n	8001a76 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a94:	4b28      	ldr	r3, [pc, #160]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691b      	ldr	r3, [r3, #16]
 8001aa0:	00db      	lsls	r3, r3, #3
 8001aa2:	4925      	ldr	r1, [pc, #148]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	600b      	str	r3, [r1, #0]
 8001aa8:	e015      	b.n	8001ad6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001aaa:	4b24      	ldr	r3, [pc, #144]	@ (8001b3c <HAL_RCC_OscConfig+0x244>)
 8001aac:	2200      	movs	r2, #0
 8001aae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ab0:	f7ff fbae 	bl	8001210 <HAL_GetTick>
 8001ab4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ab6:	e008      	b.n	8001aca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ab8:	f7ff fbaa 	bl	8001210 <HAL_GetTick>
 8001abc:	4602      	mov	r2, r0
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	1ad3      	subs	r3, r2, r3
 8001ac2:	2b02      	cmp	r3, #2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e187      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001aca:	4b1b      	ldr	r3, [pc, #108]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0302 	and.w	r3, r3, #2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1f0      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0308 	and.w	r3, r3, #8
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d036      	beq.n	8001b50 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	695b      	ldr	r3, [r3, #20]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d016      	beq.n	8001b18 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_RCC_OscConfig+0x248>)
 8001aec:	2201      	movs	r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff fb8e 	bl	8001210 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af8:	f7ff fb8a 	bl	8001210 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b02      	cmp	r3, #2
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e167      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001b0a:	4b0b      	ldr	r3, [pc, #44]	@ (8001b38 <HAL_RCC_OscConfig+0x240>)
 8001b0c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d0f0      	beq.n	8001af8 <HAL_RCC_OscConfig+0x200>
 8001b16:	e01b      	b.n	8001b50 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b18:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_RCC_OscConfig+0x248>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b1e:	f7ff fb77 	bl	8001210 <HAL_GetTick>
 8001b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b24:	e00e      	b.n	8001b44 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b26:	f7ff fb73 	bl	8001210 <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	2b02      	cmp	r3, #2
 8001b32:	d907      	bls.n	8001b44 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e150      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	42470000 	.word	0x42470000
 8001b40:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b44:	4b88      	ldr	r3, [pc, #544]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b48:	f003 0302 	and.w	r3, r3, #2
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d1ea      	bne.n	8001b26 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0304 	and.w	r3, r3, #4
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	f000 8097 	beq.w	8001c8c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b62:	4b81      	ldr	r3, [pc, #516]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d10f      	bne.n	8001b8e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60bb      	str	r3, [r7, #8]
 8001b72:	4b7d      	ldr	r3, [pc, #500]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a7c      	ldr	r2, [pc, #496]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b78:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b7a      	ldr	r3, [pc, #488]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8e:	4b77      	ldr	r3, [pc, #476]	@ (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d118      	bne.n	8001bcc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b9a:	4b74      	ldr	r3, [pc, #464]	@ (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	4a73      	ldr	r2, [pc, #460]	@ (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001ba0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ba4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001ba6:	f7ff fb33 	bl	8001210 <HAL_GetTick>
 8001baa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bac:	e008      	b.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bae:	f7ff fb2f 	bl	8001210 <HAL_GetTick>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	1ad3      	subs	r3, r2, r3
 8001bb8:	2b02      	cmp	r3, #2
 8001bba:	d901      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e10c      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001bc0:	4b6a      	ldr	r3, [pc, #424]	@ (8001d6c <HAL_RCC_OscConfig+0x474>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0f0      	beq.n	8001bae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d106      	bne.n	8001be2 <HAL_RCC_OscConfig+0x2ea>
 8001bd4:	4b64      	ldr	r3, [pc, #400]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a63      	ldr	r2, [pc, #396]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bda:	f043 0301 	orr.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be0:	e01c      	b.n	8001c1c <HAL_RCC_OscConfig+0x324>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	2b05      	cmp	r3, #5
 8001be8:	d10c      	bne.n	8001c04 <HAL_RCC_OscConfig+0x30c>
 8001bea:	4b5f      	ldr	r3, [pc, #380]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bee:	4a5e      	ldr	r2, [pc, #376]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bf6:	4b5c      	ldr	r3, [pc, #368]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c02:	e00b      	b.n	8001c1c <HAL_RCC_OscConfig+0x324>
 8001c04:	4b58      	ldr	r3, [pc, #352]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c08:	4a57      	ldr	r2, [pc, #348]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001c10:	4b55      	ldr	r3, [pc, #340]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c14:	4a54      	ldr	r2, [pc, #336]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c16:	f023 0304 	bic.w	r3, r3, #4
 8001c1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d015      	beq.n	8001c50 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c24:	f7ff faf4 	bl	8001210 <HAL_GetTick>
 8001c28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2a:	e00a      	b.n	8001c42 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c2c:	f7ff faf0 	bl	8001210 <HAL_GetTick>
 8001c30:	4602      	mov	r2, r0
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	1ad3      	subs	r3, r2, r3
 8001c36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c3a:	4293      	cmp	r3, r2
 8001c3c:	d901      	bls.n	8001c42 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c3e:	2303      	movs	r3, #3
 8001c40:	e0cb      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c42:	4b49      	ldr	r3, [pc, #292]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d0ee      	beq.n	8001c2c <HAL_RCC_OscConfig+0x334>
 8001c4e:	e014      	b.n	8001c7a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c50:	f7ff fade 	bl	8001210 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7ff fada 	bl	8001210 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e0b5      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c6e:	4b3e      	ldr	r3, [pc, #248]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c72:	f003 0302 	and.w	r3, r3, #2
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1ee      	bne.n	8001c58 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c7a:	7dfb      	ldrb	r3, [r7, #23]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d105      	bne.n	8001c8c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c80:	4b39      	ldr	r3, [pc, #228]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	4a38      	ldr	r2, [pc, #224]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c86:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c8a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	f000 80a1 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c96:	4b34      	ldr	r3, [pc, #208]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f003 030c 	and.w	r3, r3, #12
 8001c9e:	2b08      	cmp	r3, #8
 8001ca0:	d05c      	beq.n	8001d5c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d141      	bne.n	8001d2e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001caa:	4b31      	ldr	r3, [pc, #196]	@ (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb0:	f7ff faae 	bl	8001210 <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cb8:	f7ff faaa 	bl	8001210 <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e087      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cca:	4b27      	ldr	r3, [pc, #156]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d1f0      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69da      	ldr	r2, [r3, #28]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6a1b      	ldr	r3, [r3, #32]
 8001cde:	431a      	orrs	r2, r3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ce4:	019b      	lsls	r3, r3, #6
 8001ce6:	431a      	orrs	r2, r3
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cec:	085b      	lsrs	r3, r3, #1
 8001cee:	3b01      	subs	r3, #1
 8001cf0:	041b      	lsls	r3, r3, #16
 8001cf2:	431a      	orrs	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf8:	061b      	lsls	r3, r3, #24
 8001cfa:	491b      	ldr	r1, [pc, #108]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d00:	4b1b      	ldr	r3, [pc, #108]	@ (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001d02:	2201      	movs	r2, #1
 8001d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d06:	f7ff fa83 	bl	8001210 <HAL_GetTick>
 8001d0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0c:	e008      	b.n	8001d20 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0e:	f7ff fa7f 	bl	8001210 <HAL_GetTick>
 8001d12:	4602      	mov	r2, r0
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	1ad3      	subs	r3, r2, r3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d901      	bls.n	8001d20 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d1c:	2303      	movs	r3, #3
 8001d1e:	e05c      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f0      	beq.n	8001d0e <HAL_RCC_OscConfig+0x416>
 8001d2c:	e054      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2e:	4b10      	ldr	r3, [pc, #64]	@ (8001d70 <HAL_RCC_OscConfig+0x478>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d34:	f7ff fa6c 	bl	8001210 <HAL_GetTick>
 8001d38:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d3c:	f7ff fa68 	bl	8001210 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e045      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d4e:	4b06      	ldr	r3, [pc, #24]	@ (8001d68 <HAL_RCC_OscConfig+0x470>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d1f0      	bne.n	8001d3c <HAL_RCC_OscConfig+0x444>
 8001d5a:	e03d      	b.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	699b      	ldr	r3, [r3, #24]
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d107      	bne.n	8001d74 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e038      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_RCC_OscConfig+0x4ec>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d028      	beq.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d121      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d11a      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001da4:	4013      	ands	r3, r2
 8001da6:	687a      	ldr	r2, [r7, #4]
 8001da8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001daa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001dac:	4293      	cmp	r3, r2
 8001dae:	d111      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001dba:	085b      	lsrs	r3, r3, #1
 8001dbc:	3b01      	subs	r3, #1
 8001dbe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001dce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	d001      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e000      	b.n	8001dda <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3718      	adds	r7, #24
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800

08001de8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b084      	sub	sp, #16
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e0cc      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b68      	ldr	r3, [pc, #416]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0307 	and.w	r3, r3, #7
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d90c      	bls.n	8001e24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b65      	ldr	r3, [pc, #404]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	b2d2      	uxtb	r2, r2
 8001e10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e12:	4b63      	ldr	r3, [pc, #396]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	683a      	ldr	r2, [r7, #0]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d001      	beq.n	8001e24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0b8      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d020      	beq.n	8001e72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f003 0304 	and.w	r3, r3, #4
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d005      	beq.n	8001e48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e3c:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0308 	and.w	r3, r3, #8
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d005      	beq.n	8001e60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e54:	4b53      	ldr	r3, [pc, #332]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	4a52      	ldr	r2, [pc, #328]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e60:	4b50      	ldr	r3, [pc, #320]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	494d      	ldr	r1, [pc, #308]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d044      	beq.n	8001f08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	2b01      	cmp	r3, #1
 8001e84:	d107      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e86:	4b47      	ldr	r3, [pc, #284]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d119      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e07f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	2b02      	cmp	r3, #2
 8001e9c:	d003      	beq.n	8001ea6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ea2:	2b03      	cmp	r3, #3
 8001ea4:	d107      	bne.n	8001eb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ea6:	4b3f      	ldr	r3, [pc, #252]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d109      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e06f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eb6:	4b3b      	ldr	r3, [pc, #236]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0302 	and.w	r3, r3, #2
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d101      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e067      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ec6:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f023 0203 	bic.w	r2, r3, #3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	4934      	ldr	r1, [pc, #208]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ed8:	f7ff f99a 	bl	8001210 <HAL_GetTick>
 8001edc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ede:	e00a      	b.n	8001ef6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee0:	f7ff f996 	bl	8001210 <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e04f      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef6:	4b2b      	ldr	r3, [pc, #172]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	f003 020c 	and.w	r2, r3, #12
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d1eb      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f08:	4b25      	ldr	r3, [pc, #148]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d20c      	bcs.n	8001f30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f16:	4b22      	ldr	r3, [pc, #136]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	b2d2      	uxtb	r2, r2
 8001f1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 0307 	and.w	r3, r3, #7
 8001f26:	683a      	ldr	r2, [r7, #0]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	d001      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f2c:	2301      	movs	r3, #1
 8001f2e:	e032      	b.n	8001f96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f3c:	4b19      	ldr	r3, [pc, #100]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	4916      	ldr	r1, [pc, #88]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d009      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f5a:	4b12      	ldr	r3, [pc, #72]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	691b      	ldr	r3, [r3, #16]
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	490e      	ldr	r1, [pc, #56]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f6e:	f000 f821 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f72:	4602      	mov	r2, r0
 8001f74:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f76:	689b      	ldr	r3, [r3, #8]
 8001f78:	091b      	lsrs	r3, r3, #4
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	490a      	ldr	r1, [pc, #40]	@ (8001fa8 <HAL_RCC_ClockConfig+0x1c0>)
 8001f80:	5ccb      	ldrb	r3, [r1, r3]
 8001f82:	fa22 f303 	lsr.w	r3, r2, r3
 8001f86:	4a09      	ldr	r2, [pc, #36]	@ (8001fac <HAL_RCC_ClockConfig+0x1c4>)
 8001f88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <HAL_RCC_ClockConfig+0x1c8>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff f820 	bl	8000fd4 <HAL_InitTick>

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3710      	adds	r7, #16
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	40023c00 	.word	0x40023c00
 8001fa4:	40023800 	.word	0x40023800
 8001fa8:	08006ecc 	.word	0x08006ecc
 8001fac:	20000008 	.word	0x20000008
 8001fb0:	2000000c 	.word	0x2000000c

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fb8:	b090      	sub	sp, #64	@ 0x40
 8001fba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fcc:	4b59      	ldr	r3, [pc, #356]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 030c 	and.w	r3, r3, #12
 8001fd4:	2b08      	cmp	r3, #8
 8001fd6:	d00d      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x40>
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	f200 80a1 	bhi.w	8002120 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d003      	beq.n	8001fee <HAL_RCC_GetSysClockFreq+0x3a>
 8001fe6:	e09b      	b.n	8002120 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fe8:	4b53      	ldr	r3, [pc, #332]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x184>)
 8001fea:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fec:	e09b      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fee:	4b53      	ldr	r3, [pc, #332]	@ (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 8001ff0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ff2:	e098      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ff4:	4b4f      	ldr	r3, [pc, #316]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ffc:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ffe:	4b4d      	ldr	r3, [pc, #308]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d028      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800200a:	4b4a      	ldr	r3, [pc, #296]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	099b      	lsrs	r3, r3, #6
 8002010:	2200      	movs	r2, #0
 8002012:	623b      	str	r3, [r7, #32]
 8002014:	627a      	str	r2, [r7, #36]	@ 0x24
 8002016:	6a3b      	ldr	r3, [r7, #32]
 8002018:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800201c:	2100      	movs	r1, #0
 800201e:	4b47      	ldr	r3, [pc, #284]	@ (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 8002020:	fb03 f201 	mul.w	r2, r3, r1
 8002024:	2300      	movs	r3, #0
 8002026:	fb00 f303 	mul.w	r3, r0, r3
 800202a:	4413      	add	r3, r2
 800202c:	4a43      	ldr	r2, [pc, #268]	@ (800213c <HAL_RCC_GetSysClockFreq+0x188>)
 800202e:	fba0 1202 	umull	r1, r2, r0, r2
 8002032:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002034:	460a      	mov	r2, r1
 8002036:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002038:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800203a:	4413      	add	r3, r2
 800203c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800203e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002040:	2200      	movs	r2, #0
 8002042:	61bb      	str	r3, [r7, #24]
 8002044:	61fa      	str	r2, [r7, #28]
 8002046:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800204e:	f7fe f8bf 	bl	80001d0 <__aeabi_uldivmod>
 8002052:	4602      	mov	r2, r0
 8002054:	460b      	mov	r3, r1
 8002056:	4613      	mov	r3, r2
 8002058:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800205a:	e053      	b.n	8002104 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800205c:	4b35      	ldr	r3, [pc, #212]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	099b      	lsrs	r3, r3, #6
 8002062:	2200      	movs	r2, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	617a      	str	r2, [r7, #20]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800206e:	f04f 0b00 	mov.w	fp, #0
 8002072:	4652      	mov	r2, sl
 8002074:	465b      	mov	r3, fp
 8002076:	f04f 0000 	mov.w	r0, #0
 800207a:	f04f 0100 	mov.w	r1, #0
 800207e:	0159      	lsls	r1, r3, #5
 8002080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002084:	0150      	lsls	r0, r2, #5
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	ebb2 080a 	subs.w	r8, r2, sl
 800208e:	eb63 090b 	sbc.w	r9, r3, fp
 8002092:	f04f 0200 	mov.w	r2, #0
 8002096:	f04f 0300 	mov.w	r3, #0
 800209a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800209e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020a2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020a6:	ebb2 0408 	subs.w	r4, r2, r8
 80020aa:	eb63 0509 	sbc.w	r5, r3, r9
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	00eb      	lsls	r3, r5, #3
 80020b8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020bc:	00e2      	lsls	r2, r4, #3
 80020be:	4614      	mov	r4, r2
 80020c0:	461d      	mov	r5, r3
 80020c2:	eb14 030a 	adds.w	r3, r4, sl
 80020c6:	603b      	str	r3, [r7, #0]
 80020c8:	eb45 030b 	adc.w	r3, r5, fp
 80020cc:	607b      	str	r3, [r7, #4]
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	f04f 0300 	mov.w	r3, #0
 80020d6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020da:	4629      	mov	r1, r5
 80020dc:	028b      	lsls	r3, r1, #10
 80020de:	4621      	mov	r1, r4
 80020e0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020e4:	4621      	mov	r1, r4
 80020e6:	028a      	lsls	r2, r1, #10
 80020e8:	4610      	mov	r0, r2
 80020ea:	4619      	mov	r1, r3
 80020ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80020ee:	2200      	movs	r2, #0
 80020f0:	60bb      	str	r3, [r7, #8]
 80020f2:	60fa      	str	r2, [r7, #12]
 80020f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80020f8:	f7fe f86a 	bl	80001d0 <__aeabi_uldivmod>
 80020fc:	4602      	mov	r2, r0
 80020fe:	460b      	mov	r3, r1
 8002100:	4613      	mov	r3, r2
 8002102:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002104:	4b0b      	ldr	r3, [pc, #44]	@ (8002134 <HAL_RCC_GetSysClockFreq+0x180>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	0c1b      	lsrs	r3, r3, #16
 800210a:	f003 0303 	and.w	r3, r3, #3
 800210e:	3301      	adds	r3, #1
 8002110:	005b      	lsls	r3, r3, #1
 8002112:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8002114:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002116:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002118:	fbb2 f3f3 	udiv	r3, r2, r3
 800211c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800211e:	e002      	b.n	8002126 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002120:	4b05      	ldr	r3, [pc, #20]	@ (8002138 <HAL_RCC_GetSysClockFreq+0x184>)
 8002122:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002128:	4618      	mov	r0, r3
 800212a:	3740      	adds	r7, #64	@ 0x40
 800212c:	46bd      	mov	sp, r7
 800212e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002132:	bf00      	nop
 8002134:	40023800 	.word	0x40023800
 8002138:	00f42400 	.word	0x00f42400
 800213c:	017d7840 	.word	0x017d7840

08002140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002144:	4b03      	ldr	r3, [pc, #12]	@ (8002154 <HAL_RCC_GetHCLKFreq+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000008 	.word	0x20000008

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800215c:	f7ff fff0 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b05      	ldr	r3, [pc, #20]	@ (8002178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0a9b      	lsrs	r3, r3, #10
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4903      	ldr	r1, [pc, #12]	@ (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002174:	4618      	mov	r0, r3
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40023800 	.word	0x40023800
 800217c:	08006edc 	.word	0x08006edc

08002180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002184:	f7ff ffdc 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002188:	4602      	mov	r2, r0
 800218a:	4b05      	ldr	r3, [pc, #20]	@ (80021a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	0b5b      	lsrs	r3, r3, #13
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	4903      	ldr	r1, [pc, #12]	@ (80021a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002196:	5ccb      	ldrb	r3, [r1, r3]
 8002198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40023800 	.word	0x40023800
 80021a4:	08006edc 	.word	0x08006edc

080021a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021a8:	b480      	push	{r7}
 80021aa:	b083      	sub	sp, #12
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	220f      	movs	r2, #15
 80021b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021b8:	4b12      	ldr	r3, [pc, #72]	@ (8002204 <HAL_RCC_GetClockConfig+0x5c>)
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	f003 0203 	and.w	r2, r3, #3
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021c4:	4b0f      	ldr	r3, [pc, #60]	@ (8002204 <HAL_RCC_GetClockConfig+0x5c>)
 80021c6:	689b      	ldr	r3, [r3, #8]
 80021c8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002204 <HAL_RCC_GetClockConfig+0x5c>)
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021dc:	4b09      	ldr	r3, [pc, #36]	@ (8002204 <HAL_RCC_GetClockConfig+0x5c>)
 80021de:	689b      	ldr	r3, [r3, #8]
 80021e0:	08db      	lsrs	r3, r3, #3
 80021e2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021ea:	4b07      	ldr	r3, [pc, #28]	@ (8002208 <HAL_RCC_GetClockConfig+0x60>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f003 0207 	and.w	r2, r3, #7
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	601a      	str	r2, [r3, #0]
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40023800 	.word	0x40023800
 8002208:	40023c00 	.word	0x40023c00

0800220c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e07b      	b.n	8002316 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002222:	2b00      	cmp	r3, #0
 8002224:	d108      	bne.n	8002238 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800222e:	d009      	beq.n	8002244 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2200      	movs	r2, #0
 8002234:	61da      	str	r2, [r3, #28]
 8002236:	e005      	b.n	8002244 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2200      	movs	r2, #0
 800223c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2200      	movs	r2, #0
 8002242:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2200      	movs	r2, #0
 8002248:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002250:	b2db      	uxtb	r3, r3
 8002252:	2b00      	cmp	r3, #0
 8002254:	d106      	bne.n	8002264 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2200      	movs	r2, #0
 800225a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f7fe fe00 	bl	8000e64 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	2202      	movs	r2, #2
 8002268:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800227a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800228c:	431a      	orrs	r2, r3
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	691b      	ldr	r3, [r3, #16]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	431a      	orrs	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695b      	ldr	r3, [r3, #20]
 80022a6:	f003 0301 	and.w	r3, r3, #1
 80022aa:	431a      	orrs	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	699b      	ldr	r3, [r3, #24]
 80022b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022b4:	431a      	orrs	r2, r3
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69db      	ldr	r3, [r3, #28]
 80022ba:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80022be:	431a      	orrs	r2, r3
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6a1b      	ldr	r3, [r3, #32]
 80022c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80022c8:	ea42 0103 	orr.w	r1, r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022d0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	430a      	orrs	r2, r1
 80022da:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	0c1b      	lsrs	r3, r3, #16
 80022e2:	f003 0104 	and.w	r1, r3, #4
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ea:	f003 0210 	and.w	r2, r3, #16
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	69da      	ldr	r2, [r3, #28]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002304:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2200      	movs	r2, #0
 800230a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002314:	2300      	movs	r3, #0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b088      	sub	sp, #32
 8002322:	af00      	add	r7, sp, #0
 8002324:	60f8      	str	r0, [r7, #12]
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	603b      	str	r3, [r7, #0]
 800232a:	4613      	mov	r3, r2
 800232c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800232e:	f7fe ff6f 	bl	8001210 <HAL_GetTick>
 8002332:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002334:	88fb      	ldrh	r3, [r7, #6]
 8002336:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d001      	beq.n	8002348 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002344:	2302      	movs	r3, #2
 8002346:	e12a      	b.n	800259e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d002      	beq.n	8002354 <HAL_SPI_Transmit+0x36>
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d101      	bne.n	8002358 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e122      	b.n	800259e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800235e:	2b01      	cmp	r3, #1
 8002360:	d101      	bne.n	8002366 <HAL_SPI_Transmit+0x48>
 8002362:	2302      	movs	r3, #2
 8002364:	e11b      	b.n	800259e <HAL_SPI_Transmit+0x280>
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	2201      	movs	r2, #1
 800236a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	2203      	movs	r2, #3
 8002372:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2200      	movs	r2, #0
 800237a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	68ba      	ldr	r2, [r7, #8]
 8002380:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	88fa      	ldrh	r2, [r7, #6]
 8002386:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	88fa      	ldrh	r2, [r7, #6]
 800238c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2200      	movs	r2, #0
 8002398:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2200      	movs	r2, #0
 800239e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	2200      	movs	r2, #0
 80023a4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	2200      	movs	r2, #0
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	689b      	ldr	r3, [r3, #8]
 80023b0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023b4:	d10f      	bne.n	80023d6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80023c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80023e0:	2b40      	cmp	r3, #64	@ 0x40
 80023e2:	d007      	beq.n	80023f4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80023f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80023fc:	d152      	bne.n	80024a4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d002      	beq.n	800240c <HAL_SPI_Transmit+0xee>
 8002406:	8b7b      	ldrh	r3, [r7, #26]
 8002408:	2b01      	cmp	r3, #1
 800240a:	d145      	bne.n	8002498 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002410:	881a      	ldrh	r2, [r3, #0]
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241c:	1c9a      	adds	r2, r3, #2
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002426:	b29b      	uxth	r3, r3
 8002428:	3b01      	subs	r3, #1
 800242a:	b29a      	uxth	r2, r3
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002430:	e032      	b.n	8002498 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b02      	cmp	r3, #2
 800243e:	d112      	bne.n	8002466 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002444:	881a      	ldrh	r2, [r3, #0]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002450:	1c9a      	adds	r2, r3, #2
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800245a:	b29b      	uxth	r3, r3
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002464:	e018      	b.n	8002498 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002466:	f7fe fed3 	bl	8001210 <HAL_GetTick>
 800246a:	4602      	mov	r2, r0
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	683a      	ldr	r2, [r7, #0]
 8002472:	429a      	cmp	r2, r3
 8002474:	d803      	bhi.n	800247e <HAL_SPI_Transmit+0x160>
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247c:	d102      	bne.n	8002484 <HAL_SPI_Transmit+0x166>
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d109      	bne.n	8002498 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2201      	movs	r2, #1
 8002488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	2200      	movs	r2, #0
 8002490:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e082      	b.n	800259e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d1c7      	bne.n	8002432 <HAL_SPI_Transmit+0x114>
 80024a2:	e053      	b.n	800254c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	685b      	ldr	r3, [r3, #4]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d002      	beq.n	80024b2 <HAL_SPI_Transmit+0x194>
 80024ac:	8b7b      	ldrh	r3, [r7, #26]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d147      	bne.n	8002542 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	330c      	adds	r3, #12
 80024bc:	7812      	ldrb	r2, [r2, #0]
 80024be:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80024d8:	e033      	b.n	8002542 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 0302 	and.w	r3, r3, #2
 80024e4:	2b02      	cmp	r3, #2
 80024e6:	d113      	bne.n	8002510 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	330c      	adds	r3, #12
 80024f2:	7812      	ldrb	r2, [r2, #0]
 80024f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002504:	b29b      	uxth	r3, r3
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800250e:	e018      	b.n	8002542 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002510:	f7fe fe7e 	bl	8001210 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	69fb      	ldr	r3, [r7, #28]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	429a      	cmp	r2, r3
 800251e:	d803      	bhi.n	8002528 <HAL_SPI_Transmit+0x20a>
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002526:	d102      	bne.n	800252e <HAL_SPI_Transmit+0x210>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d109      	bne.n	8002542 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2201      	movs	r2, #1
 8002532:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e02d      	b.n	800259e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002546:	b29b      	uxth	r3, r3
 8002548:	2b00      	cmp	r3, #0
 800254a:	d1c6      	bne.n	80024da <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800254c:	69fa      	ldr	r2, [r7, #28]
 800254e:	6839      	ldr	r1, [r7, #0]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f000 f8b1 	bl	80026b8 <SPI_EndRxTxTransaction>
 8002556:	4603      	mov	r3, r0
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2220      	movs	r2, #32
 8002560:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	2b00      	cmp	r3, #0
 8002568:	d10a      	bne.n	8002580 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800256a:	2300      	movs	r3, #0
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	689b      	ldr	r3, [r3, #8]
 800257c:	617b      	str	r3, [r7, #20]
 800257e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	2201      	movs	r2, #1
 8002584:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002594:	2b00      	cmp	r3, #0
 8002596:	d001      	beq.n	800259c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8002598:	2301      	movs	r3, #1
 800259a:	e000      	b.n	800259e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 800259c:	2300      	movs	r3, #0
  }
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3720      	adds	r7, #32
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
	...

080025a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b088      	sub	sp, #32
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	60f8      	str	r0, [r7, #12]
 80025b0:	60b9      	str	r1, [r7, #8]
 80025b2:	603b      	str	r3, [r7, #0]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80025b8:	f7fe fe2a 	bl	8001210 <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025c0:	1a9b      	subs	r3, r3, r2
 80025c2:	683a      	ldr	r2, [r7, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80025c8:	f7fe fe22 	bl	8001210 <HAL_GetTick>
 80025cc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80025ce:	4b39      	ldr	r3, [pc, #228]	@ (80026b4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	015b      	lsls	r3, r3, #5
 80025d4:	0d1b      	lsrs	r3, r3, #20
 80025d6:	69fa      	ldr	r2, [r7, #28]
 80025d8:	fb02 f303 	mul.w	r3, r2, r3
 80025dc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025de:	e054      	b.n	800268a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025e6:	d050      	beq.n	800268a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80025e8:	f7fe fe12 	bl	8001210 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	69bb      	ldr	r3, [r7, #24]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	69fa      	ldr	r2, [r7, #28]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d902      	bls.n	80025fe <SPI_WaitFlagStateUntilTimeout+0x56>
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d13d      	bne.n	800267a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800260c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002616:	d111      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x94>
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002620:	d004      	beq.n	800262c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800262a:	d107      	bne.n	800263c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800263a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002640:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002644:	d10f      	bne.n	8002666 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002664:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	2201      	movs	r2, #1
 800266a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	2200      	movs	r2, #0
 8002672:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e017      	b.n	80026aa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d101      	bne.n	8002684 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002680:	2300      	movs	r3, #0
 8002682:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	3b01      	subs	r3, #1
 8002688:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	68bb      	ldr	r3, [r7, #8]
 8002692:	4013      	ands	r3, r2
 8002694:	68ba      	ldr	r2, [r7, #8]
 8002696:	429a      	cmp	r2, r3
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d19b      	bne.n	80025e0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026a8:	2300      	movs	r3, #0
}
 80026aa:	4618      	mov	r0, r3
 80026ac:	3720      	adds	r7, #32
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	20000008 	.word	0x20000008

080026b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b088      	sub	sp, #32
 80026bc:	af02      	add	r7, sp, #8
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	68bb      	ldr	r3, [r7, #8]
 80026ca:	2201      	movs	r2, #1
 80026cc:	2102      	movs	r1, #2
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff ff6a 	bl	80025a8 <SPI_WaitFlagStateUntilTimeout>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d007      	beq.n	80026ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026de:	f043 0220 	orr.w	r2, r3, #32
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80026e6:	2303      	movs	r3, #3
 80026e8:	e032      	b.n	8002750 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80026ea:	4b1b      	ldr	r3, [pc, #108]	@ (8002758 <SPI_EndRxTxTransaction+0xa0>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	4a1b      	ldr	r2, [pc, #108]	@ (800275c <SPI_EndRxTxTransaction+0xa4>)
 80026f0:	fba2 2303 	umull	r2, r3, r2, r3
 80026f4:	0d5b      	lsrs	r3, r3, #21
 80026f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80026fa:	fb02 f303 	mul.w	r3, r2, r3
 80026fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002708:	d112      	bne.n	8002730 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	9300      	str	r3, [sp, #0]
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2200      	movs	r2, #0
 8002712:	2180      	movs	r1, #128	@ 0x80
 8002714:	68f8      	ldr	r0, [r7, #12]
 8002716:	f7ff ff47 	bl	80025a8 <SPI_WaitFlagStateUntilTimeout>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d016      	beq.n	800274e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002724:	f043 0220 	orr.w	r2, r3, #32
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e00f      	b.n	8002750 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d00a      	beq.n	800274c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	3b01      	subs	r3, #1
 800273a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	689b      	ldr	r3, [r3, #8]
 8002742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002746:	2b80      	cmp	r3, #128	@ 0x80
 8002748:	d0f2      	beq.n	8002730 <SPI_EndRxTxTransaction+0x78>
 800274a:	e000      	b.n	800274e <SPI_EndRxTxTransaction+0x96>
        break;
 800274c:	bf00      	nop
  }

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	4618      	mov	r0, r3
 8002752:	3718      	adds	r7, #24
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	20000008 	.word	0x20000008
 800275c:	165e9f81 	.word	0x165e9f81

08002760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800276e:	2301      	movs	r3, #1
 8002770:	e041      	b.n	80027f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d106      	bne.n	800278c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2200      	movs	r2, #0
 8002782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002786:	6878      	ldr	r0, [r7, #4]
 8002788:	f000 f839 	bl	80027fe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2202      	movs	r2, #2
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	3304      	adds	r3, #4
 800279c:	4619      	mov	r1, r3
 800279e:	4610      	mov	r0, r2
 80027a0:	f000 f9c0 	bl	8002b24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2201      	movs	r2, #1
 80027e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2201      	movs	r2, #1
 80027e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2201      	movs	r2, #1
 80027f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80027f4:	2300      	movs	r3, #0
}
 80027f6:	4618      	mov	r0, r3
 80027f8:	3708      	adds	r7, #8
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bd80      	pop	{r7, pc}

080027fe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80027fe:	b480      	push	{r7}
 8002800:	b083      	sub	sp, #12
 8002802:	af00      	add	r7, sp, #0
 8002804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e04e      	b.n	80028ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a23      	ldr	r2, [pc, #140]	@ (80028d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d022      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002856:	d01d      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a1f      	ldr	r2, [pc, #124]	@ (80028dc <HAL_TIM_Base_Start_IT+0xc8>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d018      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a1e      	ldr	r2, [pc, #120]	@ (80028e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d013      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a1c      	ldr	r2, [pc, #112]	@ (80028e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d00e      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1b      	ldr	r2, [pc, #108]	@ (80028e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d009      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a19      	ldr	r2, [pc, #100]	@ (80028ec <HAL_TIM_Base_Start_IT+0xd8>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d004      	beq.n	8002894 <HAL_TIM_Base_Start_IT+0x80>
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	4a18      	ldr	r2, [pc, #96]	@ (80028f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d111      	bne.n	80028b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0307 	and.w	r3, r3, #7
 800289e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	2b06      	cmp	r3, #6
 80028a4:	d010      	beq.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f042 0201 	orr.w	r2, r2, #1
 80028b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028b6:	e007      	b.n	80028c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	681a      	ldr	r2, [r3, #0]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f042 0201 	orr.w	r2, r2, #1
 80028c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3714      	adds	r7, #20
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
 80028d6:	bf00      	nop
 80028d8:	40010000 	.word	0x40010000
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	40000c00 	.word	0x40000c00
 80028e8:	40010400 	.word	0x40010400
 80028ec:	40014000 	.word	0x40014000
 80028f0:	40001800 	.word	0x40001800

080028f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b084      	sub	sp, #16
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	691b      	ldr	r3, [r3, #16]
 800290a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d020      	beq.n	8002958 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f003 0302 	and.w	r3, r3, #2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d01b      	beq.n	8002958 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f06f 0202 	mvn.w	r2, #2
 8002928:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	f003 0303 	and.w	r3, r3, #3
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800293e:	6878      	ldr	r0, [r7, #4]
 8002940:	f000 f8d2 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002944:	e005      	b.n	8002952 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f8c4 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800294c:	6878      	ldr	r0, [r7, #4]
 800294e:	f000 f8d5 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2200      	movs	r2, #0
 8002956:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	f003 0304 	and.w	r3, r3, #4
 800295e:	2b00      	cmp	r3, #0
 8002960:	d020      	beq.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d01b      	beq.n	80029a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f06f 0204 	mvn.w	r2, #4
 8002974:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 f8ac 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002990:	e005      	b.n	800299e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f000 f89e 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f8af 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80029a4:	68bb      	ldr	r3, [r7, #8]
 80029a6:	f003 0308 	and.w	r3, r3, #8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d020      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d01b      	beq.n	80029f0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f06f 0208 	mvn.w	r2, #8
 80029c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2204      	movs	r2, #4
 80029c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029d6:	6878      	ldr	r0, [r7, #4]
 80029d8:	f000 f886 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 80029dc:	e005      	b.n	80029ea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 f878 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f000 f889 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	f003 0310 	and.w	r3, r3, #16
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d020      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f003 0310 	and.w	r3, r3, #16
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d01b      	beq.n	8002a3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f06f 0210 	mvn.w	r2, #16
 8002a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2208      	movs	r2, #8
 8002a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d003      	beq.n	8002a2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f000 f860 	bl	8002ae8 <HAL_TIM_IC_CaptureCallback>
 8002a28:	e005      	b.n	8002a36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f852 	bl	8002ad4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a30:	6878      	ldr	r0, [r7, #4]
 8002a32:	f000 f863 	bl	8002afc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00c      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	f003 0301 	and.w	r3, r3, #1
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f06f 0201 	mvn.w	r2, #1
 8002a58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7fd ff60 	bl	8000920 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d00c      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d007      	beq.n	8002a84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002a7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f906 	bl	8002c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002a84:	68bb      	ldr	r3, [r7, #8]
 8002a86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00c      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d007      	beq.n	8002aa8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002aa0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f000 f834 	bl	8002b10 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002aa8:	68bb      	ldr	r3, [r7, #8]
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00c      	beq.n	8002acc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f003 0320 	and.w	r3, r3, #32
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f06f 0220 	mvn.w	r2, #32
 8002ac4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f8d8 	bl	8002c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002acc:	bf00      	nop
 8002ace:	3710      	adds	r7, #16
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002adc:	bf00      	nop
 8002ade:	370c      	adds	r7, #12
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae6:	4770      	bx	lr

08002ae8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	b083      	sub	sp, #12
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002af0:	bf00      	nop
 8002af2:	370c      	adds	r7, #12
 8002af4:	46bd      	mov	sp, r7
 8002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afa:	4770      	bx	lr

08002afc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b083      	sub	sp, #12
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b04:	bf00      	nop
 8002b06:	370c      	adds	r7, #12
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0e:	4770      	bx	lr

08002b10 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b083      	sub	sp, #12
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
 8002b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	4a46      	ldr	r2, [pc, #280]	@ (8002c50 <TIM_Base_SetConfig+0x12c>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d013      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b42:	d00f      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a43      	ldr	r2, [pc, #268]	@ (8002c54 <TIM_Base_SetConfig+0x130>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d00b      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4a42      	ldr	r2, [pc, #264]	@ (8002c58 <TIM_Base_SetConfig+0x134>)
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d007      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a41      	ldr	r2, [pc, #260]	@ (8002c5c <TIM_Base_SetConfig+0x138>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d003      	beq.n	8002b64 <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a40      	ldr	r2, [pc, #256]	@ (8002c60 <TIM_Base_SetConfig+0x13c>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d108      	bne.n	8002b76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	685b      	ldr	r3, [r3, #4]
 8002b70:	68fa      	ldr	r2, [r7, #12]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a35      	ldr	r2, [pc, #212]	@ (8002c50 <TIM_Base_SetConfig+0x12c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d02b      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b84:	d027      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a32      	ldr	r2, [pc, #200]	@ (8002c54 <TIM_Base_SetConfig+0x130>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d023      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a31      	ldr	r2, [pc, #196]	@ (8002c58 <TIM_Base_SetConfig+0x134>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d01f      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a30      	ldr	r2, [pc, #192]	@ (8002c5c <TIM_Base_SetConfig+0x138>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d01b      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8002c60 <TIM_Base_SetConfig+0x13c>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d017      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2e      	ldr	r2, [pc, #184]	@ (8002c64 <TIM_Base_SetConfig+0x140>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d013      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002c68 <TIM_Base_SetConfig+0x144>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00f      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2c      	ldr	r2, [pc, #176]	@ (8002c6c <TIM_Base_SetConfig+0x148>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d00b      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8002c70 <TIM_Base_SetConfig+0x14c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d007      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8002c74 <TIM_Base_SetConfig+0x150>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d003      	beq.n	8002bd6 <TIM_Base_SetConfig+0xb2>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a29      	ldr	r2, [pc, #164]	@ (8002c78 <TIM_Base_SetConfig+0x154>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d108      	bne.n	8002be8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	68db      	ldr	r3, [r3, #12]
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	695b      	ldr	r3, [r3, #20]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68fa      	ldr	r2, [r7, #12]
 8002bfa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	689a      	ldr	r2, [r3, #8]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	681a      	ldr	r2, [r3, #0]
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a10      	ldr	r2, [pc, #64]	@ (8002c50 <TIM_Base_SetConfig+0x12c>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_Base_SetConfig+0xf8>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a12      	ldr	r2, [pc, #72]	@ (8002c60 <TIM_Base_SetConfig+0x13c>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d103      	bne.n	8002c24 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d105      	bne.n	8002c42 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f023 0201 	bic.w	r2, r3, #1
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	611a      	str	r2, [r3, #16]
  }
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40010000 	.word	0x40010000
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40000c00 	.word	0x40000c00
 8002c60:	40010400 	.word	0x40010400
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800
 8002c70:	40001800 	.word	0x40001800
 8002c74:	40001c00 	.word	0x40001c00
 8002c78:	40002000 	.word	0x40002000

08002c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	b083      	sub	sp, #12
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8e:	4770      	bx	lr

08002c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c98:	bf00      	nop
 8002c9a:	370c      	adds	r7, #12
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca2:	4770      	bx	lr

08002ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e042      	b.n	8002d3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002cbc:	b2db      	uxtb	r3, r3
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d106      	bne.n	8002cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f7fe f932 	bl	8000f34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2224      	movs	r2, #36	@ 0x24
 8002cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	68da      	ldr	r2, [r3, #12]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	f000 fd11 	bl	8003710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	691a      	ldr	r2, [r3, #16]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	695a      	ldr	r2, [r3, #20]
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2200      	movs	r2, #0
 8002d22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2220      	movs	r2, #32
 8002d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2200      	movs	r2, #0
 8002d38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3708      	adds	r7, #8
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b08c      	sub	sp, #48	@ 0x30
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	60f8      	str	r0, [r7, #12]
 8002d4c:	60b9      	str	r1, [r7, #8]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b20      	cmp	r3, #32
 8002d5c:	d14a      	bne.n	8002df4 <HAL_UARTEx_ReceiveToIdle_IT+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d5e:	68bb      	ldr	r3, [r7, #8]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d002      	beq.n	8002d6a <HAL_UARTEx_ReceiveToIdle_IT+0x26>
 8002d64:	88fb      	ldrh	r3, [r7, #6]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_UARTEx_ReceiveToIdle_IT+0x2a>
    {
      return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e043      	b.n	8002df6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	2201      	movs	r2, #1
 8002d72:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	2200      	movs	r2, #0
 8002d78:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_IT(huart, pData, Size);
 8002d7a:	88fb      	ldrh	r3, [r7, #6]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	68b9      	ldr	r1, [r7, #8]
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f000 faed 	bl	8003360 <UART_Start_Receive_IT>
 8002d86:	4603      	mov	r3, r0
 8002d88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8002d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d12c      	bne.n	8002dee <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d125      	bne.n	8002de8 <HAL_UARTEx_ReceiveToIdle_IT+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002d9c:	2300      	movs	r3, #0
 8002d9e:	613b      	str	r3, [r7, #16]
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	613b      	str	r3, [r7, #16]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	330c      	adds	r3, #12
 8002db8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	617b      	str	r3, [r7, #20]
   return(result);
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	f043 0310 	orr.w	r3, r3, #16
 8002dc8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	330c      	adds	r3, #12
 8002dd0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002dd2:	627a      	str	r2, [r7, #36]	@ 0x24
 8002dd4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	6a39      	ldr	r1, [r7, #32]
 8002dd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	61fb      	str	r3, [r7, #28]
   return(result);
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1e5      	bne.n	8002db2 <HAL_UARTEx_ReceiveToIdle_IT+0x6e>
 8002de6:	e002      	b.n	8002dee <HAL_UARTEx_ReceiveToIdle_IT+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 8002dee:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002df2:	e000      	b.n	8002df6 <HAL_UARTEx_ReceiveToIdle_IT+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8002df4:	2302      	movs	r3, #2
  }
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3730      	adds	r7, #48	@ 0x30
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
	...

08002e00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b0ba      	sub	sp, #232	@ 0xe8
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	695b      	ldr	r3, [r3, #20]
 8002e22:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002e26:	2300      	movs	r3, #0
 8002e28:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002e32:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e36:	f003 030f 	and.w	r3, r3, #15
 8002e3a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002e3e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d009      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
 8002e52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e56:	f003 0320 	and.w	r3, r3, #32
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d003      	beq.n	8002e66 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 fb97 	bl	8003592 <UART_Receive_IT>
      return;
 8002e64:	e25b      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002e66:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f000 80de 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
 8002e70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002e74:	f003 0301 	and.w	r3, r3, #1
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d106      	bne.n	8002e8a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e80:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	f000 80d1 	beq.w	800302c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002e8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
 8002e96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea6:	f043 0201 	orr.w	r2, r3, #1
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002eb2:	f003 0304 	and.w	r3, r3, #4
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d00b      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
 8002eba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d005      	beq.n	8002ed2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eca:	f043 0202 	orr.w	r2, r3, #2
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ed6:	f003 0302 	and.w	r3, r3, #2
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d00b      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
 8002ede:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002ee2:	f003 0301 	and.w	r3, r3, #1
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d005      	beq.n	8002ef6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eee:	f043 0204 	orr.w	r2, r3, #4
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002efa:	f003 0308 	and.w	r3, r3, #8
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d011      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
 8002f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f06:	f003 0320 	and.w	r3, r3, #32
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d105      	bne.n	8002f1a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002f0e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d005      	beq.n	8002f26 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f1e:	f043 0208 	orr.w	r2, r3, #8
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	f000 81f2 	beq.w	8003314 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f34:	f003 0320 	and.w	r3, r3, #32
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d008      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
 8002f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f40:	f003 0320 	and.w	r3, r3, #32
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002f48:	6878      	ldr	r0, [r7, #4]
 8002f4a:	f000 fb22 	bl	8003592 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f58:	2b40      	cmp	r3, #64	@ 0x40
 8002f5a:	bf0c      	ite	eq
 8002f5c:	2301      	moveq	r3, #1
 8002f5e:	2300      	movne	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d103      	bne.n	8002f7a <HAL_UART_IRQHandler+0x17a>
 8002f72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d04f      	beq.n	800301a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	f000 fa2a 	bl	80033d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f8a:	2b40      	cmp	r3, #64	@ 0x40
 8002f8c:	d141      	bne.n	8003012 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	3314      	adds	r3, #20
 8002f94:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002f9c:	e853 3f00 	ldrex	r3, [r3]
 8002fa0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002fa4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002fa8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002fac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	3314      	adds	r3, #20
 8002fb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002fba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002fbe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fc2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002fc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002fca:	e841 2300 	strex	r3, r2, [r1]
 8002fce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002fd2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d1d9      	bne.n	8002f8e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d013      	beq.n	800300a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fe6:	4a7e      	ldr	r2, [pc, #504]	@ (80031e0 <HAL_UART_IRQHandler+0x3e0>)
 8002fe8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002fee:	4618      	mov	r0, r3
 8002ff0:	f7fe fa90 	bl	8001514 <HAL_DMA_Abort_IT>
 8002ff4:	4603      	mov	r3, r0
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d016      	beq.n	8003028 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003000:	687a      	ldr	r2, [r7, #4]
 8003002:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003004:	4610      	mov	r0, r2
 8003006:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003008:	e00e      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 f99e 	bl	800334c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003010:	e00a      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f99a 	bl	800334c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003018:	e006      	b.n	8003028 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f000 f996 	bl	800334c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003026:	e175      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003028:	bf00      	nop
    return;
 800302a:	e173      	b.n	8003314 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003030:	2b01      	cmp	r3, #1
 8003032:	f040 814f 	bne.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003036:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800303a:	f003 0310 	and.w	r3, r3, #16
 800303e:	2b00      	cmp	r3, #0
 8003040:	f000 8148 	beq.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003044:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003048:	f003 0310 	and.w	r3, r3, #16
 800304c:	2b00      	cmp	r3, #0
 800304e:	f000 8141 	beq.w	80032d4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	60bb      	str	r3, [r7, #8]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	60bb      	str	r3, [r7, #8]
 8003066:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	695b      	ldr	r3, [r3, #20]
 800306e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003072:	2b40      	cmp	r3, #64	@ 0x40
 8003074:	f040 80b6 	bne.w	80031e4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	685b      	ldr	r3, [r3, #4]
 8003080:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003084:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 8145 	beq.w	8003318 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003092:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003096:	429a      	cmp	r2, r3
 8003098:	f080 813e 	bcs.w	8003318 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80030a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030a8:	69db      	ldr	r3, [r3, #28]
 80030aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030ae:	f000 8088 	beq.w	80031c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	330c      	adds	r3, #12
 80030b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030c0:	e853 3f00 	ldrex	r3, [r3]
 80030c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80030c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80030cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	330c      	adds	r3, #12
 80030da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80030de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80030e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80030ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80030ee:	e841 2300 	strex	r3, r2, [r1]
 80030f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80030f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d1d9      	bne.n	80030b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	3314      	adds	r3, #20
 8003104:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003106:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003108:	e853 3f00 	ldrex	r3, [r3]
 800310c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800310e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003110:	f023 0301 	bic.w	r3, r3, #1
 8003114:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	3314      	adds	r3, #20
 800311e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003122:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003126:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003128:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800312a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800312e:	e841 2300 	strex	r3, r2, [r1]
 8003132:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1e1      	bne.n	80030fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	3314      	adds	r3, #20
 8003140:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003142:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003144:	e853 3f00 	ldrex	r3, [r3]
 8003148:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800314a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800314c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003150:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	3314      	adds	r3, #20
 800315a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800315e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003160:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003162:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003164:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003166:	e841 2300 	strex	r3, r2, [r1]
 800316a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800316c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1e3      	bne.n	800313a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2220      	movs	r2, #32
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	330c      	adds	r3, #12
 8003186:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003188:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800318a:	e853 3f00 	ldrex	r3, [r3]
 800318e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003190:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003192:	f023 0310 	bic.w	r3, r3, #16
 8003196:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	330c      	adds	r3, #12
 80031a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80031a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80031a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80031aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80031ac:	e841 2300 	strex	r3, r2, [r1]
 80031b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80031b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d1e3      	bne.n	8003180 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031bc:	4618      	mov	r0, r3
 80031be:	f7fe f939 	bl	8001434 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2202      	movs	r2, #2
 80031c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031d0:	b29b      	uxth	r3, r3
 80031d2:	1ad3      	subs	r3, r2, r3
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f7fd fb3d 	bl	8000858 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80031de:	e09b      	b.n	8003318 <HAL_UART_IRQHandler+0x518>
 80031e0:	0800349b 	.word	0x0800349b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	f000 808e 	beq.w	800331c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003200:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003204:	2b00      	cmp	r3, #0
 8003206:	f000 8089 	beq.w	800331c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	330c      	adds	r3, #12
 8003210:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003214:	e853 3f00 	ldrex	r3, [r3]
 8003218:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003220:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	330c      	adds	r3, #12
 800322a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800322e:	647a      	str	r2, [r7, #68]	@ 0x44
 8003230:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003232:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003234:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003236:	e841 2300 	strex	r3, r2, [r1]
 800323a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800323c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1e3      	bne.n	800320a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	3314      	adds	r3, #20
 8003248:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	e853 3f00 	ldrex	r3, [r3]
 8003250:	623b      	str	r3, [r7, #32]
   return(result);
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	f023 0301 	bic.w	r3, r3, #1
 8003258:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	3314      	adds	r3, #20
 8003262:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003266:	633a      	str	r2, [r7, #48]	@ 0x30
 8003268:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800326a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800326c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800326e:	e841 2300 	strex	r3, r2, [r1]
 8003272:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003276:	2b00      	cmp	r3, #0
 8003278:	d1e3      	bne.n	8003242 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2220      	movs	r2, #32
 800327e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	330c      	adds	r3, #12
 800328e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	e853 3f00 	ldrex	r3, [r3]
 8003296:	60fb      	str	r3, [r7, #12]
   return(result);
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0310 	bic.w	r3, r3, #16
 800329e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	330c      	adds	r3, #12
 80032a8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80032ac:	61fa      	str	r2, [r7, #28]
 80032ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b0:	69b9      	ldr	r1, [r7, #24]
 80032b2:	69fa      	ldr	r2, [r7, #28]
 80032b4:	e841 2300 	strex	r3, r2, [r1]
 80032b8:	617b      	str	r3, [r7, #20]
   return(result);
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d1e3      	bne.n	8003288 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2202      	movs	r2, #2
 80032c4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80032c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032ca:	4619      	mov	r1, r3
 80032cc:	6878      	ldr	r0, [r7, #4]
 80032ce:	f7fd fac3 	bl	8000858 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032d2:	e023      	b.n	800331c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d009      	beq.n	80032f4 <HAL_UART_IRQHandler+0x4f4>
 80032e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80032e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80032ec:	6878      	ldr	r0, [r7, #4]
 80032ee:	f000 f8e8 	bl	80034c2 <UART_Transmit_IT>
    return;
 80032f2:	e014      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80032f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_UART_IRQHandler+0x51e>
 8003300:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003304:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d008      	beq.n	800331e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f928 	bl	8003562 <UART_EndTransmit_IT>
    return;
 8003312:	e004      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
    return;
 8003314:	bf00      	nop
 8003316:	e002      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
      return;
 8003318:	bf00      	nop
 800331a:	e000      	b.n	800331e <HAL_UART_IRQHandler+0x51e>
      return;
 800331c:	bf00      	nop
  }
}
 800331e:	37e8      	adds	r7, #232	@ 0xe8
 8003320:	46bd      	mov	sp, r7
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003336:	4770      	bx	lr

08003338 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003340:	bf00      	nop
 8003342:	370c      	adds	r7, #12
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr

0800334c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800334c:	b480      	push	{r7}
 800334e:	b083      	sub	sp, #12
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003354:	bf00      	nop
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335e:	4770      	bx	lr

08003360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003360:	b480      	push	{r7}
 8003362:	b085      	sub	sp, #20
 8003364:	af00      	add	r7, sp, #0
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	60b9      	str	r1, [r7, #8]
 800336a:	4613      	mov	r3, r2
 800336c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	68ba      	ldr	r2, [r7, #8]
 8003372:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	88fa      	ldrh	r2, [r7, #6]
 8003378:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2222      	movs	r2, #34	@ 0x22
 800338a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691b      	ldr	r3, [r3, #16]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d007      	beq.n	80033a6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68da      	ldr	r2, [r3, #12]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80033a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695a      	ldr	r2, [r3, #20]
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f042 0201 	orr.w	r2, r2, #1
 80033b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	68da      	ldr	r2, [r3, #12]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0220 	orr.w	r2, r2, #32
 80033c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80033c6:	2300      	movs	r3, #0
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b095      	sub	sp, #84	@ 0x54
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	330c      	adds	r3, #12
 80033e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80033e6:	e853 3f00 	ldrex	r3, [r3]
 80033ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80033ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80033f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	330c      	adds	r3, #12
 80033fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80033fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80033fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800340a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e5      	bne.n	80033dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3314      	adds	r3, #20
 8003416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6a3b      	ldr	r3, [r7, #32]
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	3314      	adds	r3, #20
 800342e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003430:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003438:	e841 2300 	strex	r3, r2, [r1]
 800343c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800343e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003440:	2b00      	cmp	r3, #0
 8003442:	d1e5      	bne.n	8003410 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003448:	2b01      	cmp	r3, #1
 800344a:	d119      	bne.n	8003480 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	330c      	adds	r3, #12
 8003452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	e853 3f00 	ldrex	r3, [r3]
 800345a:	60bb      	str	r3, [r7, #8]
   return(result);
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f023 0310 	bic.w	r3, r3, #16
 8003462:	647b      	str	r3, [r7, #68]	@ 0x44
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	330c      	adds	r3, #12
 800346a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800346c:	61ba      	str	r2, [r7, #24]
 800346e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003470:	6979      	ldr	r1, [r7, #20]
 8003472:	69ba      	ldr	r2, [r7, #24]
 8003474:	e841 2300 	strex	r3, r2, [r1]
 8003478:	613b      	str	r3, [r7, #16]
   return(result);
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1e5      	bne.n	800344c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2220      	movs	r2, #32
 8003484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2200      	movs	r2, #0
 800348c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800348e:	bf00      	nop
 8003490:	3754      	adds	r7, #84	@ 0x54
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800349a:	b580      	push	{r7, lr}
 800349c:	b084      	sub	sp, #16
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	2200      	movs	r2, #0
 80034ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	2200      	movs	r2, #0
 80034b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80034b4:	68f8      	ldr	r0, [r7, #12]
 80034b6:	f7ff ff49 	bl	800334c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80034ba:	bf00      	nop
 80034bc:	3710      	adds	r7, #16
 80034be:	46bd      	mov	sp, r7
 80034c0:	bd80      	pop	{r7, pc}

080034c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b085      	sub	sp, #20
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b21      	cmp	r3, #33	@ 0x21
 80034d4:	d13e      	bne.n	8003554 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80034de:	d114      	bne.n	800350a <UART_Transmit_IT+0x48>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	691b      	ldr	r3, [r3, #16]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d110      	bne.n	800350a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	881b      	ldrh	r3, [r3, #0]
 80034f2:	461a      	mov	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6a1b      	ldr	r3, [r3, #32]
 8003502:	1c9a      	adds	r2, r3, #2
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	621a      	str	r2, [r3, #32]
 8003508:	e008      	b.n	800351c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a1b      	ldr	r3, [r3, #32]
 800350e:	1c59      	adds	r1, r3, #1
 8003510:	687a      	ldr	r2, [r7, #4]
 8003512:	6211      	str	r1, [r2, #32]
 8003514:	781a      	ldrb	r2, [r3, #0]
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003520:	b29b      	uxth	r3, r3
 8003522:	3b01      	subs	r3, #1
 8003524:	b29b      	uxth	r3, r3
 8003526:	687a      	ldr	r2, [r7, #4]
 8003528:	4619      	mov	r1, r3
 800352a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800352c:	2b00      	cmp	r3, #0
 800352e:	d10f      	bne.n	8003550 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800353e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	68da      	ldr	r2, [r3, #12]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800354e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3714      	adds	r7, #20
 800355a:	46bd      	mov	sp, r7
 800355c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003560:	4770      	bx	lr

08003562 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003562:	b580      	push	{r7, lr}
 8003564:	b082      	sub	sp, #8
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	68da      	ldr	r2, [r3, #12]
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003578:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	2220      	movs	r2, #32
 800357e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fece 	bl	8003324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}

08003592 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003592:	b580      	push	{r7, lr}
 8003594:	b08c      	sub	sp, #48	@ 0x30
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80035a0:	b2db      	uxtb	r3, r3
 80035a2:	2b22      	cmp	r3, #34	@ 0x22
 80035a4:	f040 80ae 	bne.w	8003704 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035b0:	d117      	bne.n	80035e2 <UART_Receive_IT+0x50>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	691b      	ldr	r3, [r3, #16]
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d113      	bne.n	80035e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80035ba:	2300      	movs	r3, #0
 80035bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	b29b      	uxth	r3, r3
 80035cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80035d0:	b29a      	uxth	r2, r3
 80035d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035da:	1c9a      	adds	r2, r3, #2
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	629a      	str	r2, [r3, #40]	@ 0x28
 80035e0:	e026      	b.n	8003630 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80035e8:	2300      	movs	r3, #0
 80035ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035f4:	d007      	beq.n	8003606 <UART_Receive_IT+0x74>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d10a      	bne.n	8003614 <UART_Receive_IT+0x82>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	b2da      	uxtb	r2, r3
 800360e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003610:	701a      	strb	r2, [r3, #0]
 8003612:	e008      	b.n	8003626 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	b2db      	uxtb	r3, r3
 800361c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003620:	b2da      	uxtb	r2, r3
 8003622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003624:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800362a:	1c5a      	adds	r2, r3, #1
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003634:	b29b      	uxth	r3, r3
 8003636:	3b01      	subs	r3, #1
 8003638:	b29b      	uxth	r3, r3
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	4619      	mov	r1, r3
 800363e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003640:	2b00      	cmp	r3, #0
 8003642:	d15d      	bne.n	8003700 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f022 0220 	bic.w	r2, r2, #32
 8003652:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68da      	ldr	r2, [r3, #12]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	695a      	ldr	r2, [r3, #20]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0201 	bic.w	r2, r2, #1
 8003672:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2220      	movs	r2, #32
 8003678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003686:	2b01      	cmp	r3, #1
 8003688:	d135      	bne.n	80036f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	2200      	movs	r2, #0
 800368e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	330c      	adds	r3, #12
 8003696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	e853 3f00 	ldrex	r3, [r3]
 800369e:	613b      	str	r3, [r7, #16]
   return(result);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	f023 0310 	bic.w	r3, r3, #16
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	330c      	adds	r3, #12
 80036ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036b0:	623a      	str	r2, [r7, #32]
 80036b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036b4:	69f9      	ldr	r1, [r7, #28]
 80036b6:	6a3a      	ldr	r2, [r7, #32]
 80036b8:	e841 2300 	strex	r3, r2, [r1]
 80036bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d1e5      	bne.n	8003690 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	2b10      	cmp	r3, #16
 80036d0:	d10a      	bne.n	80036e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	60fb      	str	r3, [r7, #12]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
 80036e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80036ec:	4619      	mov	r1, r3
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fd f8b2 	bl	8000858 <HAL_UARTEx_RxEventCallback>
 80036f4:	e002      	b.n	80036fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f7ff fe1e 	bl	8003338 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80036fc:	2300      	movs	r3, #0
 80036fe:	e002      	b.n	8003706 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003700:	2300      	movs	r3, #0
 8003702:	e000      	b.n	8003706 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003704:	2302      	movs	r3, #2
  }
}
 8003706:	4618      	mov	r0, r3
 8003708:	3730      	adds	r7, #48	@ 0x30
 800370a:	46bd      	mov	sp, r7
 800370c:	bd80      	pop	{r7, pc}
	...

08003710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003714:	b0c0      	sub	sp, #256	@ 0x100
 8003716:	af00      	add	r7, sp, #0
 8003718:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800371c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800372c:	68d9      	ldr	r1, [r3, #12]
 800372e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	ea40 0301 	orr.w	r3, r0, r1
 8003738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800373a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003744:	691b      	ldr	r3, [r3, #16]
 8003746:	431a      	orrs	r2, r3
 8003748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800374c:	695b      	ldr	r3, [r3, #20]
 800374e:	431a      	orrs	r2, r3
 8003750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4313      	orrs	r3, r2
 8003758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800375c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003768:	f021 010c 	bic.w	r1, r1, #12
 800376c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003770:	681a      	ldr	r2, [r3, #0]
 8003772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003776:	430b      	orrs	r3, r1
 8003778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800377a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800378a:	6999      	ldr	r1, [r3, #24]
 800378c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	ea40 0301 	orr.w	r3, r0, r1
 8003796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	4b8f      	ldr	r3, [pc, #572]	@ (80039dc <UART_SetConfig+0x2cc>)
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d005      	beq.n	80037b0 <UART_SetConfig+0xa0>
 80037a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b8d      	ldr	r3, [pc, #564]	@ (80039e0 <UART_SetConfig+0x2d0>)
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d104      	bne.n	80037ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80037b0:	f7fe fce6 	bl	8002180 <HAL_RCC_GetPCLK2Freq>
 80037b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80037b8:	e003      	b.n	80037c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80037ba:	f7fe fccd 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 80037be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037c6:	69db      	ldr	r3, [r3, #28]
 80037c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80037cc:	f040 810c 	bne.w	80039e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80037d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80037d4:	2200      	movs	r2, #0
 80037d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80037da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80037de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80037e2:	4622      	mov	r2, r4
 80037e4:	462b      	mov	r3, r5
 80037e6:	1891      	adds	r1, r2, r2
 80037e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80037ea:	415b      	adcs	r3, r3
 80037ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80037f2:	4621      	mov	r1, r4
 80037f4:	eb12 0801 	adds.w	r8, r2, r1
 80037f8:	4629      	mov	r1, r5
 80037fa:	eb43 0901 	adc.w	r9, r3, r1
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	f04f 0300 	mov.w	r3, #0
 8003806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800380a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800380e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003812:	4690      	mov	r8, r2
 8003814:	4699      	mov	r9, r3
 8003816:	4623      	mov	r3, r4
 8003818:	eb18 0303 	adds.w	r3, r8, r3
 800381c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003820:	462b      	mov	r3, r5
 8003822:	eb49 0303 	adc.w	r3, r9, r3
 8003826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800382a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003836:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800383a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800383e:	460b      	mov	r3, r1
 8003840:	18db      	adds	r3, r3, r3
 8003842:	653b      	str	r3, [r7, #80]	@ 0x50
 8003844:	4613      	mov	r3, r2
 8003846:	eb42 0303 	adc.w	r3, r2, r3
 800384a:	657b      	str	r3, [r7, #84]	@ 0x54
 800384c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003854:	f7fc fcbc 	bl	80001d0 <__aeabi_uldivmod>
 8003858:	4602      	mov	r2, r0
 800385a:	460b      	mov	r3, r1
 800385c:	4b61      	ldr	r3, [pc, #388]	@ (80039e4 <UART_SetConfig+0x2d4>)
 800385e:	fba3 2302 	umull	r2, r3, r3, r2
 8003862:	095b      	lsrs	r3, r3, #5
 8003864:	011c      	lsls	r4, r3, #4
 8003866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800386a:	2200      	movs	r2, #0
 800386c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003870:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003878:	4642      	mov	r2, r8
 800387a:	464b      	mov	r3, r9
 800387c:	1891      	adds	r1, r2, r2
 800387e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003880:	415b      	adcs	r3, r3
 8003882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003888:	4641      	mov	r1, r8
 800388a:	eb12 0a01 	adds.w	sl, r2, r1
 800388e:	4649      	mov	r1, r9
 8003890:	eb43 0b01 	adc.w	fp, r3, r1
 8003894:	f04f 0200 	mov.w	r2, #0
 8003898:	f04f 0300 	mov.w	r3, #0
 800389c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80038a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80038a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80038a8:	4692      	mov	sl, r2
 80038aa:	469b      	mov	fp, r3
 80038ac:	4643      	mov	r3, r8
 80038ae:	eb1a 0303 	adds.w	r3, sl, r3
 80038b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80038b6:	464b      	mov	r3, r9
 80038b8:	eb4b 0303 	adc.w	r3, fp, r3
 80038bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80038c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80038cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80038d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80038d4:	460b      	mov	r3, r1
 80038d6:	18db      	adds	r3, r3, r3
 80038d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80038da:	4613      	mov	r3, r2
 80038dc:	eb42 0303 	adc.w	r3, r2, r3
 80038e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80038e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80038e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80038ea:	f7fc fc71 	bl	80001d0 <__aeabi_uldivmod>
 80038ee:	4602      	mov	r2, r0
 80038f0:	460b      	mov	r3, r1
 80038f2:	4611      	mov	r1, r2
 80038f4:	4b3b      	ldr	r3, [pc, #236]	@ (80039e4 <UART_SetConfig+0x2d4>)
 80038f6:	fba3 2301 	umull	r2, r3, r3, r1
 80038fa:	095b      	lsrs	r3, r3, #5
 80038fc:	2264      	movs	r2, #100	@ 0x64
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	1acb      	subs	r3, r1, r3
 8003904:	00db      	lsls	r3, r3, #3
 8003906:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800390a:	4b36      	ldr	r3, [pc, #216]	@ (80039e4 <UART_SetConfig+0x2d4>)
 800390c:	fba3 2302 	umull	r2, r3, r3, r2
 8003910:	095b      	lsrs	r3, r3, #5
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003918:	441c      	add	r4, r3
 800391a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800391e:	2200      	movs	r2, #0
 8003920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003924:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800392c:	4642      	mov	r2, r8
 800392e:	464b      	mov	r3, r9
 8003930:	1891      	adds	r1, r2, r2
 8003932:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003934:	415b      	adcs	r3, r3
 8003936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800393c:	4641      	mov	r1, r8
 800393e:	1851      	adds	r1, r2, r1
 8003940:	6339      	str	r1, [r7, #48]	@ 0x30
 8003942:	4649      	mov	r1, r9
 8003944:	414b      	adcs	r3, r1
 8003946:	637b      	str	r3, [r7, #52]	@ 0x34
 8003948:	f04f 0200 	mov.w	r2, #0
 800394c:	f04f 0300 	mov.w	r3, #0
 8003950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003954:	4659      	mov	r1, fp
 8003956:	00cb      	lsls	r3, r1, #3
 8003958:	4651      	mov	r1, sl
 800395a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800395e:	4651      	mov	r1, sl
 8003960:	00ca      	lsls	r2, r1, #3
 8003962:	4610      	mov	r0, r2
 8003964:	4619      	mov	r1, r3
 8003966:	4603      	mov	r3, r0
 8003968:	4642      	mov	r2, r8
 800396a:	189b      	adds	r3, r3, r2
 800396c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003970:	464b      	mov	r3, r9
 8003972:	460a      	mov	r2, r1
 8003974:	eb42 0303 	adc.w	r3, r2, r3
 8003978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800397c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003988:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800398c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003990:	460b      	mov	r3, r1
 8003992:	18db      	adds	r3, r3, r3
 8003994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003996:	4613      	mov	r3, r2
 8003998:	eb42 0303 	adc.w	r3, r2, r3
 800399c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800399e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80039a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80039a6:	f7fc fc13 	bl	80001d0 <__aeabi_uldivmod>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4b0d      	ldr	r3, [pc, #52]	@ (80039e4 <UART_SetConfig+0x2d4>)
 80039b0:	fba3 1302 	umull	r1, r3, r3, r2
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	2164      	movs	r1, #100	@ 0x64
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	00db      	lsls	r3, r3, #3
 80039c0:	3332      	adds	r3, #50	@ 0x32
 80039c2:	4a08      	ldr	r2, [pc, #32]	@ (80039e4 <UART_SetConfig+0x2d4>)
 80039c4:	fba2 2303 	umull	r2, r3, r2, r3
 80039c8:	095b      	lsrs	r3, r3, #5
 80039ca:	f003 0207 	and.w	r2, r3, #7
 80039ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4422      	add	r2, r4
 80039d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80039d8:	e106      	b.n	8003be8 <UART_SetConfig+0x4d8>
 80039da:	bf00      	nop
 80039dc:	40011000 	.word	0x40011000
 80039e0:	40011400 	.word	0x40011400
 80039e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80039e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80039ec:	2200      	movs	r2, #0
 80039ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80039f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80039f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80039fa:	4642      	mov	r2, r8
 80039fc:	464b      	mov	r3, r9
 80039fe:	1891      	adds	r1, r2, r2
 8003a00:	6239      	str	r1, [r7, #32]
 8003a02:	415b      	adcs	r3, r3
 8003a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003a0a:	4641      	mov	r1, r8
 8003a0c:	1854      	adds	r4, r2, r1
 8003a0e:	4649      	mov	r1, r9
 8003a10:	eb43 0501 	adc.w	r5, r3, r1
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	00eb      	lsls	r3, r5, #3
 8003a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a22:	00e2      	lsls	r2, r4, #3
 8003a24:	4614      	mov	r4, r2
 8003a26:	461d      	mov	r5, r3
 8003a28:	4643      	mov	r3, r8
 8003a2a:	18e3      	adds	r3, r4, r3
 8003a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003a30:	464b      	mov	r3, r9
 8003a32:	eb45 0303 	adc.w	r3, r5, r3
 8003a36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	2200      	movs	r2, #0
 8003a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003a46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003a4a:	f04f 0200 	mov.w	r2, #0
 8003a4e:	f04f 0300 	mov.w	r3, #0
 8003a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003a56:	4629      	mov	r1, r5
 8003a58:	008b      	lsls	r3, r1, #2
 8003a5a:	4621      	mov	r1, r4
 8003a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003a60:	4621      	mov	r1, r4
 8003a62:	008a      	lsls	r2, r1, #2
 8003a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003a68:	f7fc fbb2 	bl	80001d0 <__aeabi_uldivmod>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	460b      	mov	r3, r1
 8003a70:	4b60      	ldr	r3, [pc, #384]	@ (8003bf4 <UART_SetConfig+0x4e4>)
 8003a72:	fba3 2302 	umull	r2, r3, r3, r2
 8003a76:	095b      	lsrs	r3, r3, #5
 8003a78:	011c      	lsls	r4, r3, #4
 8003a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003a84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003a8c:	4642      	mov	r2, r8
 8003a8e:	464b      	mov	r3, r9
 8003a90:	1891      	adds	r1, r2, r2
 8003a92:	61b9      	str	r1, [r7, #24]
 8003a94:	415b      	adcs	r3, r3
 8003a96:	61fb      	str	r3, [r7, #28]
 8003a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	1851      	adds	r1, r2, r1
 8003aa0:	6139      	str	r1, [r7, #16]
 8003aa2:	4649      	mov	r1, r9
 8003aa4:	414b      	adcs	r3, r1
 8003aa6:	617b      	str	r3, [r7, #20]
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ab4:	4659      	mov	r1, fp
 8003ab6:	00cb      	lsls	r3, r1, #3
 8003ab8:	4651      	mov	r1, sl
 8003aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003abe:	4651      	mov	r1, sl
 8003ac0:	00ca      	lsls	r2, r1, #3
 8003ac2:	4610      	mov	r0, r2
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	4642      	mov	r2, r8
 8003aca:	189b      	adds	r3, r3, r2
 8003acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003ad0:	464b      	mov	r3, r9
 8003ad2:	460a      	mov	r2, r1
 8003ad4:	eb42 0303 	adc.w	r3, r2, r3
 8003ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003ae6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003ae8:	f04f 0200 	mov.w	r2, #0
 8003aec:	f04f 0300 	mov.w	r3, #0
 8003af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003af4:	4649      	mov	r1, r9
 8003af6:	008b      	lsls	r3, r1, #2
 8003af8:	4641      	mov	r1, r8
 8003afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003afe:	4641      	mov	r1, r8
 8003b00:	008a      	lsls	r2, r1, #2
 8003b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003b06:	f7fc fb63 	bl	80001d0 <__aeabi_uldivmod>
 8003b0a:	4602      	mov	r2, r0
 8003b0c:	460b      	mov	r3, r1
 8003b0e:	4611      	mov	r1, r2
 8003b10:	4b38      	ldr	r3, [pc, #224]	@ (8003bf4 <UART_SetConfig+0x4e4>)
 8003b12:	fba3 2301 	umull	r2, r3, r3, r1
 8003b16:	095b      	lsrs	r3, r3, #5
 8003b18:	2264      	movs	r2, #100	@ 0x64
 8003b1a:	fb02 f303 	mul.w	r3, r2, r3
 8003b1e:	1acb      	subs	r3, r1, r3
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	3332      	adds	r3, #50	@ 0x32
 8003b24:	4a33      	ldr	r2, [pc, #204]	@ (8003bf4 <UART_SetConfig+0x4e4>)
 8003b26:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2a:	095b      	lsrs	r3, r3, #5
 8003b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003b30:	441c      	add	r4, r3
 8003b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b36:	2200      	movs	r2, #0
 8003b38:	673b      	str	r3, [r7, #112]	@ 0x70
 8003b3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003b40:	4642      	mov	r2, r8
 8003b42:	464b      	mov	r3, r9
 8003b44:	1891      	adds	r1, r2, r2
 8003b46:	60b9      	str	r1, [r7, #8]
 8003b48:	415b      	adcs	r3, r3
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b50:	4641      	mov	r1, r8
 8003b52:	1851      	adds	r1, r2, r1
 8003b54:	6039      	str	r1, [r7, #0]
 8003b56:	4649      	mov	r1, r9
 8003b58:	414b      	adcs	r3, r1
 8003b5a:	607b      	str	r3, [r7, #4]
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	f04f 0300 	mov.w	r3, #0
 8003b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003b68:	4659      	mov	r1, fp
 8003b6a:	00cb      	lsls	r3, r1, #3
 8003b6c:	4651      	mov	r1, sl
 8003b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003b72:	4651      	mov	r1, sl
 8003b74:	00ca      	lsls	r2, r1, #3
 8003b76:	4610      	mov	r0, r2
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	189b      	adds	r3, r3, r2
 8003b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003b82:	464b      	mov	r3, r9
 8003b84:	460a      	mov	r2, r1
 8003b86:	eb42 0303 	adc.w	r3, r2, r3
 8003b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	663b      	str	r3, [r7, #96]	@ 0x60
 8003b96:	667a      	str	r2, [r7, #100]	@ 0x64
 8003b98:	f04f 0200 	mov.w	r2, #0
 8003b9c:	f04f 0300 	mov.w	r3, #0
 8003ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ba4:	4649      	mov	r1, r9
 8003ba6:	008b      	lsls	r3, r1, #2
 8003ba8:	4641      	mov	r1, r8
 8003baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003bae:	4641      	mov	r1, r8
 8003bb0:	008a      	lsls	r2, r1, #2
 8003bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003bb6:	f7fc fb0b 	bl	80001d0 <__aeabi_uldivmod>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	460b      	mov	r3, r1
 8003bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8003bf4 <UART_SetConfig+0x4e4>)
 8003bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8003bc4:	095b      	lsrs	r3, r3, #5
 8003bc6:	2164      	movs	r1, #100	@ 0x64
 8003bc8:	fb01 f303 	mul.w	r3, r1, r3
 8003bcc:	1ad3      	subs	r3, r2, r3
 8003bce:	011b      	lsls	r3, r3, #4
 8003bd0:	3332      	adds	r3, #50	@ 0x32
 8003bd2:	4a08      	ldr	r2, [pc, #32]	@ (8003bf4 <UART_SetConfig+0x4e4>)
 8003bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8003bd8:	095b      	lsrs	r3, r3, #5
 8003bda:	f003 020f 	and.w	r2, r3, #15
 8003bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4422      	add	r2, r4
 8003be6:	609a      	str	r2, [r3, #8]
}
 8003be8:	bf00      	nop
 8003bea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003bf4:	51eb851f 	.word	0x51eb851f

08003bf8 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b083      	sub	sp, #12
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f103 0208 	add.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	f103 0208 	add.w	r2, r3, #8
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	f103 0208 	add.w	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c2c:	bf00      	nop
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b083      	sub	sp, #12
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2200      	movs	r2, #0
 8003c44:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c46:	bf00      	nop
 8003c48:	370c      	adds	r7, #12
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c50:	4770      	bx	lr

08003c52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8003c52:	b480      	push	{r7}
 8003c54:	b085      	sub	sp, #20
 8003c56:	af00      	add	r7, sp, #0
 8003c58:	6078      	str	r0, [r7, #4]
 8003c5a:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68fa      	ldr	r2, [r7, #12]
 8003c66:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	689a      	ldr	r2, [r3, #8]
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	683a      	ldr	r2, [r7, #0]
 8003c76:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	683a      	ldr	r2, [r7, #0]
 8003c7c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	687a      	ldr	r2, [r7, #4]
 8003c82:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	1c5a      	adds	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	601a      	str	r2, [r3, #0]
}
 8003c8e:	bf00      	nop
 8003c90:	3714      	adds	r7, #20
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb0:	d103      	bne.n	8003cba <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	691b      	ldr	r3, [r3, #16]
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	e00c      	b.n	8003cd4 <vListInsert+0x3a>
        *   4) Using a queue or semaphore before it has been initialised or
        *      before the scheduler has been started (are interrupts firing
        *      before vTaskStartScheduler() has been called?).
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3308      	adds	r3, #8
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	e002      	b.n	8003cc8 <vListInsert+0x2e>
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	685b      	ldr	r3, [r3, #4]
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	68ba      	ldr	r2, [r7, #8]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	d2f6      	bcs.n	8003cc2 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	685a      	ldr	r2, [r3, #4]
 8003cd8:	683b      	ldr	r3, [r7, #0]
 8003cda:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685b      	ldr	r3, [r3, #4]
 8003ce0:	683a      	ldr	r2, [r7, #0]
 8003ce2:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	68fa      	ldr	r2, [r7, #12]
 8003ce8:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	683a      	ldr	r2, [r7, #0]
 8003cee:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	601a      	str	r2, [r3, #0]
}
 8003d00:	bf00      	nop
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	b085      	sub	sp, #20
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	691b      	ldr	r3, [r3, #16]
 8003d18:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	685b      	ldr	r3, [r3, #4]
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	6892      	ldr	r2, [r2, #8]
 8003d22:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	6852      	ldr	r2, [r2, #4]
 8003d2c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	687a      	ldr	r2, [r7, #4]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d103      	bne.n	8003d40 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	689a      	ldr	r2, [r3, #8]
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	1e5a      	subs	r2, r3, #1
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	3714      	adds	r7, #20
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr

08003d60 <xQueueGenericReset>:
    taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b084      	sub	sp, #16
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
    Queue_t * const pxQueue = xQueue;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	60fb      	str	r3, [r7, #12]

    configASSERT( pxQueue );
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d10b      	bne.n	8003d8c <xQueueGenericReset+0x2c>
        __asm volatile
 8003d74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d78:	f383 8811 	msr	BASEPRI, r3
 8003d7c:	f3bf 8f6f 	isb	sy
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	60bb      	str	r3, [r7, #8]
    }
 8003d86:	bf00      	nop
 8003d88:	bf00      	nop
 8003d8a:	e7fd      	b.n	8003d88 <xQueueGenericReset+0x28>

    taskENTER_CRITICAL();
 8003d8c:	f002 f93e 	bl	800600c <vPortEnterCritical>
    {
        pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d98:	68f9      	ldr	r1, [r7, #12]
 8003d9a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	441a      	add	r2, r3
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	609a      	str	r2, [r3, #8]
        pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	2200      	movs	r2, #0
 8003daa:	639a      	str	r2, [r3, #56]	@ 0x38
        pxQueue->pcWriteTo = pxQueue->pcHead;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681a      	ldr	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	605a      	str	r2, [r3, #4]
        pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	3b01      	subs	r3, #1
 8003dbe:	68f9      	ldr	r1, [r7, #12]
 8003dc0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003dc2:	fb01 f303 	mul.w	r3, r1, r3
 8003dc6:	441a      	add	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	60da      	str	r2, [r3, #12]
        pxQueue->cRxLock = queueUNLOCKED;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	22ff      	movs	r2, #255	@ 0xff
 8003dd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
        pxQueue->cTxLock = queueUNLOCKED;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	22ff      	movs	r2, #255	@ 0xff
 8003dd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

        if( xNewQueue == pdFALSE )
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d114      	bne.n	8003e0c <xQueueGenericReset+0xac>
            /* If there are tasks blocked waiting to read from the queue, then
             * the tasks will remain blocked as after this function exits the queue
             * will still be empty.  If there are tasks blocked waiting to write to
             * the queue, then one should be unblocked as after this function exits
             * it will be possible to write to it. */
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	691b      	ldr	r3, [r3, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d01a      	beq.n	8003e20 <xQueueGenericReset+0xc0>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3310      	adds	r3, #16
 8003dee:	4618      	mov	r0, r3
 8003df0:	f001 f898 	bl	8004f24 <xTaskRemoveFromEventList>
 8003df4:	4603      	mov	r3, r0
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d012      	beq.n	8003e20 <xQueueGenericReset+0xc0>
                {
                    queueYIELD_IF_USING_PREEMPTION();
 8003dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8003e30 <xQueueGenericReset+0xd0>)
 8003dfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e00:	601a      	str	r2, [r3, #0]
 8003e02:	f3bf 8f4f 	dsb	sy
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	e009      	b.n	8003e20 <xQueueGenericReset+0xc0>
            }
        }
        else
        {
            /* Ensure the event queues start in the correct state. */
            vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	3310      	adds	r3, #16
 8003e10:	4618      	mov	r0, r3
 8003e12:	f7ff fef1 	bl	8003bf8 <vListInitialise>
            vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	3324      	adds	r3, #36	@ 0x24
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff feec 	bl	8003bf8 <vListInitialise>
        }
    }
    taskEXIT_CRITICAL();
 8003e20:	f002 f926 	bl	8006070 <vPortExitCritical>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return pdPASS;
 8003e24:	2301      	movs	r3, #1
}
 8003e26:	4618      	mov	r0, r3
 8003e28:	3710      	adds	r7, #16
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	e000ed04 	.word	0xe000ed04

08003e34 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b08c      	sub	sp, #48	@ 0x30
 8003e38:	af02      	add	r7, sp, #8
 8003e3a:	60f8      	str	r0, [r7, #12]
 8003e3c:	60b9      	str	r1, [r7, #8]
 8003e3e:	4613      	mov	r3, r2
 8003e40:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue;
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d10b      	bne.n	8003e60 <xQueueGenericCreate+0x2c>
        __asm volatile
 8003e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4c:	f383 8811 	msr	BASEPRI, r3
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	f3bf 8f4f 	dsb	sy
 8003e58:	61bb      	str	r3, [r7, #24]
    }
 8003e5a:	bf00      	nop
 8003e5c:	bf00      	nop
 8003e5e:	e7fd      	b.n	8003e5c <xQueueGenericCreate+0x28>

        /* Allocate enough space to hold the maximum number of items that
         * can be in the queue at any time.  It is valid for uxItemSize to be
         * zero in the case the queue is used as a semaphore. */
        xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	68ba      	ldr	r2, [r7, #8]
 8003e64:	fb02 f303 	mul.w	r3, r2, r3
 8003e68:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Check for multiplication overflow. */
        configASSERT( ( uxItemSize == 0 ) || ( uxQueueLength == ( xQueueSizeInBytes / uxItemSize ) ) );
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d006      	beq.n	8003e7e <xQueueGenericCreate+0x4a>
 8003e70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e78:	68fa      	ldr	r2, [r7, #12]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d101      	bne.n	8003e82 <xQueueGenericCreate+0x4e>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e000      	b.n	8003e84 <xQueueGenericCreate+0x50>
 8003e82:	2300      	movs	r3, #0
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d10b      	bne.n	8003ea0 <xQueueGenericCreate+0x6c>
        __asm volatile
 8003e88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e8c:	f383 8811 	msr	BASEPRI, r3
 8003e90:	f3bf 8f6f 	isb	sy
 8003e94:	f3bf 8f4f 	dsb	sy
 8003e98:	617b      	str	r3, [r7, #20]
    }
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	e7fd      	b.n	8003e9c <xQueueGenericCreate+0x68>

        /* Check for addition overflow. */
        configASSERT( ( sizeof( Queue_t ) + xQueueSizeInBytes ) >  xQueueSizeInBytes );
 8003ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea2:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8003ea6:	d90b      	bls.n	8003ec0 <xQueueGenericCreate+0x8c>
        __asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	613b      	str	r3, [r7, #16]
    }
 8003eba:	bf00      	nop
 8003ebc:	bf00      	nop
 8003ebe:	e7fd      	b.n	8003ebc <xQueueGenericCreate+0x88>
         * alignment requirements of the Queue_t structure - which in this case
         * is an int8_t *.  Therefore, whenever the stack alignment requirements
         * are greater than or equal to the pointer to char requirements the cast
         * is safe.  In other cases alignment requirements are not strict (one or
         * two bytes). */
        pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ec2:	3350      	adds	r3, #80	@ 0x50
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f002 f9cb 	bl	8006260 <pvPortMalloc>
 8003eca:	6238      	str	r0, [r7, #32]

        if( pxNewQueue != NULL )
 8003ecc:	6a3b      	ldr	r3, [r7, #32]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d00d      	beq.n	8003eee <xQueueGenericCreate+0xba>
        {
            /* Jump past the queue structure to find the location of the queue
             * storage area. */
            pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003ed2:	6a3b      	ldr	r3, [r7, #32]
 8003ed4:	61fb      	str	r3, [r7, #28]
            pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003ed6:	69fb      	ldr	r3, [r7, #28]
 8003ed8:	3350      	adds	r3, #80	@ 0x50
 8003eda:	61fb      	str	r3, [r7, #28]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
            #endif /* configSUPPORT_STATIC_ALLOCATION */

            prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003edc:	79fa      	ldrb	r2, [r7, #7]
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	9300      	str	r3, [sp, #0]
 8003ee2:	4613      	mov	r3, r2
 8003ee4:	69fa      	ldr	r2, [r7, #28]
 8003ee6:	68b9      	ldr	r1, [r7, #8]
 8003ee8:	68f8      	ldr	r0, [r7, #12]
 8003eea:	f000 f805 	bl	8003ef8 <prvInitialiseNewQueue>
        {
            traceQUEUE_CREATE_FAILED( ucQueueType );
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8003eee:	6a3b      	ldr	r3, [r7, #32]
    }
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3728      	adds	r7, #40	@ 0x28
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}

08003ef8 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b084      	sub	sp, #16
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
 8003f04:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	601a      	str	r2, [r3, #0]
 8003f12:	e002      	b.n	8003f1a <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	68ba      	ldr	r2, [r7, #8]
 8003f24:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003f26:	2101      	movs	r1, #1
 8003f28:	69b8      	ldr	r0, [r7, #24]
 8003f2a:	f7ff ff19 	bl	8003d60 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
        {
            pxNewQueue->ucQueueType = ucQueueType;
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	78fa      	ldrb	r2, [r7, #3]
 8003f32:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            pxNewQueue->pxQueueSetContainer = NULL;
        }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8003f36:	bf00      	nop
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}
	...

08003f40 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b08e      	sub	sp, #56	@ 0x38
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]
 8003f4c:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	637b      	str	r3, [r7, #52]	@ 0x34
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	633b      	str	r3, [r7, #48]	@ 0x30

    configASSERT( pxQueue );
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d10b      	bne.n	8003f74 <xQueueGenericSend+0x34>
        __asm volatile
 8003f5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f60:	f383 8811 	msr	BASEPRI, r3
 8003f64:	f3bf 8f6f 	isb	sy
 8003f68:	f3bf 8f4f 	dsb	sy
 8003f6c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003f6e:	bf00      	nop
 8003f70:	bf00      	nop
 8003f72:	e7fd      	b.n	8003f70 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d103      	bne.n	8003f82 <xQueueGenericSend+0x42>
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <xQueueGenericSend+0x46>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <xQueueGenericSend+0x48>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10b      	bne.n	8003fa4 <xQueueGenericSend+0x64>
        __asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003f9e:	bf00      	nop
 8003fa0:	bf00      	nop
 8003fa2:	e7fd      	b.n	8003fa0 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	2b02      	cmp	r3, #2
 8003fa8:	d103      	bne.n	8003fb2 <xQueueGenericSend+0x72>
 8003faa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003fac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d101      	bne.n	8003fb6 <xQueueGenericSend+0x76>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <xQueueGenericSend+0x78>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10b      	bne.n	8003fd4 <xQueueGenericSend+0x94>
        __asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	623b      	str	r3, [r7, #32]
    }
 8003fce:	bf00      	nop
 8003fd0:	bf00      	nop
 8003fd2:	e7fd      	b.n	8003fd0 <xQueueGenericSend+0x90>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fd4:	f001 f946 	bl	8005264 <xTaskGetSchedulerState>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d102      	bne.n	8003fe4 <xQueueGenericSend+0xa4>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d101      	bne.n	8003fe8 <xQueueGenericSend+0xa8>
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e000      	b.n	8003fea <xQueueGenericSend+0xaa>
 8003fe8:	2300      	movs	r3, #0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d10b      	bne.n	8004006 <xQueueGenericSend+0xc6>
        __asm volatile
 8003fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff2:	f383 8811 	msr	BASEPRI, r3
 8003ff6:	f3bf 8f6f 	isb	sy
 8003ffa:	f3bf 8f4f 	dsb	sy
 8003ffe:	61fb      	str	r3, [r7, #28]
    }
 8004000:	bf00      	nop
 8004002:	bf00      	nop
 8004004:	e7fd      	b.n	8004002 <xQueueGenericSend+0xc2>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004006:	f002 f801 	bl	800600c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800400a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800400c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800400e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004012:	429a      	cmp	r2, r3
 8004014:	d302      	bcc.n	800401c <xQueueGenericSend+0xdc>
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	2b02      	cmp	r3, #2
 800401a:	d129      	bne.n	8004070 <xQueueGenericSend+0x130>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	68b9      	ldr	r1, [r7, #8]
 8004020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004022:	f000 fa1f 	bl	8004464 <prvCopyDataToQueue>
 8004026:	62f8      	str	r0, [r7, #44]	@ 0x2c

                        /* If there was a task waiting for data to arrive on the
                         * queue then unblock it now. */
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004028:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800402a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800402c:	2b00      	cmp	r3, #0
 800402e:	d010      	beq.n	8004052 <xQueueGenericSend+0x112>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004030:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004032:	3324      	adds	r3, #36	@ 0x24
 8004034:	4618      	mov	r0, r3
 8004036:	f000 ff75 	bl	8004f24 <xTaskRemoveFromEventList>
 800403a:	4603      	mov	r3, r0
 800403c:	2b00      	cmp	r3, #0
 800403e:	d013      	beq.n	8004068 <xQueueGenericSend+0x128>
                            {
                                /* The unblocked task has a priority higher than
                                 * our own so yield immediately.  Yes it is ok to do
                                 * this from within the critical section - the kernel
                                 * takes care of that. */
                                queueYIELD_IF_USING_PREEMPTION();
 8004040:	4b3f      	ldr	r3, [pc, #252]	@ (8004140 <xQueueGenericSend+0x200>)
 8004042:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004046:	601a      	str	r2, [r3, #0]
 8004048:	f3bf 8f4f 	dsb	sy
 800404c:	f3bf 8f6f 	isb	sy
 8004050:	e00a      	b.n	8004068 <xQueueGenericSend+0x128>
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }
                        }
                        else if( xYieldRequired != pdFALSE )
 8004052:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004054:	2b00      	cmp	r3, #0
 8004056:	d007      	beq.n	8004068 <xQueueGenericSend+0x128>
                        {
                            /* This path is a special case that will only get
                             * executed if the task was holding multiple mutexes and
                             * the mutexes were given back in an order that is
                             * different to that in which they were taken. */
                            queueYIELD_IF_USING_PREEMPTION();
 8004058:	4b39      	ldr	r3, [pc, #228]	@ (8004140 <xQueueGenericSend+0x200>)
 800405a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800405e:	601a      	str	r2, [r3, #0]
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	f3bf 8f6f 	isb	sy
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8004068:	f002 f802 	bl	8006070 <vPortExitCritical>
                return pdPASS;
 800406c:	2301      	movs	r3, #1
 800406e:	e063      	b.n	8004138 <xQueueGenericSend+0x1f8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d103      	bne.n	800407e <xQueueGenericSend+0x13e>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8004076:	f001 fffb 	bl	8006070 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 800407a:	2300      	movs	r3, #0
 800407c:	e05c      	b.n	8004138 <xQueueGenericSend+0x1f8>
                }
                else if( xEntryTimeSet == pdFALSE )
 800407e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004080:	2b00      	cmp	r3, #0
 8004082:	d106      	bne.n	8004092 <xQueueGenericSend+0x152>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004084:	f107 0314 	add.w	r3, r7, #20
 8004088:	4618      	mov	r0, r3
 800408a:	f000 ffaf 	bl	8004fec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 800408e:	2301      	movs	r3, #1
 8004090:	637b      	str	r3, [r7, #52]	@ 0x34
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8004092:	f001 ffed 	bl	8006070 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8004096:	f000 fd21 	bl	8004adc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800409a:	f001 ffb7 	bl	800600c <vPortEnterCritical>
 800409e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80040a4:	b25b      	sxtb	r3, r3
 80040a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040aa:	d103      	bne.n	80040b4 <xQueueGenericSend+0x174>
 80040ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80040b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040b6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80040ba:	b25b      	sxtb	r3, r3
 80040bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040c0:	d103      	bne.n	80040ca <xQueueGenericSend+0x18a>
 80040c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c4:	2200      	movs	r2, #0
 80040c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80040ca:	f001 ffd1 	bl	8006070 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040ce:	1d3a      	adds	r2, r7, #4
 80040d0:	f107 0314 	add.w	r3, r7, #20
 80040d4:	4611      	mov	r1, r2
 80040d6:	4618      	mov	r0, r3
 80040d8:	f000 ff9e 	bl	8005018 <xTaskCheckForTimeOut>
 80040dc:	4603      	mov	r3, r0
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d124      	bne.n	800412c <xQueueGenericSend+0x1ec>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040e2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040e4:	f000 fab6 	bl	8004654 <prvIsQueueFull>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d018      	beq.n	8004120 <xQueueGenericSend+0x1e0>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f0:	3310      	adds	r3, #16
 80040f2:	687a      	ldr	r2, [r7, #4]
 80040f4:	4611      	mov	r1, r2
 80040f6:	4618      	mov	r0, r3
 80040f8:	f000 fec2 	bl	8004e80 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list.  It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready last instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80040fc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80040fe:	f000 fa41 	bl	8004584 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in a ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8004102:	f000 fcf9 	bl	8004af8 <xTaskResumeAll>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	f47f af7c 	bne.w	8004006 <xQueueGenericSend+0xc6>
                {
                    portYIELD_WITHIN_API();
 800410e:	4b0c      	ldr	r3, [pc, #48]	@ (8004140 <xQueueGenericSend+0x200>)
 8004110:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	f3bf 8f4f 	dsb	sy
 800411a:	f3bf 8f6f 	isb	sy
 800411e:	e772      	b.n	8004006 <xQueueGenericSend+0xc6>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8004120:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004122:	f000 fa2f 	bl	8004584 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004126:	f000 fce7 	bl	8004af8 <xTaskResumeAll>
 800412a:	e76c      	b.n	8004006 <xQueueGenericSend+0xc6>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 800412c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800412e:	f000 fa29 	bl	8004584 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004132:	f000 fce1 	bl	8004af8 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 8004136:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 8004138:	4618      	mov	r0, r3
 800413a:	3738      	adds	r7, #56	@ 0x38
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	e000ed04 	.word	0xe000ed04

08004144 <xQueueGenericSendFromISR>:

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue,
                                     const void * const pvItemToQueue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const BaseType_t xCopyPosition )
{
 8004144:	b580      	push	{r7, lr}
 8004146:	b090      	sub	sp, #64	@ 0x40
 8004148:	af00      	add	r7, sp, #0
 800414a:	60f8      	str	r0, [r7, #12]
 800414c:	60b9      	str	r1, [r7, #8]
 800414e:	607a      	str	r2, [r7, #4]
 8004150:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn;
    UBaseType_t uxSavedInterruptStatus;
    Queue_t * const pxQueue = xQueue;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	63bb      	str	r3, [r7, #56]	@ 0x38

    configASSERT( pxQueue );
 8004156:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004158:	2b00      	cmp	r3, #0
 800415a:	d10b      	bne.n	8004174 <xQueueGenericSendFromISR+0x30>
        __asm volatile
 800415c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004160:	f383 8811 	msr	BASEPRI, r3
 8004164:	f3bf 8f6f 	isb	sy
 8004168:	f3bf 8f4f 	dsb	sy
 800416c:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 800416e:	bf00      	nop
 8004170:	bf00      	nop
 8004172:	e7fd      	b.n	8004170 <xQueueGenericSendFromISR+0x2c>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d103      	bne.n	8004182 <xQueueGenericSendFromISR+0x3e>
 800417a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800417c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <xQueueGenericSendFromISR+0x42>
 8004182:	2301      	movs	r3, #1
 8004184:	e000      	b.n	8004188 <xQueueGenericSendFromISR+0x44>
 8004186:	2300      	movs	r3, #0
 8004188:	2b00      	cmp	r3, #0
 800418a:	d10b      	bne.n	80041a4 <xQueueGenericSendFromISR+0x60>
        __asm volatile
 800418c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004190:	f383 8811 	msr	BASEPRI, r3
 8004194:	f3bf 8f6f 	isb	sy
 8004198:	f3bf 8f4f 	dsb	sy
 800419c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 800419e:	bf00      	nop
 80041a0:	bf00      	nop
 80041a2:	e7fd      	b.n	80041a0 <xQueueGenericSendFromISR+0x5c>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	2b02      	cmp	r3, #2
 80041a8:	d103      	bne.n	80041b2 <xQueueGenericSendFromISR+0x6e>
 80041aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041ae:	2b01      	cmp	r3, #1
 80041b0:	d101      	bne.n	80041b6 <xQueueGenericSendFromISR+0x72>
 80041b2:	2301      	movs	r3, #1
 80041b4:	e000      	b.n	80041b8 <xQueueGenericSendFromISR+0x74>
 80041b6:	2300      	movs	r3, #0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <xQueueGenericSendFromISR+0x90>
        __asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	623b      	str	r3, [r7, #32]
    }
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <xQueueGenericSendFromISR+0x8c>
     * that have been assigned a priority at or (logically) below the maximum
     * system call interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041d4:	f002 f802 	bl	80061dc <vPortValidateInterruptPriority>

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 80041d8:	f3ef 8211 	mrs	r2, BASEPRI
 80041dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	61fa      	str	r2, [r7, #28]
 80041ee:	61bb      	str	r3, [r7, #24]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 80041f0:	69fb      	ldr	r3, [r7, #28]
    /* Similar to xQueueGenericSend, except without blocking if there is no room
     * in the queue.  Also don't directly wake a task that was blocked on a queue
     * read, instead return a flag to say whether a context switch is required or
     * not (i.e. has a task with a higher priority than us been woken by this
     * post). */
    uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041f2:	637b      	str	r3, [r7, #52]	@ 0x34
    {
        if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80041f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d302      	bcc.n	8004206 <xQueueGenericSendFromISR+0xc2>
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	2b02      	cmp	r3, #2
 8004204:	d13f      	bne.n	8004286 <xQueueGenericSendFromISR+0x142>
        {
            const int8_t cTxLock = pxQueue->cTxLock;
 8004206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004208:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800420c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004210:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004212:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004214:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
             *  semaphore or mutex.  That means prvCopyDataToQueue() cannot result
             *  in a task disinheriting a priority and prvCopyDataToQueue() can be
             *  called here even though the disinherit function does not check if
             *  the scheduler is suspended before accessing the ready lists. */
            ( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004216:	683a      	ldr	r2, [r7, #0]
 8004218:	68b9      	ldr	r1, [r7, #8]
 800421a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800421c:	f000 f922 	bl	8004464 <prvCopyDataToQueue>

            /* The event list is not altered if the queue is locked.  This will
             * be done when the queue is unlocked later. */
            if( cTxLock == queueUNLOCKED )
 8004220:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004228:	d112      	bne.n	8004250 <xQueueGenericSendFromISR+0x10c>
                            }
                        }
                    }
                #else /* configUSE_QUEUE_SETS */
                    {
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800422a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800422c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800422e:	2b00      	cmp	r3, #0
 8004230:	d026      	beq.n	8004280 <xQueueGenericSendFromISR+0x13c>
                        {
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004234:	3324      	adds	r3, #36	@ 0x24
 8004236:	4618      	mov	r0, r3
 8004238:	f000 fe74 	bl	8004f24 <xTaskRemoveFromEventList>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d01e      	beq.n	8004280 <xQueueGenericSendFromISR+0x13c>
                            {
                                /* The task waiting has a higher priority so record that a
                                 * context switch is required. */
                                if( pxHigherPriorityTaskWoken != NULL )
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d01b      	beq.n	8004280 <xQueueGenericSendFromISR+0x13c>
                                {
                                    *pxHigherPriorityTaskWoken = pdTRUE;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	e017      	b.n	8004280 <xQueueGenericSendFromISR+0x13c>
            }
            else
            {
                /* Increment the lock count so the task that unlocks the queue
                 * knows that data was posted while it was locked. */
                configASSERT( cTxLock != queueINT8_MAX );
 8004250:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004254:	2b7f      	cmp	r3, #127	@ 0x7f
 8004256:	d10b      	bne.n	8004270 <xQueueGenericSendFromISR+0x12c>
        __asm volatile
 8004258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800425c:	f383 8811 	msr	BASEPRI, r3
 8004260:	f3bf 8f6f 	isb	sy
 8004264:	f3bf 8f4f 	dsb	sy
 8004268:	617b      	str	r3, [r7, #20]
    }
 800426a:	bf00      	nop
 800426c:	bf00      	nop
 800426e:	e7fd      	b.n	800426c <xQueueGenericSendFromISR+0x128>

                pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004270:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004274:	3301      	adds	r3, #1
 8004276:	b2db      	uxtb	r3, r3
 8004278:	b25a      	sxtb	r2, r3
 800427a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800427c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
            }

            xReturn = pdPASS;
 8004280:	2301      	movs	r3, #1
 8004282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
 8004284:	e001      	b.n	800428a <xQueueGenericSendFromISR+0x146>
        }
        else
        {
            traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
            xReturn = errQUEUE_FULL;
 8004286:	2300      	movs	r3, #0
 8004288:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800428a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428c:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004294:	bf00      	nop
        }
    }
    portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8004296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004298:	4618      	mov	r0, r3
 800429a:	3740      	adds	r7, #64	@ 0x40
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08c      	sub	sp, #48	@ 0x30
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80042ac:	2300      	movs	r3, #0
 80042ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80042b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d10b      	bne.n	80042d2 <xQueueReceive+0x32>
        __asm volatile
 80042ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042be:	f383 8811 	msr	BASEPRI, r3
 80042c2:	f3bf 8f6f 	isb	sy
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	623b      	str	r3, [r7, #32]
    }
 80042cc:	bf00      	nop
 80042ce:	bf00      	nop
 80042d0:	e7fd      	b.n	80042ce <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80042d2:	68bb      	ldr	r3, [r7, #8]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d103      	bne.n	80042e0 <xQueueReceive+0x40>
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d101      	bne.n	80042e4 <xQueueReceive+0x44>
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <xQueueReceive+0x46>
 80042e4:	2300      	movs	r3, #0
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10b      	bne.n	8004302 <xQueueReceive+0x62>
        __asm volatile
 80042ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042ee:	f383 8811 	msr	BASEPRI, r3
 80042f2:	f3bf 8f6f 	isb	sy
 80042f6:	f3bf 8f4f 	dsb	sy
 80042fa:	61fb      	str	r3, [r7, #28]
    }
 80042fc:	bf00      	nop
 80042fe:	bf00      	nop
 8004300:	e7fd      	b.n	80042fe <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004302:	f000 ffaf 	bl	8005264 <xTaskGetSchedulerState>
 8004306:	4603      	mov	r3, r0
 8004308:	2b00      	cmp	r3, #0
 800430a:	d102      	bne.n	8004312 <xQueueReceive+0x72>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d101      	bne.n	8004316 <xQueueReceive+0x76>
 8004312:	2301      	movs	r3, #1
 8004314:	e000      	b.n	8004318 <xQueueReceive+0x78>
 8004316:	2300      	movs	r3, #0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10b      	bne.n	8004334 <xQueueReceive+0x94>
        __asm volatile
 800431c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004320:	f383 8811 	msr	BASEPRI, r3
 8004324:	f3bf 8f6f 	isb	sy
 8004328:	f3bf 8f4f 	dsb	sy
 800432c:	61bb      	str	r3, [r7, #24]
    }
 800432e:	bf00      	nop
 8004330:	bf00      	nop
 8004332:	e7fd      	b.n	8004330 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8004334:	f001 fe6a 	bl	800600c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004338:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800433a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800433c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800433e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004340:	2b00      	cmp	r3, #0
 8004342:	d01f      	beq.n	8004384 <xQueueReceive+0xe4>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004344:	68b9      	ldr	r1, [r7, #8]
 8004346:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004348:	f000 f8f6 	bl	8004538 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800434c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800434e:	1e5a      	subs	r2, r3, #1
 8004350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004352:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004356:	691b      	ldr	r3, [r3, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00f      	beq.n	800437c <xQueueReceive+0xdc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800435c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800435e:	3310      	adds	r3, #16
 8004360:	4618      	mov	r0, r3
 8004362:	f000 fddf 	bl	8004f24 <xTaskRemoveFromEventList>
 8004366:	4603      	mov	r3, r0
 8004368:	2b00      	cmp	r3, #0
 800436a:	d007      	beq.n	800437c <xQueueReceive+0xdc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800436c:	4b3c      	ldr	r3, [pc, #240]	@ (8004460 <xQueueReceive+0x1c0>)
 800436e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004372:	601a      	str	r2, [r3, #0]
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800437c:	f001 fe78 	bl	8006070 <vPortExitCritical>
                return pdPASS;
 8004380:	2301      	movs	r3, #1
 8004382:	e069      	b.n	8004458 <xQueueReceive+0x1b8>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d103      	bne.n	8004392 <xQueueReceive+0xf2>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800438a:	f001 fe71 	bl	8006070 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 800438e:	2300      	movs	r3, #0
 8004390:	e062      	b.n	8004458 <xQueueReceive+0x1b8>
                }
                else if( xEntryTimeSet == pdFALSE )
 8004392:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <xQueueReceive+0x106>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004398:	f107 0310 	add.w	r3, r7, #16
 800439c:	4618      	mov	r0, r3
 800439e:	f000 fe25 	bl	8004fec <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80043a2:	2301      	movs	r3, #1
 80043a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80043a6:	f001 fe63 	bl	8006070 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80043aa:	f000 fb97 	bl	8004adc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80043ae:	f001 fe2d 	bl	800600c <vPortEnterCritical>
 80043b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043b8:	b25b      	sxtb	r3, r3
 80043ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043be:	d103      	bne.n	80043c8 <xQueueReceive+0x128>
 80043c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80043c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ca:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80043ce:	b25b      	sxtb	r3, r3
 80043d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d4:	d103      	bne.n	80043de <xQueueReceive+0x13e>
 80043d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80043de:	f001 fe47 	bl	8006070 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80043e2:	1d3a      	adds	r2, r7, #4
 80043e4:	f107 0310 	add.w	r3, r7, #16
 80043e8:	4611      	mov	r1, r2
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fe14 	bl	8005018 <xTaskCheckForTimeOut>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d123      	bne.n	800443e <xQueueReceive+0x19e>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043f6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80043f8:	f000 f916 	bl	8004628 <prvIsQueueEmpty>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d017      	beq.n	8004432 <xQueueReceive+0x192>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004404:	3324      	adds	r3, #36	@ 0x24
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	4611      	mov	r1, r2
 800440a:	4618      	mov	r0, r3
 800440c:	f000 fd38 	bl	8004e80 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004410:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004412:	f000 f8b7 	bl	8004584 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8004416:	f000 fb6f 	bl	8004af8 <xTaskResumeAll>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d189      	bne.n	8004334 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8004420:	4b0f      	ldr	r3, [pc, #60]	@ (8004460 <xQueueReceive+0x1c0>)
 8004422:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004426:	601a      	str	r2, [r3, #0]
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	e780      	b.n	8004334 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8004432:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004434:	f000 f8a6 	bl	8004584 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8004438:	f000 fb5e 	bl	8004af8 <xTaskResumeAll>
 800443c:	e77a      	b.n	8004334 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800443e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004440:	f000 f8a0 	bl	8004584 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8004444:	f000 fb58 	bl	8004af8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004448:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800444a:	f000 f8ed 	bl	8004628 <prvIsQueueEmpty>
 800444e:	4603      	mov	r3, r0
 8004450:	2b00      	cmp	r3, #0
 8004452:	f43f af6f 	beq.w	8004334 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 8004456:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8004458:	4618      	mov	r0, r3
 800445a:	3730      	adds	r7, #48	@ 0x30
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	e000ed04 	.word	0xe000ed04

08004464 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b086      	sub	sp, #24
 8004468:	af00      	add	r7, sp, #0
 800446a:	60f8      	str	r0, [r7, #12]
 800446c:	60b9      	str	r1, [r7, #8]
 800446e:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004478:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447e:	2b00      	cmp	r3, #0
 8004480:	d10d      	bne.n	800449e <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
            {
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d14d      	bne.n	8004526 <prvCopyDataToQueue+0xc2>
                {
                    /* The mutex is no longer being held. */
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	4618      	mov	r0, r3
 8004490:	f000 ff06 	bl	80052a0 <xTaskPriorityDisinherit>
 8004494:	6178      	str	r0, [r7, #20]
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	2200      	movs	r2, #0
 800449a:	609a      	str	r2, [r3, #8]
 800449c:	e043      	b.n	8004526 <prvCopyDataToQueue+0xc2>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d119      	bne.n	80044d8 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	6858      	ldr	r0, [r3, #4]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ac:	461a      	mov	r2, r3
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	f002 f904 	bl	80066bc <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	685a      	ldr	r2, [r3, #4]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044bc:	441a      	add	r2, r3
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	685a      	ldr	r2, [r3, #4]
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d32b      	bcc.n	8004526 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	605a      	str	r2, [r3, #4]
 80044d6:	e026      	b.n	8004526 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68d8      	ldr	r0, [r3, #12]
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e0:	461a      	mov	r2, r3
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	f002 f8ea 	bl	80066bc <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	68da      	ldr	r2, [r3, #12]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044f0:	425b      	negs	r3, r3
 80044f2:	441a      	add	r2, r3
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	68da      	ldr	r2, [r3, #12]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	429a      	cmp	r2, r3
 8004502:	d207      	bcs.n	8004514 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	689a      	ldr	r2, [r3, #8]
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800450c:	425b      	negs	r3, r3
 800450e:	441a      	add	r2, r3
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d105      	bne.n	8004526 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d002      	beq.n	8004526 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8004520:	693b      	ldr	r3, [r7, #16]
 8004522:	3b01      	subs	r3, #1
 8004524:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1c5a      	adds	r2, r3, #1
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 800452e:	697b      	ldr	r3, [r7, #20]
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004546:	2b00      	cmp	r3, #0
 8004548:	d018      	beq.n	800457c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004552:	441a      	add	r2, r3
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68da      	ldr	r2, [r3, #12]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	429a      	cmp	r2, r3
 8004562:	d303      	bcc.n	800456c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681a      	ldr	r2, [r3, #0]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	68d9      	ldr	r1, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004574:	461a      	mov	r2, r3
 8004576:	6838      	ldr	r0, [r7, #0]
 8004578:	f002 f8a0 	bl	80066bc <memcpy>
    }
}
 800457c:	bf00      	nop
 800457e:	3708      	adds	r7, #8
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}

08004584 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004584:	b580      	push	{r7, lr}
 8004586:	b084      	sub	sp, #16
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800458c:	f001 fd3e 	bl	800600c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004596:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8004598:	e011      	b.n	80045be <prvUnlockQueue+0x3a>
                }
            #else /* configUSE_QUEUE_SETS */
                {
                    /* Tasks that are removed from the event list will get added to
                     * the pending ready list as the scheduler is still suspended. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d012      	beq.n	80045c8 <prvUnlockQueue+0x44>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	3324      	adds	r3, #36	@ 0x24
 80045a6:	4618      	mov	r0, r3
 80045a8:	f000 fcbc 	bl	8004f24 <xTaskRemoveFromEventList>
 80045ac:	4603      	mov	r3, r0
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d001      	beq.n	80045b6 <prvUnlockQueue+0x32>
                        {
                            /* The task waiting has a higher priority so record that
                             * a context switch is required. */
                            vTaskMissedYield();
 80045b2:	f000 fd99 	bl	80050e8 <vTaskMissedYield>
                        break;
                    }
                }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80045b6:	7bfb      	ldrb	r3, [r7, #15]
 80045b8:	3b01      	subs	r3, #1
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80045be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	dce9      	bgt.n	800459a <prvUnlockQueue+0x16>
 80045c6:	e000      	b.n	80045ca <prvUnlockQueue+0x46>
                        break;
 80045c8:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	22ff      	movs	r2, #255	@ 0xff
 80045ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80045d2:	f001 fd4d 	bl	8006070 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80045d6:	f001 fd19 	bl	800600c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80045e0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80045e2:	e011      	b.n	8004608 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	691b      	ldr	r3, [r3, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d012      	beq.n	8004612 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	3310      	adds	r3, #16
 80045f0:	4618      	mov	r0, r3
 80045f2:	f000 fc97 	bl	8004f24 <xTaskRemoveFromEventList>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d001      	beq.n	8004600 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80045fc:	f000 fd74 	bl	80050e8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8004600:	7bbb      	ldrb	r3, [r7, #14]
 8004602:	3b01      	subs	r3, #1
 8004604:	b2db      	uxtb	r3, r3
 8004606:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8004608:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800460c:	2b00      	cmp	r3, #0
 800460e:	dce9      	bgt.n	80045e4 <prvUnlockQueue+0x60>
 8004610:	e000      	b.n	8004614 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8004612:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	22ff      	movs	r2, #255	@ 0xff
 8004618:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800461c:	f001 fd28 	bl	8006070 <vPortExitCritical>
}
 8004620:	bf00      	nop
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b084      	sub	sp, #16
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8004630:	f001 fcec 	bl	800600c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004638:	2b00      	cmp	r3, #0
 800463a:	d102      	bne.n	8004642 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800463c:	2301      	movs	r3, #1
 800463e:	60fb      	str	r3, [r7, #12]
 8004640:	e001      	b.n	8004646 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8004642:	2300      	movs	r3, #0
 8004644:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004646:	f001 fd13 	bl	8006070 <vPortExitCritical>

    return xReturn;
 800464a:	68fb      	ldr	r3, [r7, #12]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3710      	adds	r7, #16
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800465c:	f001 fcd6 	bl	800600c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004668:	429a      	cmp	r2, r3
 800466a:	d102      	bne.n	8004672 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 800466c:	2301      	movs	r3, #1
 800466e:	60fb      	str	r3, [r7, #12]
 8004670:	e001      	b.n	8004676 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 8004672:	2300      	movs	r3, #0
 8004674:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8004676:	f001 fcfb 	bl	8006070 <vPortExitCritical>

    return xReturn;
 800467a:	68fb      	ldr	r3, [r7, #12]
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8004684:	b480      	push	{r7}
 8004686:	b085      	sub	sp, #20
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
 800468c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;

        /* See if there is an empty space in the registry.  A NULL name denotes
         * a free slot. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800468e:	2300      	movs	r3, #0
 8004690:	60fb      	str	r3, [r7, #12]
 8004692:	e014      	b.n	80046be <vQueueAddToRegistry+0x3a>
        {
            if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004694:	4a0f      	ldr	r2, [pc, #60]	@ (80046d4 <vQueueAddToRegistry+0x50>)
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d10b      	bne.n	80046b8 <vQueueAddToRegistry+0x34>
            {
                /* Store the information on this queue. */
                xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80046a0:	490c      	ldr	r1, [pc, #48]	@ (80046d4 <vQueueAddToRegistry+0x50>)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	683a      	ldr	r2, [r7, #0]
 80046a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
                xQueueRegistry[ ux ].xHandle = xQueue;
 80046aa:	4a0a      	ldr	r2, [pc, #40]	@ (80046d4 <vQueueAddToRegistry+0x50>)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	00db      	lsls	r3, r3, #3
 80046b0:	4413      	add	r3, r2
 80046b2:	687a      	ldr	r2, [r7, #4]
 80046b4:	605a      	str	r2, [r3, #4]

                traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
                break;
 80046b6:	e006      	b.n	80046c6 <vQueueAddToRegistry+0x42>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	2b07      	cmp	r3, #7
 80046c2:	d9e7      	bls.n	8004694 <vQueueAddToRegistry+0x10>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 80046c4:	bf00      	nop
 80046c6:	bf00      	nop
 80046c8:	3714      	adds	r7, #20
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	2000015c 	.word	0x2000015c

080046d8 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80046d8:	b580      	push	{r7, lr}
 80046da:	b086      	sub	sp, #24
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80046e8:	f001 fc90 	bl	800600c <vPortEnterCritical>
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80046f2:	b25b      	sxtb	r3, r3
 80046f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046f8:	d103      	bne.n	8004702 <vQueueWaitForMessageRestricted+0x2a>
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004708:	b25b      	sxtb	r3, r3
 800470a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470e:	d103      	bne.n	8004718 <vQueueWaitForMessageRestricted+0x40>
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2200      	movs	r2, #0
 8004714:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004718:	f001 fcaa 	bl	8006070 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004720:	2b00      	cmp	r3, #0
 8004722:	d106      	bne.n	8004732 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	3324      	adds	r3, #36	@ 0x24
 8004728:	687a      	ldr	r2, [r7, #4]
 800472a:	68b9      	ldr	r1, [r7, #8]
 800472c:	4618      	mov	r0, r3
 800472e:	f000 fbcd 	bl	8004ecc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8004732:	6978      	ldr	r0, [r7, #20]
 8004734:	f7ff ff26 	bl	8004584 <prvUnlockQueue>
    }
 8004738:	bf00      	nop
 800473a:	3718      	adds	r7, #24
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}

08004740 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8004740:	b580      	push	{r7, lr}
 8004742:	b08c      	sub	sp, #48	@ 0x30
 8004744:	af04      	add	r7, sp, #16
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	603b      	str	r3, [r7, #0]
 800474c:	4613      	mov	r3, r2
 800474e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004750:	88fb      	ldrh	r3, [r7, #6]
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	4618      	mov	r0, r3
 8004756:	f001 fd83 	bl	8006260 <pvPortMalloc>
 800475a:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800475c:	697b      	ldr	r3, [r7, #20]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d00e      	beq.n	8004780 <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004762:	2058      	movs	r0, #88	@ 0x58
 8004764:	f001 fd7c 	bl	8006260 <pvPortMalloc>
 8004768:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d003      	beq.n	8004778 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	631a      	str	r2, [r3, #48]	@ 0x30
 8004776:	e005      	b.n	8004784 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFree( pxStack );
 8004778:	6978      	ldr	r0, [r7, #20]
 800477a:	f001 fe53 	bl	8006424 <vPortFree>
 800477e:	e001      	b.n	8004784 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 8004780:	2300      	movs	r3, #0
 8004782:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d013      	beq.n	80047b2 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800478a:	88fa      	ldrh	r2, [r7, #6]
 800478c:	2300      	movs	r3, #0
 800478e:	9303      	str	r3, [sp, #12]
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	9302      	str	r3, [sp, #8]
 8004794:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004796:	9301      	str	r3, [sp, #4]
 8004798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800479a:	9300      	str	r3, [sp, #0]
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	68b9      	ldr	r1, [r7, #8]
 80047a0:	68f8      	ldr	r0, [r7, #12]
 80047a2:	f000 f80e 	bl	80047c2 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80047a6:	69f8      	ldr	r0, [r7, #28]
 80047a8:	f000 f8a2 	bl	80048f0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80047ac:	2301      	movs	r3, #1
 80047ae:	61bb      	str	r3, [r7, #24]
 80047b0:	e002      	b.n	80047b8 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80047b2:	f04f 33ff 	mov.w	r3, #4294967295
 80047b6:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80047b8:	69bb      	ldr	r3, [r7, #24]
    }
 80047ba:	4618      	mov	r0, r3
 80047bc:	3720      	adds	r7, #32
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}

080047c2 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b088      	sub	sp, #32
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	60f8      	str	r0, [r7, #12]
 80047ca:	60b9      	str	r1, [r7, #8]
 80047cc:	607a      	str	r2, [r7, #4]
 80047ce:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80047d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047d2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	461a      	mov	r2, r3
 80047da:	21a5      	movs	r1, #165	@ 0xa5
 80047dc:	f001 ff42 	bl	8006664 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80047e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80047ea:	3b01      	subs	r3, #1
 80047ec:	009b      	lsls	r3, r3, #2
 80047ee:	4413      	add	r3, r2
 80047f0:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80047f2:	69bb      	ldr	r3, [r7, #24]
 80047f4:	f023 0307 	bic.w	r3, r3, #7
 80047f8:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80047fa:	69bb      	ldr	r3, [r7, #24]
 80047fc:	f003 0307 	and.w	r3, r3, #7
 8004800:	2b00      	cmp	r3, #0
 8004802:	d00b      	beq.n	800481c <prvInitialiseNewTask+0x5a>
        __asm volatile
 8004804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004808:	f383 8811 	msr	BASEPRI, r3
 800480c:	f3bf 8f6f 	isb	sy
 8004810:	f3bf 8f4f 	dsb	sy
 8004814:	617b      	str	r3, [r7, #20]
    }
 8004816:	bf00      	nop
 8004818:	bf00      	nop
 800481a:	e7fd      	b.n	8004818 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d01f      	beq.n	8004862 <prvInitialiseNewTask+0xa0>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004822:	2300      	movs	r3, #0
 8004824:	61fb      	str	r3, [r7, #28]
 8004826:	e012      	b.n	800484e <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	7819      	ldrb	r1, [r3, #0]
 8004830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	4413      	add	r3, r2
 8004836:	3334      	adds	r3, #52	@ 0x34
 8004838:	460a      	mov	r2, r1
 800483a:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800483c:	68ba      	ldr	r2, [r7, #8]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	4413      	add	r3, r2
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d006      	beq.n	8004856 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	3301      	adds	r3, #1
 800484c:	61fb      	str	r3, [r7, #28]
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	2b09      	cmp	r3, #9
 8004852:	d9e9      	bls.n	8004828 <prvInitialiseNewTask+0x66>
 8004854:	e000      	b.n	8004858 <prvInitialiseNewTask+0x96>
            {
                break;
 8004856:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004860:	e003      	b.n	800486a <prvInitialiseNewTask+0xa8>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004864:	2200      	movs	r2, #0
 8004866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    /* This is used as an array index so must ensure it's not too large.  First
     * remove the privilege bit if one is present. */
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800486a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800486c:	2b04      	cmp	r3, #4
 800486e:	d901      	bls.n	8004874 <prvInitialiseNewTask+0xb2>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004870:	2304      	movs	r3, #4
 8004872:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8004874:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004878:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 800487a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800487e:	649a      	str	r2, [r3, #72]	@ 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	2200      	movs	r2, #0
 8004884:	64da      	str	r2, [r3, #76]	@ 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004886:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7ff f9d4 	bl	8003c38 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004890:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004892:	3318      	adds	r3, #24
 8004894:	4618      	mov	r0, r3
 8004896:	f7ff f9cf 	bl	8003c38 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800489a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800489e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a2:	f1c3 0205 	rsb	r2, r3, #5
 80048a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048a8:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80048aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048ac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048ae:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80048b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048b2:	3350      	adds	r3, #80	@ 0x50
 80048b4:	2204      	movs	r2, #4
 80048b6:	2100      	movs	r1, #0
 80048b8:	4618      	mov	r0, r3
 80048ba:	f001 fed3 	bl	8006664 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80048be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048c0:	3354      	adds	r3, #84	@ 0x54
 80048c2:	2201      	movs	r2, #1
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f001 fecc 	bl	8006664 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80048cc:	683a      	ldr	r2, [r7, #0]
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	69b8      	ldr	r0, [r7, #24]
 80048d2:	f001 fa6b 	bl	8005dac <pxPortInitialiseStack>
 80048d6:	4602      	mov	r2, r0
 80048d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048da:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80048dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <prvInitialiseNewTask+0x126>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80048e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048e6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80048e8:	bf00      	nop
 80048ea:	3720      	adds	r7, #32
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}

080048f0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80048f8:	f001 fb88 	bl	800600c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80048fc:	4b2c      	ldr	r3, [pc, #176]	@ (80049b0 <prvAddNewTaskToReadyList+0xc0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	3301      	adds	r3, #1
 8004902:	4a2b      	ldr	r2, [pc, #172]	@ (80049b0 <prvAddNewTaskToReadyList+0xc0>)
 8004904:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8004906:	4b2b      	ldr	r3, [pc, #172]	@ (80049b4 <prvAddNewTaskToReadyList+0xc4>)
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d109      	bne.n	8004922 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800490e:	4a29      	ldr	r2, [pc, #164]	@ (80049b4 <prvAddNewTaskToReadyList+0xc4>)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004914:	4b26      	ldr	r3, [pc, #152]	@ (80049b0 <prvAddNewTaskToReadyList+0xc0>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	2b01      	cmp	r3, #1
 800491a:	d110      	bne.n	800493e <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 800491c:	f000 fc08 	bl	8005130 <prvInitialiseTaskLists>
 8004920:	e00d      	b.n	800493e <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8004922:	4b25      	ldr	r3, [pc, #148]	@ (80049b8 <prvAddNewTaskToReadyList+0xc8>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d109      	bne.n	800493e <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800492a:	4b22      	ldr	r3, [pc, #136]	@ (80049b4 <prvAddNewTaskToReadyList+0xc4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004934:	429a      	cmp	r2, r3
 8004936:	d802      	bhi.n	800493e <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8004938:	4a1e      	ldr	r2, [pc, #120]	@ (80049b4 <prvAddNewTaskToReadyList+0xc4>)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800493e:	4b1f      	ldr	r3, [pc, #124]	@ (80049bc <prvAddNewTaskToReadyList+0xcc>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	3301      	adds	r3, #1
 8004944:	4a1d      	ldr	r2, [pc, #116]	@ (80049bc <prvAddNewTaskToReadyList+0xcc>)
 8004946:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004948:	4b1c      	ldr	r3, [pc, #112]	@ (80049bc <prvAddNewTaskToReadyList+0xcc>)
 800494a:	681a      	ldr	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	641a      	str	r2, [r3, #64]	@ 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004954:	2201      	movs	r2, #1
 8004956:	409a      	lsls	r2, r3
 8004958:	4b19      	ldr	r3, [pc, #100]	@ (80049c0 <prvAddNewTaskToReadyList+0xd0>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4313      	orrs	r3, r2
 800495e:	4a18      	ldr	r2, [pc, #96]	@ (80049c0 <prvAddNewTaskToReadyList+0xd0>)
 8004960:	6013      	str	r3, [r2, #0]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	4613      	mov	r3, r2
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	4413      	add	r3, r2
 800496c:	009b      	lsls	r3, r3, #2
 800496e:	4a15      	ldr	r2, [pc, #84]	@ (80049c4 <prvAddNewTaskToReadyList+0xd4>)
 8004970:	441a      	add	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	3304      	adds	r3, #4
 8004976:	4619      	mov	r1, r3
 8004978:	4610      	mov	r0, r2
 800497a:	f7ff f96a 	bl	8003c52 <vListInsertEnd>

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 800497e:	f001 fb77 	bl	8006070 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8004982:	4b0d      	ldr	r3, [pc, #52]	@ (80049b8 <prvAddNewTaskToReadyList+0xc8>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d00e      	beq.n	80049a8 <prvAddNewTaskToReadyList+0xb8>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800498a:	4b0a      	ldr	r3, [pc, #40]	@ (80049b4 <prvAddNewTaskToReadyList+0xc4>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004994:	429a      	cmp	r2, r3
 8004996:	d207      	bcs.n	80049a8 <prvAddNewTaskToReadyList+0xb8>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8004998:	4b0b      	ldr	r3, [pc, #44]	@ (80049c8 <prvAddNewTaskToReadyList+0xd8>)
 800499a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800499e:	601a      	str	r2, [r3, #0]
 80049a0:	f3bf 8f4f 	dsb	sy
 80049a4:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80049a8:	bf00      	nop
 80049aa:	3708      	adds	r7, #8
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}
 80049b0:	20000274 	.word	0x20000274
 80049b4:	2000019c 	.word	0x2000019c
 80049b8:	20000280 	.word	0x20000280
 80049bc:	20000290 	.word	0x20000290
 80049c0:	2000027c 	.word	0x2000027c
 80049c4:	200001a0 	.word	0x200001a0
 80049c8:	e000ed04 	.word	0xe000ed04

080049cc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80049cc:	b580      	push	{r7, lr}
 80049ce:	b084      	sub	sp, #16
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d018      	beq.n	8004a10 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 80049de:	4b14      	ldr	r3, [pc, #80]	@ (8004a30 <vTaskDelay+0x64>)
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d00b      	beq.n	80049fe <vTaskDelay+0x32>
        __asm volatile
 80049e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ea:	f383 8811 	msr	BASEPRI, r3
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	f3bf 8f4f 	dsb	sy
 80049f6:	60bb      	str	r3, [r7, #8]
    }
 80049f8:	bf00      	nop
 80049fa:	bf00      	nop
 80049fc:	e7fd      	b.n	80049fa <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80049fe:	f000 f86d 	bl	8004adc <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a02:	2100      	movs	r1, #0
 8004a04:	6878      	ldr	r0, [r7, #4]
 8004a06:	f000 fe4d 	bl	80056a4 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8004a0a:	f000 f875 	bl	8004af8 <xTaskResumeAll>
 8004a0e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d107      	bne.n	8004a26 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8004a16:	4b07      	ldr	r3, [pc, #28]	@ (8004a34 <vTaskDelay+0x68>)
 8004a18:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004a1c:	601a      	str	r2, [r3, #0]
 8004a1e:	f3bf 8f4f 	dsb	sy
 8004a22:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8004a26:	bf00      	nop
 8004a28:	3710      	adds	r7, #16
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	bd80      	pop	{r7, pc}
 8004a2e:	bf00      	nop
 8004a30:	2000029c 	.word	0x2000029c
 8004a34:	e000ed04 	.word	0xe000ed04

08004a38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8004a3e:	4b20      	ldr	r3, [pc, #128]	@ (8004ac0 <vTaskStartScheduler+0x88>)
 8004a40:	9301      	str	r3, [sp, #4]
 8004a42:	2300      	movs	r3, #0
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	2300      	movs	r3, #0
 8004a48:	2282      	movs	r2, #130	@ 0x82
 8004a4a:	491e      	ldr	r1, [pc, #120]	@ (8004ac4 <vTaskStartScheduler+0x8c>)
 8004a4c:	481e      	ldr	r0, [pc, #120]	@ (8004ac8 <vTaskStartScheduler+0x90>)
 8004a4e:	f7ff fe77 	bl	8004740 <xTaskCreate>
 8004a52:	60f8      	str	r0, [r7, #12]
        }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
        {
            if( xReturn == pdPASS )
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2b01      	cmp	r3, #1
 8004a58:	d102      	bne.n	8004a60 <vTaskStartScheduler+0x28>
            {
                xReturn = xTimerCreateTimerTask();
 8004a5a:	f000 fe89 	bl	8005770 <xTimerCreateTimerTask>
 8004a5e:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d116      	bne.n	8004a94 <vTaskStartScheduler+0x5c>
        __asm volatile
 8004a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a6a:	f383 8811 	msr	BASEPRI, r3
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	f3bf 8f4f 	dsb	sy
 8004a76:	60bb      	str	r3, [r7, #8]
    }
 8004a78:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8004a7a:	4b14      	ldr	r3, [pc, #80]	@ (8004acc <vTaskStartScheduler+0x94>)
 8004a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a80:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8004a82:	4b13      	ldr	r3, [pc, #76]	@ (8004ad0 <vTaskStartScheduler+0x98>)
 8004a84:	2201      	movs	r2, #1
 8004a86:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004a88:	4b12      	ldr	r3, [pc, #72]	@ (8004ad4 <vTaskStartScheduler+0x9c>)
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 8004a8e:	f001 fa19 	bl	8005ec4 <xPortStartScheduler>
 8004a92:	e00f      	b.n	8004ab4 <vTaskStartScheduler+0x7c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a9a:	d10b      	bne.n	8004ab4 <vTaskStartScheduler+0x7c>
        __asm volatile
 8004a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa0:	f383 8811 	msr	BASEPRI, r3
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	607b      	str	r3, [r7, #4]
    }
 8004aae:	bf00      	nop
 8004ab0:	bf00      	nop
 8004ab2:	e7fd      	b.n	8004ab0 <vTaskStartScheduler+0x78>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8004ab4:	4b08      	ldr	r3, [pc, #32]	@ (8004ad8 <vTaskStartScheduler+0xa0>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
}
 8004ab8:	bf00      	nop
 8004aba:	3710      	adds	r7, #16
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}
 8004ac0:	20000298 	.word	0x20000298
 8004ac4:	08006748 	.word	0x08006748
 8004ac8:	08005101 	.word	0x08005101
 8004acc:	20000294 	.word	0x20000294
 8004ad0:	20000280 	.word	0x20000280
 8004ad4:	20000278 	.word	0x20000278
 8004ad8:	20000014 	.word	0x20000014

08004adc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004adc:	b480      	push	{r7}
 8004ade:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8004ae0:	4b04      	ldr	r3, [pc, #16]	@ (8004af4 <vTaskSuspendAll+0x18>)
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	4a03      	ldr	r2, [pc, #12]	@ (8004af4 <vTaskSuspendAll+0x18>)
 8004ae8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8004aea:	bf00      	nop
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	2000029c 	.word	0x2000029c

08004af8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
    BaseType_t xAlreadyYielded = pdFALSE;
 8004b02:	2300      	movs	r3, #0
 8004b04:	60bb      	str	r3, [r7, #8]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8004b06:	4b42      	ldr	r3, [pc, #264]	@ (8004c10 <xTaskResumeAll+0x118>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10b      	bne.n	8004b26 <xTaskResumeAll+0x2e>
        __asm volatile
 8004b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b12:	f383 8811 	msr	BASEPRI, r3
 8004b16:	f3bf 8f6f 	isb	sy
 8004b1a:	f3bf 8f4f 	dsb	sy
 8004b1e:	603b      	str	r3, [r7, #0]
    }
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	e7fd      	b.n	8004b22 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8004b26:	f001 fa71 	bl	800600c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8004b2a:	4b39      	ldr	r3, [pc, #228]	@ (8004c10 <xTaskResumeAll+0x118>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	4a37      	ldr	r2, [pc, #220]	@ (8004c10 <xTaskResumeAll+0x118>)
 8004b32:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b34:	4b36      	ldr	r3, [pc, #216]	@ (8004c10 <xTaskResumeAll+0x118>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d161      	bne.n	8004c00 <xTaskResumeAll+0x108>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004b3c:	4b35      	ldr	r3, [pc, #212]	@ (8004c14 <xTaskResumeAll+0x11c>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d05d      	beq.n	8004c00 <xTaskResumeAll+0x108>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004b44:	e02e      	b.n	8004ba4 <xTaskResumeAll+0xac>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b46:	4b34      	ldr	r3, [pc, #208]	@ (8004c18 <xTaskResumeAll+0x120>)
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	68db      	ldr	r3, [r3, #12]
 8004b4c:	60fb      	str	r3, [r7, #12]
                    ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	3318      	adds	r3, #24
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7ff f8da 	bl	8003d0c <uxListRemove>
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3304      	adds	r3, #4
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7ff f8d5 	bl	8003d0c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b66:	2201      	movs	r2, #1
 8004b68:	409a      	lsls	r2, r3
 8004b6a:	4b2c      	ldr	r3, [pc, #176]	@ (8004c1c <xTaskResumeAll+0x124>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	4a2a      	ldr	r2, [pc, #168]	@ (8004c1c <xTaskResumeAll+0x124>)
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b78:	4613      	mov	r3, r2
 8004b7a:	009b      	lsls	r3, r3, #2
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4a27      	ldr	r2, [pc, #156]	@ (8004c20 <xTaskResumeAll+0x128>)
 8004b82:	441a      	add	r2, r3
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3304      	adds	r3, #4
 8004b88:	4619      	mov	r1, r3
 8004b8a:	4610      	mov	r0, r2
 8004b8c:	f7ff f861 	bl	8003c52 <vListInsertEnd>

                    /* If the moved task has a priority higher than the current
                     * task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004b94:	4b23      	ldr	r3, [pc, #140]	@ (8004c24 <xTaskResumeAll+0x12c>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b9a:	429a      	cmp	r2, r3
 8004b9c:	d302      	bcc.n	8004ba4 <xTaskResumeAll+0xac>
                    {
                        xYieldPending = pdTRUE;
 8004b9e:	4b22      	ldr	r3, [pc, #136]	@ (8004c28 <xTaskResumeAll+0x130>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ba4:	4b1c      	ldr	r3, [pc, #112]	@ (8004c18 <xTaskResumeAll+0x120>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1cc      	bne.n	8004b46 <xTaskResumeAll+0x4e>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d001      	beq.n	8004bb6 <xTaskResumeAll+0xbe>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8004bb2:	f000 fb3b 	bl	800522c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8004c2c <xTaskResumeAll+0x134>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	607b      	str	r3, [r7, #4]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d010      	beq.n	8004be4 <xTaskResumeAll+0xec>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8004bc2:	f000 f847 	bl	8004c54 <xTaskIncrementTick>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d002      	beq.n	8004bd2 <xTaskResumeAll+0xda>
                            {
                                xYieldPending = pdTRUE;
 8004bcc:	4b16      	ldr	r3, [pc, #88]	@ (8004c28 <xTaskResumeAll+0x130>)
 8004bce:	2201      	movs	r2, #1
 8004bd0:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	607b      	str	r3, [r7, #4]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d1f1      	bne.n	8004bc2 <xTaskResumeAll+0xca>

                        xPendedTicks = 0;
 8004bde:	4b13      	ldr	r3, [pc, #76]	@ (8004c2c <xTaskResumeAll+0x134>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8004be4:	4b10      	ldr	r3, [pc, #64]	@ (8004c28 <xTaskResumeAll+0x130>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d009      	beq.n	8004c00 <xTaskResumeAll+0x108>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8004bec:	2301      	movs	r3, #1
 8004bee:	60bb      	str	r3, [r7, #8]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	@ (8004c30 <xTaskResumeAll+0x138>)
 8004bf2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bf6:	601a      	str	r2, [r3, #0]
 8004bf8:	f3bf 8f4f 	dsb	sy
 8004bfc:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8004c00:	f001 fa36 	bl	8006070 <vPortExitCritical>

    return xAlreadyYielded;
 8004c04:	68bb      	ldr	r3, [r7, #8]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	2000029c 	.word	0x2000029c
 8004c14:	20000274 	.word	0x20000274
 8004c18:	20000234 	.word	0x20000234
 8004c1c:	2000027c 	.word	0x2000027c
 8004c20:	200001a0 	.word	0x200001a0
 8004c24:	2000019c 	.word	0x2000019c
 8004c28:	20000288 	.word	0x20000288
 8004c2c:	20000284 	.word	0x20000284
 8004c30:	e000ed04 	.word	0xe000ed04

08004c34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8004c3a:	4b05      	ldr	r3, [pc, #20]	@ (8004c50 <xTaskGetTickCount+0x1c>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8004c40:	687b      	ldr	r3, [r7, #4]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	370c      	adds	r7, #12
 8004c46:	46bd      	mov	sp, r7
 8004c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4c:	4770      	bx	lr
 8004c4e:	bf00      	nop
 8004c50:	20000278 	.word	0x20000278

08004c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b086      	sub	sp, #24
 8004c58:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	617b      	str	r3, [r7, #20]
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8004d9c <xTaskIncrementTick+0x148>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	f040 808f 	bne.w	8004d86 <xTaskIncrementTick+0x132>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004c68:	4b4d      	ldr	r3, [pc, #308]	@ (8004da0 <xTaskIncrementTick+0x14c>)
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8004c70:	4a4b      	ldr	r2, [pc, #300]	@ (8004da0 <xTaskIncrementTick+0x14c>)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d121      	bne.n	8004cc0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8004c7c:	4b49      	ldr	r3, [pc, #292]	@ (8004da4 <xTaskIncrementTick+0x150>)
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00b      	beq.n	8004c9e <xTaskIncrementTick+0x4a>
        __asm volatile
 8004c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c8a:	f383 8811 	msr	BASEPRI, r3
 8004c8e:	f3bf 8f6f 	isb	sy
 8004c92:	f3bf 8f4f 	dsb	sy
 8004c96:	603b      	str	r3, [r7, #0]
    }
 8004c98:	bf00      	nop
 8004c9a:	bf00      	nop
 8004c9c:	e7fd      	b.n	8004c9a <xTaskIncrementTick+0x46>
 8004c9e:	4b41      	ldr	r3, [pc, #260]	@ (8004da4 <xTaskIncrementTick+0x150>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	4b40      	ldr	r3, [pc, #256]	@ (8004da8 <xTaskIncrementTick+0x154>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8004da4 <xTaskIncrementTick+0x150>)
 8004caa:	6013      	str	r3, [r2, #0]
 8004cac:	4a3e      	ldr	r2, [pc, #248]	@ (8004da8 <xTaskIncrementTick+0x154>)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	6013      	str	r3, [r2, #0]
 8004cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8004dac <xTaskIncrementTick+0x158>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3301      	adds	r3, #1
 8004cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8004dac <xTaskIncrementTick+0x158>)
 8004cba:	6013      	str	r3, [r2, #0]
 8004cbc:	f000 fab6 	bl	800522c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8004db0 <xTaskIncrementTick+0x15c>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d348      	bcc.n	8004d5c <xTaskIncrementTick+0x108>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004cca:	4b36      	ldr	r3, [pc, #216]	@ (8004da4 <xTaskIncrementTick+0x150>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d104      	bne.n	8004cde <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cd4:	4b36      	ldr	r3, [pc, #216]	@ (8004db0 <xTaskIncrementTick+0x15c>)
 8004cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8004cda:	601a      	str	r2, [r3, #0]
                    break;
 8004cdc:	e03e      	b.n	8004d5c <xTaskIncrementTick+0x108>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cde:	4b31      	ldr	r3, [pc, #196]	@ (8004da4 <xTaskIncrementTick+0x150>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	60bb      	str	r3, [r7, #8]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	607b      	str	r3, [r7, #4]

                    if( xConstTickCount < xItemValue )
 8004cee:	693a      	ldr	r2, [r7, #16]
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d203      	bcs.n	8004cfe <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8004cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8004db0 <xTaskIncrementTick+0x15c>)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004cfc:	e02e      	b.n	8004d5c <xTaskIncrementTick+0x108>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	3304      	adds	r3, #4
 8004d02:	4618      	mov	r0, r3
 8004d04:	f7ff f802 	bl	8003d0c <uxListRemove>

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d004      	beq.n	8004d1a <xTaskIncrementTick+0xc6>
                    {
                        ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	3318      	adds	r3, #24
 8004d14:	4618      	mov	r0, r3
 8004d16:	f7fe fff9 	bl	8003d0c <uxListRemove>
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d1e:	2201      	movs	r2, #1
 8004d20:	409a      	lsls	r2, r3
 8004d22:	4b24      	ldr	r3, [pc, #144]	@ (8004db4 <xTaskIncrementTick+0x160>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	4313      	orrs	r3, r2
 8004d28:	4a22      	ldr	r2, [pc, #136]	@ (8004db4 <xTaskIncrementTick+0x160>)
 8004d2a:	6013      	str	r3, [r2, #0]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d30:	4613      	mov	r3, r2
 8004d32:	009b      	lsls	r3, r3, #2
 8004d34:	4413      	add	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4a1f      	ldr	r2, [pc, #124]	@ (8004db8 <xTaskIncrementTick+0x164>)
 8004d3a:	441a      	add	r2, r3
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	3304      	adds	r3, #4
 8004d40:	4619      	mov	r1, r3
 8004d42:	4610      	mov	r0, r2
 8004d44:	f7fe ff85 	bl	8003c52 <vListInsertEnd>
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d4c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dbc <xTaskIncrementTick+0x168>)
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d3b9      	bcc.n	8004cca <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8004d56:	2301      	movs	r3, #1
 8004d58:	617b      	str	r3, [r7, #20]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d5a:	e7b6      	b.n	8004cca <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004d5c:	4b17      	ldr	r3, [pc, #92]	@ (8004dbc <xTaskIncrementTick+0x168>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d62:	4915      	ldr	r1, [pc, #84]	@ (8004db8 <xTaskIncrementTick+0x164>)
 8004d64:	4613      	mov	r3, r2
 8004d66:	009b      	lsls	r3, r3, #2
 8004d68:	4413      	add	r3, r2
 8004d6a:	009b      	lsls	r3, r3, #2
 8004d6c:	440b      	add	r3, r1
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2b01      	cmp	r3, #1
 8004d72:	d901      	bls.n	8004d78 <xTaskIncrementTick+0x124>
                {
                    xSwitchRequired = pdTRUE;
 8004d74:	2301      	movs	r3, #1
 8004d76:	617b      	str	r3, [r7, #20]
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8004d78:	4b11      	ldr	r3, [pc, #68]	@ (8004dc0 <xTaskIncrementTick+0x16c>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d007      	beq.n	8004d90 <xTaskIncrementTick+0x13c>
                {
                    xSwitchRequired = pdTRUE;
 8004d80:	2301      	movs	r3, #1
 8004d82:	617b      	str	r3, [r7, #20]
 8004d84:	e004      	b.n	8004d90 <xTaskIncrementTick+0x13c>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8004d86:	4b0f      	ldr	r3, [pc, #60]	@ (8004dc4 <xTaskIncrementTick+0x170>)
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	4a0d      	ldr	r2, [pc, #52]	@ (8004dc4 <xTaskIncrementTick+0x170>)
 8004d8e:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8004d90:	697b      	ldr	r3, [r7, #20]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	2000029c 	.word	0x2000029c
 8004da0:	20000278 	.word	0x20000278
 8004da4:	2000022c 	.word	0x2000022c
 8004da8:	20000230 	.word	0x20000230
 8004dac:	2000028c 	.word	0x2000028c
 8004db0:	20000294 	.word	0x20000294
 8004db4:	2000027c 	.word	0x2000027c
 8004db8:	200001a0 	.word	0x200001a0
 8004dbc:	2000019c 	.word	0x2000019c
 8004dc0:	20000288 	.word	0x20000288
 8004dc4:	20000284 	.word	0x20000284

08004dc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004dc8:	b480      	push	{r7}
 8004dca:	b087      	sub	sp, #28
 8004dcc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004dce:	4b27      	ldr	r3, [pc, #156]	@ (8004e6c <vTaskSwitchContext+0xa4>)
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d003      	beq.n	8004dde <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8004dd6:	4b26      	ldr	r3, [pc, #152]	@ (8004e70 <vTaskSwitchContext+0xa8>)
 8004dd8:	2201      	movs	r2, #1
 8004dda:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8004ddc:	e040      	b.n	8004e60 <vTaskSwitchContext+0x98>
        xYieldPending = pdFALSE;
 8004dde:	4b24      	ldr	r3, [pc, #144]	@ (8004e70 <vTaskSwitchContext+0xa8>)
 8004de0:	2200      	movs	r2, #0
 8004de2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004de4:	4b23      	ldr	r3, [pc, #140]	@ (8004e74 <vTaskSwitchContext+0xac>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	fab3 f383 	clz	r3, r3
 8004df0:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8004df2:	7afb      	ldrb	r3, [r7, #11]
 8004df4:	f1c3 031f 	rsb	r3, r3, #31
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	491f      	ldr	r1, [pc, #124]	@ (8004e78 <vTaskSwitchContext+0xb0>)
 8004dfc:	697a      	ldr	r2, [r7, #20]
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	440b      	add	r3, r1
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d10b      	bne.n	8004e26 <vTaskSwitchContext+0x5e>
        __asm volatile
 8004e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e12:	f383 8811 	msr	BASEPRI, r3
 8004e16:	f3bf 8f6f 	isb	sy
 8004e1a:	f3bf 8f4f 	dsb	sy
 8004e1e:	607b      	str	r3, [r7, #4]
    }
 8004e20:	bf00      	nop
 8004e22:	bf00      	nop
 8004e24:	e7fd      	b.n	8004e22 <vTaskSwitchContext+0x5a>
 8004e26:	697a      	ldr	r2, [r7, #20]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4a11      	ldr	r2, [pc, #68]	@ (8004e78 <vTaskSwitchContext+0xb0>)
 8004e32:	4413      	add	r3, r2
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	685a      	ldr	r2, [r3, #4]
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	605a      	str	r2, [r3, #4]
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	3308      	adds	r3, #8
 8004e48:	429a      	cmp	r2, r3
 8004e4a:	d104      	bne.n	8004e56 <vTaskSwitchContext+0x8e>
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	605a      	str	r2, [r3, #4]
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	685b      	ldr	r3, [r3, #4]
 8004e5a:	68db      	ldr	r3, [r3, #12]
 8004e5c:	4a07      	ldr	r2, [pc, #28]	@ (8004e7c <vTaskSwitchContext+0xb4>)
 8004e5e:	6013      	str	r3, [r2, #0]
}
 8004e60:	bf00      	nop
 8004e62:	371c      	adds	r7, #28
 8004e64:	46bd      	mov	sp, r7
 8004e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6a:	4770      	bx	lr
 8004e6c:	2000029c 	.word	0x2000029c
 8004e70:	20000288 	.word	0x20000288
 8004e74:	2000027c 	.word	0x2000027c
 8004e78:	200001a0 	.word	0x200001a0
 8004e7c:	2000019c 	.word	0x2000019c

08004e80 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d10b      	bne.n	8004ea8 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8004e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e94:	f383 8811 	msr	BASEPRI, r3
 8004e98:	f3bf 8f6f 	isb	sy
 8004e9c:	f3bf 8f4f 	dsb	sy
 8004ea0:	60fb      	str	r3, [r7, #12]
    }
 8004ea2:	bf00      	nop
 8004ea4:	bf00      	nop
 8004ea6:	e7fd      	b.n	8004ea4 <vTaskPlaceOnEventList+0x24>

    /* Place the event list item of the TCB in the appropriate event list.
     * This is placed in the list in priority order so the highest priority task
     * is the first to be woken by the event.  The queue that contains the event
     * list is locked, preventing simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ea8:	4b07      	ldr	r3, [pc, #28]	@ (8004ec8 <vTaskPlaceOnEventList+0x48>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3318      	adds	r3, #24
 8004eae:	4619      	mov	r1, r3
 8004eb0:	6878      	ldr	r0, [r7, #4]
 8004eb2:	f7fe fef2 	bl	8003c9a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004eb6:	2101      	movs	r1, #1
 8004eb8:	6838      	ldr	r0, [r7, #0]
 8004eba:	f000 fbf3 	bl	80056a4 <prvAddCurrentTaskToDelayedList>
}
 8004ebe:	bf00      	nop
 8004ec0:	3710      	adds	r7, #16
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2000019c 	.word	0x2000019c

08004ecc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b086      	sub	sp, #24
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d10b      	bne.n	8004ef6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8004ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ee2:	f383 8811 	msr	BASEPRI, r3
 8004ee6:	f3bf 8f6f 	isb	sy
 8004eea:	f3bf 8f4f 	dsb	sy
 8004eee:	617b      	str	r3, [r7, #20]
    }
 8004ef0:	bf00      	nop
 8004ef2:	bf00      	nop
 8004ef4:	e7fd      	b.n	8004ef2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ef6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f20 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3318      	adds	r3, #24
 8004efc:	4619      	mov	r1, r3
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f7fe fea7 	bl	8003c52 <vListInsertEnd>

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <vTaskPlaceOnEventListRestricted+0x44>
        {
            xTicksToWait = portMAX_DELAY;
 8004f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004f10:	6879      	ldr	r1, [r7, #4]
 8004f12:	68b8      	ldr	r0, [r7, #8]
 8004f14:	f000 fbc6 	bl	80056a4 <prvAddCurrentTaskToDelayedList>
    }
 8004f18:	bf00      	nop
 8004f1a:	3718      	adds	r7, #24
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	bd80      	pop	{r7, pc}
 8004f20:	2000019c 	.word	0x2000019c

08004f24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b086      	sub	sp, #24
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	68db      	ldr	r3, [r3, #12]
 8004f32:	613b      	str	r3, [r7, #16]
    configASSERT( pxUnblockedTCB );
 8004f34:	693b      	ldr	r3, [r7, #16]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	60fb      	str	r3, [r7, #12]
    }
 8004f4c:	bf00      	nop
 8004f4e:	bf00      	nop
 8004f50:	e7fd      	b.n	8004f4e <xTaskRemoveFromEventList+0x2a>
    ( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	3318      	adds	r3, #24
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fe fed8 	bl	8003d0c <uxListRemove>

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f5c:	4b1d      	ldr	r3, [pc, #116]	@ (8004fd4 <xTaskRemoveFromEventList+0xb0>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d11c      	bne.n	8004f9e <xTaskRemoveFromEventList+0x7a>
    {
        ( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004f64:	693b      	ldr	r3, [r7, #16]
 8004f66:	3304      	adds	r3, #4
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f7fe fecf 	bl	8003d0c <uxListRemove>
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f72:	2201      	movs	r2, #1
 8004f74:	409a      	lsls	r2, r3
 8004f76:	4b18      	ldr	r3, [pc, #96]	@ (8004fd8 <xTaskRemoveFromEventList+0xb4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	4a16      	ldr	r2, [pc, #88]	@ (8004fd8 <xTaskRemoveFromEventList+0xb4>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a13      	ldr	r2, [pc, #76]	@ (8004fdc <xTaskRemoveFromEventList+0xb8>)
 8004f8e:	441a      	add	r2, r3
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe fe5b 	bl	8003c52 <vListInsertEnd>
 8004f9c:	e005      	b.n	8004faa <xTaskRemoveFromEventList+0x86>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	3318      	adds	r3, #24
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	480e      	ldr	r0, [pc, #56]	@ (8004fe0 <xTaskRemoveFromEventList+0xbc>)
 8004fa6:	f7fe fe54 	bl	8003c52 <vListInsertEnd>
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004fae:	4b0d      	ldr	r3, [pc, #52]	@ (8004fe4 <xTaskRemoveFromEventList+0xc0>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb4:	429a      	cmp	r2, r3
 8004fb6:	d905      	bls.n	8004fc4 <xTaskRemoveFromEventList+0xa0>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	617b      	str	r3, [r7, #20]

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8004fbc:	4b0a      	ldr	r3, [pc, #40]	@ (8004fe8 <xTaskRemoveFromEventList+0xc4>)
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	601a      	str	r2, [r3, #0]
 8004fc2:	e001      	b.n	8004fc8 <xTaskRemoveFromEventList+0xa4>
    }
    else
    {
        xReturn = pdFALSE;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8004fc8:	697b      	ldr	r3, [r7, #20]
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3718      	adds	r7, #24
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
 8004fd2:	bf00      	nop
 8004fd4:	2000029c 	.word	0x2000029c
 8004fd8:	2000027c 	.word	0x2000027c
 8004fdc:	200001a0 	.word	0x200001a0
 8004fe0:	20000234 	.word	0x20000234
 8004fe4:	2000019c 	.word	0x2000019c
 8004fe8:	20000288 	.word	0x20000288

08004fec <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004fec:	b480      	push	{r7}
 8004fee:	b083      	sub	sp, #12
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ff4:	4b06      	ldr	r3, [pc, #24]	@ (8005010 <vTaskInternalSetTimeOutState+0x24>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004ffc:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <vTaskInternalSetTimeOutState+0x28>)
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	605a      	str	r2, [r3, #4]
}
 8005004:	bf00      	nop
 8005006:	370c      	adds	r7, #12
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	2000028c 	.word	0x2000028c
 8005014:	20000278 	.word	0x20000278

08005018 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b088      	sub	sp, #32
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d10b      	bne.n	8005040 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8005028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800502c:	f383 8811 	msr	BASEPRI, r3
 8005030:	f3bf 8f6f 	isb	sy
 8005034:	f3bf 8f4f 	dsb	sy
 8005038:	613b      	str	r3, [r7, #16]
    }
 800503a:	bf00      	nop
 800503c:	bf00      	nop
 800503e:	e7fd      	b.n	800503c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d10b      	bne.n	800505e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8005046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800504a:	f383 8811 	msr	BASEPRI, r3
 800504e:	f3bf 8f6f 	isb	sy
 8005052:	f3bf 8f4f 	dsb	sy
 8005056:	60fb      	str	r3, [r7, #12]
    }
 8005058:	bf00      	nop
 800505a:	bf00      	nop
 800505c:	e7fd      	b.n	800505a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800505e:	f000 ffd5 	bl	800600c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8005062:	4b1f      	ldr	r3, [pc, #124]	@ (80050e0 <xTaskCheckForTimeOut+0xc8>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	685b      	ldr	r3, [r3, #4]
 800506c:	69ba      	ldr	r2, [r7, #24]
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800507a:	d102      	bne.n	8005082 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 800507c:	2300      	movs	r3, #0
 800507e:	61fb      	str	r3, [r7, #28]
 8005080:	e026      	b.n	80050d0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	4b17      	ldr	r3, [pc, #92]	@ (80050e4 <xTaskCheckForTimeOut+0xcc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	429a      	cmp	r2, r3
 800508c:	d00a      	beq.n	80050a4 <xTaskCheckForTimeOut+0x8c>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	429a      	cmp	r2, r3
 8005096:	d305      	bcc.n	80050a4 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8005098:	2301      	movs	r3, #1
 800509a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	2200      	movs	r2, #0
 80050a0:	601a      	str	r2, [r3, #0]
 80050a2:	e015      	b.n	80050d0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	697a      	ldr	r2, [r7, #20]
 80050aa:	429a      	cmp	r2, r3
 80050ac:	d20b      	bcs.n	80050c6 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	697b      	ldr	r3, [r7, #20]
 80050b4:	1ad2      	subs	r2, r2, r3
 80050b6:	683b      	ldr	r3, [r7, #0]
 80050b8:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f7ff ff96 	bl	8004fec <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80050c0:	2300      	movs	r3, #0
 80050c2:	61fb      	str	r3, [r7, #28]
 80050c4:	e004      	b.n	80050d0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	2200      	movs	r2, #0
 80050ca:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80050cc:	2301      	movs	r3, #1
 80050ce:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80050d0:	f000 ffce 	bl	8006070 <vPortExitCritical>

    return xReturn;
 80050d4:	69fb      	ldr	r3, [r7, #28]
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3720      	adds	r7, #32
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	bf00      	nop
 80050e0:	20000278 	.word	0x20000278
 80050e4:	2000028c 	.word	0x2000028c

080050e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80050e8:	b480      	push	{r7}
 80050ea:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80050ec:	4b03      	ldr	r3, [pc, #12]	@ (80050fc <vTaskMissedYield+0x14>)
 80050ee:	2201      	movs	r2, #1
 80050f0:	601a      	str	r2, [r3, #0]
}
 80050f2:	bf00      	nop
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr
 80050fc:	20000288 	.word	0x20000288

08005100 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b082      	sub	sp, #8
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8005108:	f000 f852 	bl	80051b0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800510c:	4b06      	ldr	r3, [pc, #24]	@ (8005128 <prvIdleTask+0x28>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	2b01      	cmp	r3, #1
 8005112:	d9f9      	bls.n	8005108 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8005114:	4b05      	ldr	r3, [pc, #20]	@ (800512c <prvIdleTask+0x2c>)
 8005116:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800511a:	601a      	str	r2, [r3, #0]
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8005124:	e7f0      	b.n	8005108 <prvIdleTask+0x8>
 8005126:	bf00      	nop
 8005128:	200001a0 	.word	0x200001a0
 800512c:	e000ed04 	.word	0xe000ed04

08005130 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b082      	sub	sp, #8
 8005134:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005136:	2300      	movs	r3, #0
 8005138:	607b      	str	r3, [r7, #4]
 800513a:	e00c      	b.n	8005156 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800513c:	687a      	ldr	r2, [r7, #4]
 800513e:	4613      	mov	r3, r2
 8005140:	009b      	lsls	r3, r3, #2
 8005142:	4413      	add	r3, r2
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	4a12      	ldr	r2, [pc, #72]	@ (8005190 <prvInitialiseTaskLists+0x60>)
 8005148:	4413      	add	r3, r2
 800514a:	4618      	mov	r0, r3
 800514c:	f7fe fd54 	bl	8003bf8 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	3301      	adds	r3, #1
 8005154:	607b      	str	r3, [r7, #4]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	2b04      	cmp	r3, #4
 800515a:	d9ef      	bls.n	800513c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 800515c:	480d      	ldr	r0, [pc, #52]	@ (8005194 <prvInitialiseTaskLists+0x64>)
 800515e:	f7fe fd4b 	bl	8003bf8 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8005162:	480d      	ldr	r0, [pc, #52]	@ (8005198 <prvInitialiseTaskLists+0x68>)
 8005164:	f7fe fd48 	bl	8003bf8 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8005168:	480c      	ldr	r0, [pc, #48]	@ (800519c <prvInitialiseTaskLists+0x6c>)
 800516a:	f7fe fd45 	bl	8003bf8 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800516e:	480c      	ldr	r0, [pc, #48]	@ (80051a0 <prvInitialiseTaskLists+0x70>)
 8005170:	f7fe fd42 	bl	8003bf8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8005174:	480b      	ldr	r0, [pc, #44]	@ (80051a4 <prvInitialiseTaskLists+0x74>)
 8005176:	f7fe fd3f 	bl	8003bf8 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 800517a:	4b0b      	ldr	r3, [pc, #44]	@ (80051a8 <prvInitialiseTaskLists+0x78>)
 800517c:	4a05      	ldr	r2, [pc, #20]	@ (8005194 <prvInitialiseTaskLists+0x64>)
 800517e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005180:	4b0a      	ldr	r3, [pc, #40]	@ (80051ac <prvInitialiseTaskLists+0x7c>)
 8005182:	4a05      	ldr	r2, [pc, #20]	@ (8005198 <prvInitialiseTaskLists+0x68>)
 8005184:	601a      	str	r2, [r3, #0]
}
 8005186:	bf00      	nop
 8005188:	3708      	adds	r7, #8
 800518a:	46bd      	mov	sp, r7
 800518c:	bd80      	pop	{r7, pc}
 800518e:	bf00      	nop
 8005190:	200001a0 	.word	0x200001a0
 8005194:	20000204 	.word	0x20000204
 8005198:	20000218 	.word	0x20000218
 800519c:	20000234 	.word	0x20000234
 80051a0:	20000248 	.word	0x20000248
 80051a4:	20000260 	.word	0x20000260
 80051a8:	2000022c 	.word	0x2000022c
 80051ac:	20000230 	.word	0x20000230

080051b0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b082      	sub	sp, #8
 80051b4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051b6:	e019      	b.n	80051ec <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 80051b8:	f000 ff28 	bl	800600c <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051bc:	4b10      	ldr	r3, [pc, #64]	@ (8005200 <prvCheckTasksWaitingTermination+0x50>)
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	3304      	adds	r3, #4
 80051c8:	4618      	mov	r0, r3
 80051ca:	f7fe fd9f 	bl	8003d0c <uxListRemove>
                    --uxCurrentNumberOfTasks;
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <prvCheckTasksWaitingTermination+0x54>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	3b01      	subs	r3, #1
 80051d4:	4a0b      	ldr	r2, [pc, #44]	@ (8005204 <prvCheckTasksWaitingTermination+0x54>)
 80051d6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 80051d8:	4b0b      	ldr	r3, [pc, #44]	@ (8005208 <prvCheckTasksWaitingTermination+0x58>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	3b01      	subs	r3, #1
 80051de:	4a0a      	ldr	r2, [pc, #40]	@ (8005208 <prvCheckTasksWaitingTermination+0x58>)
 80051e0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 80051e2:	f000 ff45 	bl	8006070 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f810 	bl	800520c <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80051ec:	4b06      	ldr	r3, [pc, #24]	@ (8005208 <prvCheckTasksWaitingTermination+0x58>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1e1      	bne.n	80051b8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 80051f4:	bf00      	nop
 80051f6:	bf00      	nop
 80051f8:	3708      	adds	r7, #8
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	20000248 	.word	0x20000248
 8005204:	20000274 	.word	0x20000274
 8005208:	2000025c 	.word	0x2000025c

0800520c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFree( pxTCB->pxStack );
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005218:	4618      	mov	r0, r3
 800521a:	f001 f903 	bl	8006424 <vPortFree>
                vPortFree( pxTCB );
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f001 f900 	bl	8006424 <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800522c:	b480      	push	{r7}
 800522e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005230:	4b0a      	ldr	r3, [pc, #40]	@ (800525c <prvResetNextTaskUnblockTime+0x30>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d104      	bne.n	8005244 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800523a:	4b09      	ldr	r3, [pc, #36]	@ (8005260 <prvResetNextTaskUnblockTime+0x34>)
 800523c:	f04f 32ff 	mov.w	r2, #4294967295
 8005240:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8005242:	e005      	b.n	8005250 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005244:	4b05      	ldr	r3, [pc, #20]	@ (800525c <prvResetNextTaskUnblockTime+0x30>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	4a04      	ldr	r2, [pc, #16]	@ (8005260 <prvResetNextTaskUnblockTime+0x34>)
 800524e:	6013      	str	r3, [r2, #0]
}
 8005250:	bf00      	nop
 8005252:	46bd      	mov	sp, r7
 8005254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005258:	4770      	bx	lr
 800525a:	bf00      	nop
 800525c:	2000022c 	.word	0x2000022c
 8005260:	20000294 	.word	0x20000294

08005264 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 800526a:	4b0b      	ldr	r3, [pc, #44]	@ (8005298 <xTaskGetSchedulerState+0x34>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8005272:	2301      	movs	r3, #1
 8005274:	607b      	str	r3, [r7, #4]
 8005276:	e008      	b.n	800528a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005278:	4b08      	ldr	r3, [pc, #32]	@ (800529c <xTaskGetSchedulerState+0x38>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d102      	bne.n	8005286 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8005280:	2302      	movs	r3, #2
 8005282:	607b      	str	r3, [r7, #4]
 8005284:	e001      	b.n	800528a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8005286:	2300      	movs	r3, #0
 8005288:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 800528a:	687b      	ldr	r3, [r7, #4]
    }
 800528c:	4618      	mov	r0, r3
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	20000280 	.word	0x20000280
 800529c:	2000029c 	.word	0x2000029c

080052a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b086      	sub	sp, #24
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80052ac:	2300      	movs	r3, #0
 80052ae:	617b      	str	r3, [r7, #20]

        if( pxMutexHolder != NULL )
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d065      	beq.n	8005382 <xTaskPriorityDisinherit+0xe2>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80052b6:	4b35      	ldr	r3, [pc, #212]	@ (800538c <xTaskPriorityDisinherit+0xec>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	693a      	ldr	r2, [r7, #16]
 80052bc:	429a      	cmp	r2, r3
 80052be:	d00b      	beq.n	80052d8 <xTaskPriorityDisinherit+0x38>
        __asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	60fb      	str	r3, [r7, #12]
    }
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xTaskPriorityDisinherit+0x34>
            configASSERT( pxTCB->uxMutexesHeld );
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d10b      	bne.n	80052f8 <xTaskPriorityDisinherit+0x58>
        __asm volatile
 80052e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052e4:	f383 8811 	msr	BASEPRI, r3
 80052e8:	f3bf 8f6f 	isb	sy
 80052ec:	f3bf 8f4f 	dsb	sy
 80052f0:	60bb      	str	r3, [r7, #8]
    }
 80052f2:	bf00      	nop
 80052f4:	bf00      	nop
 80052f6:	e7fd      	b.n	80052f4 <xTaskPriorityDisinherit+0x54>
            ( pxTCB->uxMutexesHeld )--;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005302:	693b      	ldr	r3, [r7, #16]
 8005304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005306:	693b      	ldr	r3, [r7, #16]
 8005308:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800530a:	429a      	cmp	r2, r3
 800530c:	d039      	beq.n	8005382 <xTaskPriorityDisinherit+0xe2>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800530e:	693b      	ldr	r3, [r7, #16]
 8005310:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005312:	2b00      	cmp	r3, #0
 8005314:	d135      	bne.n	8005382 <xTaskPriorityDisinherit+0xe2>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	3304      	adds	r3, #4
 800531a:	4618      	mov	r0, r3
 800531c:	f7fe fcf6 	bl	8003d0c <uxListRemove>
 8005320:	4603      	mov	r3, r0
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10a      	bne.n	800533c <xTaskPriorityDisinherit+0x9c>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8005326:	693b      	ldr	r3, [r7, #16]
 8005328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532a:	2201      	movs	r2, #1
 800532c:	fa02 f303 	lsl.w	r3, r2, r3
 8005330:	43da      	mvns	r2, r3
 8005332:	4b17      	ldr	r3, [pc, #92]	@ (8005390 <xTaskPriorityDisinherit+0xf0>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4013      	ands	r3, r2
 8005338:	4a15      	ldr	r2, [pc, #84]	@ (8005390 <xTaskPriorityDisinherit+0xf0>)
 800533a:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800533c:	693b      	ldr	r3, [r7, #16]
 800533e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005340:	693b      	ldr	r3, [r7, #16]
 8005342:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005348:	f1c3 0205 	rsb	r2, r3, #5
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005354:	2201      	movs	r2, #1
 8005356:	409a      	lsls	r2, r3
 8005358:	4b0d      	ldr	r3, [pc, #52]	@ (8005390 <xTaskPriorityDisinherit+0xf0>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	4313      	orrs	r3, r2
 800535e:	4a0c      	ldr	r2, [pc, #48]	@ (8005390 <xTaskPriorityDisinherit+0xf0>)
 8005360:	6013      	str	r3, [r2, #0]
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005366:	4613      	mov	r3, r2
 8005368:	009b      	lsls	r3, r3, #2
 800536a:	4413      	add	r3, r2
 800536c:	009b      	lsls	r3, r3, #2
 800536e:	4a09      	ldr	r2, [pc, #36]	@ (8005394 <xTaskPriorityDisinherit+0xf4>)
 8005370:	441a      	add	r2, r3
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	3304      	adds	r3, #4
 8005376:	4619      	mov	r1, r3
 8005378:	4610      	mov	r0, r2
 800537a:	f7fe fc6a 	bl	8003c52 <vListInsertEnd>
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 800537e:	2301      	movs	r3, #1
 8005380:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005382:	697b      	ldr	r3, [r7, #20]
    }
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	2000019c 	.word	0x2000019c
 8005390:	2000027c 	.word	0x2000027c
 8005394:	200001a0 	.word	0x200001a0

08005398 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8005398:	b580      	push	{r7, lr}
 800539a:	b086      	sub	sp, #24
 800539c:	af00      	add	r7, sp, #0
 800539e:	60f8      	str	r0, [r7, #12]
 80053a0:	60b9      	str	r1, [r7, #8]
 80053a2:	607a      	str	r2, [r7, #4]
 80053a4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d00b      	beq.n	80053c4 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80053ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b0:	f383 8811 	msr	BASEPRI, r3
 80053b4:	f3bf 8f6f 	isb	sy
 80053b8:	f3bf 8f4f 	dsb	sy
 80053bc:	613b      	str	r3, [r7, #16]
    }
 80053be:	bf00      	nop
 80053c0:	bf00      	nop
 80053c2:	e7fd      	b.n	80053c0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 80053c4:	f000 fe22 	bl	800600c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80053c8:	4b31      	ldr	r3, [pc, #196]	@ (8005490 <xTaskGenericNotifyWait+0xf8>)
 80053ca:	681a      	ldr	r2, [r3, #0]
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	4413      	add	r3, r2
 80053d0:	3354      	adds	r3, #84	@ 0x54
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d022      	beq.n	8005420 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 80053da:	4b2d      	ldr	r3, [pc, #180]	@ (8005490 <xTaskGenericNotifyWait+0xf8>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	3214      	adds	r2, #20
 80053e2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80053e6:	68ba      	ldr	r2, [r7, #8]
 80053e8:	43d2      	mvns	r2, r2
 80053ea:	4011      	ands	r1, r2
 80053ec:	68fa      	ldr	r2, [r7, #12]
 80053ee:	3214      	adds	r2, #20
 80053f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 80053f4:	4b26      	ldr	r3, [pc, #152]	@ (8005490 <xTaskGenericNotifyWait+0xf8>)
 80053f6:	681a      	ldr	r2, [r3, #0]
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	3354      	adds	r3, #84	@ 0x54
 80053fe:	2201      	movs	r2, #1
 8005400:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8005402:	6a3b      	ldr	r3, [r7, #32]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d00b      	beq.n	8005420 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005408:	2101      	movs	r1, #1
 800540a:	6a38      	ldr	r0, [r7, #32]
 800540c:	f000 f94a 	bl	80056a4 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8005410:	4b20      	ldr	r3, [pc, #128]	@ (8005494 <xTaskGenericNotifyWait+0xfc>)
 8005412:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005416:	601a      	str	r2, [r3, #0]
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005420:	f000 fe26 	bl	8006070 <vPortExitCritical>

        taskENTER_CRITICAL();
 8005424:	f000 fdf2 	bl	800600c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWait );

            if( pulNotificationValue != NULL )
 8005428:	683b      	ldr	r3, [r7, #0]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d007      	beq.n	800543e <xTaskGenericNotifyWait+0xa6>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 800542e:	4b18      	ldr	r3, [pc, #96]	@ (8005490 <xTaskGenericNotifyWait+0xf8>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	68fa      	ldr	r2, [r7, #12]
 8005434:	3214      	adds	r2, #20
 8005436:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 800543e:	4b14      	ldr	r3, [pc, #80]	@ (8005490 <xTaskGenericNotifyWait+0xf8>)
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	4413      	add	r3, r2
 8005446:	3354      	adds	r3, #84	@ 0x54
 8005448:	781b      	ldrb	r3, [r3, #0]
 800544a:	b2db      	uxtb	r3, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d002      	beq.n	8005456 <xTaskGenericNotifyWait+0xbe>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8005450:	2300      	movs	r3, #0
 8005452:	617b      	str	r3, [r7, #20]
 8005454:	e00e      	b.n	8005474 <xTaskGenericNotifyWait+0xdc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8005456:	4b0e      	ldr	r3, [pc, #56]	@ (8005490 <xTaskGenericNotifyWait+0xf8>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	3214      	adds	r2, #20
 800545e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	43d2      	mvns	r2, r2
 8005466:	4011      	ands	r1, r2
 8005468:	68fa      	ldr	r2, [r7, #12]
 800546a:	3214      	adds	r2, #20
 800546c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8005470:	2301      	movs	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8005474:	4b06      	ldr	r3, [pc, #24]	@ (8005490 <xTaskGenericNotifyWait+0xf8>)
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4413      	add	r3, r2
 800547c:	3354      	adds	r3, #84	@ 0x54
 800547e:	2200      	movs	r2, #0
 8005480:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8005482:	f000 fdf5 	bl	8006070 <vPortExitCritical>

        return xReturn;
 8005486:	697b      	ldr	r3, [r7, #20]
    }
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	2000019c 	.word	0x2000019c
 8005494:	e000ed04 	.word	0xe000ed04

08005498 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8005498:	b580      	push	{r7, lr}
 800549a:	b090      	sub	sp, #64	@ 0x40
 800549c:	af00      	add	r7, sp, #0
 800549e:	60f8      	str	r0, [r7, #12]
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 80054a6:	2301      	movs	r3, #1
 80054a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10b      	bne.n	80054c8 <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00b      	beq.n	80054e6 <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 80054e0:	bf00      	nop
 80054e2:	bf00      	nop
 80054e4:	e7fd      	b.n	80054e2 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054e6:	f000 fe79 	bl	80061dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	63bb      	str	r3, [r7, #56]	@ 0x38
        __asm volatile
 80054ee:	f3ef 8211 	mrs	r2, BASEPRI
 80054f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f6:	f383 8811 	msr	BASEPRI, r3
 80054fa:	f3bf 8f6f 	isb	sy
 80054fe:	f3bf 8f4f 	dsb	sy
 8005502:	627a      	str	r2, [r7, #36]	@ 0x24
 8005504:	623b      	str	r3, [r7, #32]
        return ulOriginalBASEPRI;
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005508:	637b      	str	r3, [r7, #52]	@ 0x34
        {
            if( pulPreviousNotificationValue != NULL )
 800550a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800550c:	2b00      	cmp	r3, #0
 800550e:	d006      	beq.n	800551e <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8005510:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005512:	68ba      	ldr	r2, [r7, #8]
 8005514:	3214      	adds	r2, #20
 8005516:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800551a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800551c:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 800551e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	4413      	add	r3, r2
 8005524:	3354      	adds	r3, #84	@ 0x54
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 800552c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800552e:	68bb      	ldr	r3, [r7, #8]
 8005530:	4413      	add	r3, r2
 8005532:	3354      	adds	r3, #84	@ 0x54
 8005534:	2202      	movs	r2, #2
 8005536:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8005538:	78fb      	ldrb	r3, [r7, #3]
 800553a:	2b04      	cmp	r3, #4
 800553c:	d83b      	bhi.n	80055b6 <xTaskGenericNotifyFromISR+0x11e>
 800553e:	a201      	add	r2, pc, #4	@ (adr r2, 8005544 <xTaskGenericNotifyFromISR+0xac>)
 8005540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005544:	080055d7 	.word	0x080055d7
 8005548:	08005559 	.word	0x08005559
 800554c:	08005575 	.word	0x08005575
 8005550:	0800558d 	.word	0x0800558d
 8005554:	0800559b 	.word	0x0800559b
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	68ba      	ldr	r2, [r7, #8]
 800555c:	3214      	adds	r2, #20
 800555e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	ea42 0103 	orr.w	r1, r2, r3
 8005568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556a:	68ba      	ldr	r2, [r7, #8]
 800556c:	3214      	adds	r2, #20
 800556e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005572:	e033      	b.n	80055dc <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005576:	68ba      	ldr	r2, [r7, #8]
 8005578:	3214      	adds	r2, #20
 800557a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557e:	1c59      	adds	r1, r3, #1
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	68ba      	ldr	r2, [r7, #8]
 8005584:	3214      	adds	r2, #20
 8005586:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 800558a:	e027      	b.n	80055dc <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800558c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800558e:	68ba      	ldr	r2, [r7, #8]
 8005590:	3214      	adds	r2, #20
 8005592:	6879      	ldr	r1, [r7, #4]
 8005594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8005598:	e020      	b.n	80055dc <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800559a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800559e:	2b02      	cmp	r3, #2
 80055a0:	d006      	beq.n	80055b0 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80055a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055a4:	68ba      	ldr	r2, [r7, #8]
 80055a6:	3214      	adds	r2, #20
 80055a8:	6879      	ldr	r1, [r7, #4]
 80055aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80055ae:	e015      	b.n	80055dc <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    break;
 80055b4:	e012      	b.n	80055dc <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80055b6:	4b34      	ldr	r3, [pc, #208]	@ (8005688 <xTaskGenericNotifyFromISR+0x1f0>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61fb      	str	r3, [r7, #28]
    }
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 80055d6:	bf00      	nop
 80055d8:	e000      	b.n	80055dc <xTaskGenericNotifyFromISR+0x144>
                    break;
 80055da:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80055dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d146      	bne.n	8005672 <xTaskGenericNotifyFromISR+0x1da>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80055e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00b      	beq.n	8005604 <xTaskGenericNotifyFromISR+0x16c>
        __asm volatile
 80055ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f0:	f383 8811 	msr	BASEPRI, r3
 80055f4:	f3bf 8f6f 	isb	sy
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	61bb      	str	r3, [r7, #24]
    }
 80055fe:	bf00      	nop
 8005600:	bf00      	nop
 8005602:	e7fd      	b.n	8005600 <xTaskGenericNotifyFromISR+0x168>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005604:	4b21      	ldr	r3, [pc, #132]	@ (800568c <xTaskGenericNotifyFromISR+0x1f4>)
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d11c      	bne.n	8005646 <xTaskGenericNotifyFromISR+0x1ae>
                {
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800560c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800560e:	3304      	adds	r3, #4
 8005610:	4618      	mov	r0, r3
 8005612:	f7fe fb7b 	bl	8003d0c <uxListRemove>
                    prvAddTaskToReadyList( pxTCB );
 8005616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005618:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800561a:	2201      	movs	r2, #1
 800561c:	409a      	lsls	r2, r3
 800561e:	4b1c      	ldr	r3, [pc, #112]	@ (8005690 <xTaskGenericNotifyFromISR+0x1f8>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	4313      	orrs	r3, r2
 8005624:	4a1a      	ldr	r2, [pc, #104]	@ (8005690 <xTaskGenericNotifyFromISR+0x1f8>)
 8005626:	6013      	str	r3, [r2, #0]
 8005628:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800562c:	4613      	mov	r3, r2
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	4413      	add	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4a17      	ldr	r2, [pc, #92]	@ (8005694 <xTaskGenericNotifyFromISR+0x1fc>)
 8005636:	441a      	add	r2, r3
 8005638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563a:	3304      	adds	r3, #4
 800563c:	4619      	mov	r1, r3
 800563e:	4610      	mov	r0, r2
 8005640:	f7fe fb07 	bl	8003c52 <vListInsertEnd>
 8005644:	e005      	b.n	8005652 <xTaskGenericNotifyFromISR+0x1ba>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005648:	3318      	adds	r3, #24
 800564a:	4619      	mov	r1, r3
 800564c:	4812      	ldr	r0, [pc, #72]	@ (8005698 <xTaskGenericNotifyFromISR+0x200>)
 800564e:	f7fe fb00 	bl	8003c52 <vListInsertEnd>
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005654:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005656:	4b11      	ldr	r3, [pc, #68]	@ (800569c <xTaskGenericNotifyFromISR+0x204>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800565c:	429a      	cmp	r2, r3
 800565e:	d908      	bls.n	8005672 <xTaskGenericNotifyFromISR+0x1da>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8005660:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005662:	2b00      	cmp	r3, #0
 8005664:	d002      	beq.n	800566c <xTaskGenericNotifyFromISR+0x1d4>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8005666:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005668:	2201      	movs	r2, #1
 800566a:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 800566c:	4b0c      	ldr	r3, [pc, #48]	@ (80056a0 <xTaskGenericNotifyFromISR+0x208>)
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005674:	617b      	str	r3, [r7, #20]
        __asm volatile
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f383 8811 	msr	BASEPRI, r3
    }
 800567c:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 800567e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    }
 8005680:	4618      	mov	r0, r3
 8005682:	3740      	adds	r7, #64	@ 0x40
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	20000278 	.word	0x20000278
 800568c:	2000029c 	.word	0x2000029c
 8005690:	2000027c 	.word	0x2000027c
 8005694:	200001a0 	.word	0x200001a0
 8005698:	20000234 	.word	0x20000234
 800569c:	2000019c 	.word	0x2000019c
 80056a0:	20000288 	.word	0x20000288

080056a4 <prvAddCurrentTaskToDelayedList>:
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b084      	sub	sp, #16
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80056ae:	4b29      	ldr	r3, [pc, #164]	@ (8005754 <prvAddCurrentTaskToDelayedList+0xb0>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60fb      	str	r3, [r7, #12]
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80056b4:	4b28      	ldr	r3, [pc, #160]	@ (8005758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3304      	adds	r3, #4
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7fe fb26 	bl	8003d0c <uxListRemove>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d10b      	bne.n	80056de <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80056c6:	4b24      	ldr	r3, [pc, #144]	@ (8005758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056cc:	2201      	movs	r2, #1
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43da      	mvns	r2, r3
 80056d4:	4b21      	ldr	r3, [pc, #132]	@ (800575c <prvAddCurrentTaskToDelayedList+0xb8>)
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4013      	ands	r3, r2
 80056da:	4a20      	ldr	r2, [pc, #128]	@ (800575c <prvAddCurrentTaskToDelayedList+0xb8>)
 80056dc:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d10a      	bne.n	80056fc <prvAddCurrentTaskToDelayedList+0x58>
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d007      	beq.n	80056fc <prvAddCurrentTaskToDelayedList+0x58>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80056ec:	4b1a      	ldr	r3, [pc, #104]	@ (8005758 <prvAddCurrentTaskToDelayedList+0xb4>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	3304      	adds	r3, #4
 80056f2:	4619      	mov	r1, r3
 80056f4:	481a      	ldr	r0, [pc, #104]	@ (8005760 <prvAddCurrentTaskToDelayedList+0xbc>)
 80056f6:	f7fe faac 	bl	8003c52 <vListInsertEnd>

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80056fa:	e026      	b.n	800574a <prvAddCurrentTaskToDelayedList+0xa6>
                xTimeToWake = xConstTickCount + xTicksToWait;
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4413      	add	r3, r2
 8005702:	60bb      	str	r3, [r7, #8]
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005704:	4b14      	ldr	r3, [pc, #80]	@ (8005758 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	605a      	str	r2, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 800570c:	68ba      	ldr	r2, [r7, #8]
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	429a      	cmp	r2, r3
 8005712:	d209      	bcs.n	8005728 <prvAddCurrentTaskToDelayedList+0x84>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005714:	4b13      	ldr	r3, [pc, #76]	@ (8005764 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005716:	681a      	ldr	r2, [r3, #0]
 8005718:	4b0f      	ldr	r3, [pc, #60]	@ (8005758 <prvAddCurrentTaskToDelayedList+0xb4>)
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	3304      	adds	r3, #4
 800571e:	4619      	mov	r1, r3
 8005720:	4610      	mov	r0, r2
 8005722:	f7fe faba 	bl	8003c9a <vListInsert>
}
 8005726:	e010      	b.n	800574a <prvAddCurrentTaskToDelayedList+0xa6>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005728:	4b0f      	ldr	r3, [pc, #60]	@ (8005768 <prvAddCurrentTaskToDelayedList+0xc4>)
 800572a:	681a      	ldr	r2, [r3, #0]
 800572c:	4b0a      	ldr	r3, [pc, #40]	@ (8005758 <prvAddCurrentTaskToDelayedList+0xb4>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	3304      	adds	r3, #4
 8005732:	4619      	mov	r1, r3
 8005734:	4610      	mov	r0, r2
 8005736:	f7fe fab0 	bl	8003c9a <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800573a:	4b0c      	ldr	r3, [pc, #48]	@ (800576c <prvAddCurrentTaskToDelayedList+0xc8>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68ba      	ldr	r2, [r7, #8]
 8005740:	429a      	cmp	r2, r3
 8005742:	d202      	bcs.n	800574a <prvAddCurrentTaskToDelayedList+0xa6>
                        xNextTaskUnblockTime = xTimeToWake;
 8005744:	4a09      	ldr	r2, [pc, #36]	@ (800576c <prvAddCurrentTaskToDelayedList+0xc8>)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	6013      	str	r3, [r2, #0]
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}
 8005752:	bf00      	nop
 8005754:	20000278 	.word	0x20000278
 8005758:	2000019c 	.word	0x2000019c
 800575c:	2000027c 	.word	0x2000027c
 8005760:	20000260 	.word	0x20000260
 8005764:	20000230 	.word	0x20000230
 8005768:	2000022c 	.word	0x2000022c
 800576c:	20000294 	.word	0x20000294

08005770 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8005770:	b580      	push	{r7, lr}
 8005772:	b084      	sub	sp, #16
 8005774:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8005776:	2300      	movs	r3, #0
 8005778:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 800577a:	f000 fae1 	bl	8005d40 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800577e:	4b12      	ldr	r3, [pc, #72]	@ (80057c8 <xTimerCreateTimerTask+0x58>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d00b      	beq.n	800579e <xTimerCreateTimerTask+0x2e>
                        xReturn = pdPASS;
                    }
                }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
                {
                    xReturn = xTaskCreate( prvTimerTask,
 8005786:	4b11      	ldr	r3, [pc, #68]	@ (80057cc <xTimerCreateTimerTask+0x5c>)
 8005788:	9301      	str	r3, [sp, #4]
 800578a:	2302      	movs	r3, #2
 800578c:	9300      	str	r3, [sp, #0]
 800578e:	2300      	movs	r3, #0
 8005790:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8005794:	490e      	ldr	r1, [pc, #56]	@ (80057d0 <xTimerCreateTimerTask+0x60>)
 8005796:	480f      	ldr	r0, [pc, #60]	@ (80057d4 <xTimerCreateTimerTask+0x64>)
 8005798:	f7fe ffd2 	bl	8004740 <xTaskCreate>
 800579c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10b      	bne.n	80057bc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	603b      	str	r3, [r7, #0]
    }
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	e7fd      	b.n	80057b8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80057bc:	687b      	ldr	r3, [r7, #4]
    }
 80057be:	4618      	mov	r0, r3
 80057c0:	3708      	adds	r7, #8
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}
 80057c6:	bf00      	nop
 80057c8:	200002d0 	.word	0x200002d0
 80057cc:	200002d4 	.word	0x200002d4
 80057d0:	08006750 	.word	0x08006750
 80057d4:	08005911 	.word	0x08005911

080057d8 <xTimerGenericCommand>:
    BaseType_t xTimerGenericCommand( TimerHandle_t xTimer,
                                     const BaseType_t xCommandID,
                                     const TickType_t xOptionalValue,
                                     BaseType_t * const pxHigherPriorityTaskWoken,
                                     const TickType_t xTicksToWait )
    {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08a      	sub	sp, #40	@ 0x28
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdFAIL;
 80057e6:	2300      	movs	r3, #0
 80057e8:	627b      	str	r3, [r7, #36]	@ 0x24
        DaemonTaskMessage_t xMessage;

        configASSERT( xTimer );
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d10b      	bne.n	8005808 <xTimerGenericCommand+0x30>
        __asm volatile
 80057f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057f4:	f383 8811 	msr	BASEPRI, r3
 80057f8:	f3bf 8f6f 	isb	sy
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	623b      	str	r3, [r7, #32]
    }
 8005802:	bf00      	nop
 8005804:	bf00      	nop
 8005806:	e7fd      	b.n	8005804 <xTimerGenericCommand+0x2c>

        /* Send a message to the timer service task to perform a particular action
         * on a particular timer definition. */
        if( xTimerQueue != NULL )
 8005808:	4b19      	ldr	r3, [pc, #100]	@ (8005870 <xTimerGenericCommand+0x98>)
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	2b00      	cmp	r3, #0
 800580e:	d02a      	beq.n	8005866 <xTimerGenericCommand+0x8e>
        {
            /* Send a command to the timer service task to start the xTimer timer. */
            xMessage.xMessageID = xCommandID;
 8005810:	68bb      	ldr	r3, [r7, #8]
 8005812:	617b      	str	r3, [r7, #20]
            xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	61bb      	str	r3, [r7, #24]
            xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	61fb      	str	r3, [r7, #28]

            if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	2b05      	cmp	r3, #5
 8005820:	dc18      	bgt.n	8005854 <xTimerGenericCommand+0x7c>
            {
                if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005822:	f7ff fd1f 	bl	8005264 <xTaskGetSchedulerState>
 8005826:	4603      	mov	r3, r0
 8005828:	2b02      	cmp	r3, #2
 800582a:	d109      	bne.n	8005840 <xTimerGenericCommand+0x68>
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800582c:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <xTimerGenericCommand+0x98>)
 800582e:	6818      	ldr	r0, [r3, #0]
 8005830:	f107 0114 	add.w	r1, r7, #20
 8005834:	2300      	movs	r3, #0
 8005836:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005838:	f7fe fb82 	bl	8003f40 <xQueueGenericSend>
 800583c:	6278      	str	r0, [r7, #36]	@ 0x24
 800583e:	e012      	b.n	8005866 <xTimerGenericCommand+0x8e>
                }
                else
                {
                    xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005840:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <xTimerGenericCommand+0x98>)
 8005842:	6818      	ldr	r0, [r3, #0]
 8005844:	f107 0114 	add.w	r1, r7, #20
 8005848:	2300      	movs	r3, #0
 800584a:	2200      	movs	r2, #0
 800584c:	f7fe fb78 	bl	8003f40 <xQueueGenericSend>
 8005850:	6278      	str	r0, [r7, #36]	@ 0x24
 8005852:	e008      	b.n	8005866 <xTimerGenericCommand+0x8e>
                }
            }
            else
            {
                xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005854:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <xTimerGenericCommand+0x98>)
 8005856:	6818      	ldr	r0, [r3, #0]
 8005858:	f107 0114 	add.w	r1, r7, #20
 800585c:	2300      	movs	r3, #0
 800585e:	683a      	ldr	r2, [r7, #0]
 8005860:	f7fe fc70 	bl	8004144 <xQueueGenericSendFromISR>
 8005864:	6278      	str	r0, [r7, #36]	@ 0x24
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8005868:	4618      	mov	r0, r3
 800586a:	3728      	adds	r7, #40	@ 0x28
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	200002d0 	.word	0x200002d0

08005874 <prvProcessExpiredTimer>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8005874:	b580      	push	{r7, lr}
 8005876:	b088      	sub	sp, #32
 8005878:	af02      	add	r7, sp, #8
 800587a:	6078      	str	r0, [r7, #4]
 800587c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult;
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800587e:	4b23      	ldr	r3, [pc, #140]	@ (800590c <prvProcessExpiredTimer+0x98>)
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	617b      	str	r3, [r7, #20]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005888:	697b      	ldr	r3, [r7, #20]
 800588a:	3304      	adds	r3, #4
 800588c:	4618      	mov	r0, r3
 800588e:	f7fe fa3d 	bl	8003d0c <uxListRemove>
        traceTIMER_EXPIRED( pxTimer );

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005898:	f003 0304 	and.w	r3, r3, #4
 800589c:	2b00      	cmp	r3, #0
 800589e:	d023      	beq.n	80058e8 <prvProcessExpiredTimer+0x74>
        {
            /* The timer is inserted into a list using a time relative to anything
             * other than the current time.  It will therefore be inserted into the
             * correct list relative to the time this task thinks it is now. */
            if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80058a0:	697b      	ldr	r3, [r7, #20]
 80058a2:	699a      	ldr	r2, [r3, #24]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	18d1      	adds	r1, r2, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	683a      	ldr	r2, [r7, #0]
 80058ac:	6978      	ldr	r0, [r7, #20]
 80058ae:	f000 f8d5 	bl	8005a5c <prvInsertTimerInActiveList>
 80058b2:	4603      	mov	r3, r0
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <prvProcessExpiredTimer+0x86>
            {
                /* The timer expired before it was added to the active timer
                 * list.  Reload it now.  */
                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80058b8:	2300      	movs	r3, #0
 80058ba:	9300      	str	r3, [sp, #0]
 80058bc:	2300      	movs	r3, #0
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	2100      	movs	r1, #0
 80058c2:	6978      	ldr	r0, [r7, #20]
 80058c4:	f7ff ff88 	bl	80057d8 <xTimerGenericCommand>
 80058c8:	6138      	str	r0, [r7, #16]
                configASSERT( xResult );
 80058ca:	693b      	ldr	r3, [r7, #16]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d114      	bne.n	80058fa <prvProcessExpiredTimer+0x86>
        __asm volatile
 80058d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058d4:	f383 8811 	msr	BASEPRI, r3
 80058d8:	f3bf 8f6f 	isb	sy
 80058dc:	f3bf 8f4f 	dsb	sy
 80058e0:	60fb      	str	r3, [r7, #12]
    }
 80058e2:	bf00      	nop
 80058e4:	bf00      	nop
 80058e6:	e7fd      	b.n	80058e4 <prvProcessExpiredTimer+0x70>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            mtCOVERAGE_TEST_MARKER();
        }

        /* Call the timer callback. */
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	6a1b      	ldr	r3, [r3, #32]
 80058fe:	6978      	ldr	r0, [r7, #20]
 8005900:	4798      	blx	r3
    }
 8005902:	bf00      	nop
 8005904:	3718      	adds	r7, #24
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}
 800590a:	bf00      	nop
 800590c:	200002c8 	.word	0x200002c8

08005910 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8005910:	b580      	push	{r7, lr}
 8005912:	b084      	sub	sp, #16
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005918:	f107 0308 	add.w	r3, r7, #8
 800591c:	4618      	mov	r0, r3
 800591e:	f000 f859 	bl	80059d4 <prvGetNextExpireTime>
 8005922:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	4619      	mov	r1, r3
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f805 	bl	8005938 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 800592e:	f000 f8d7 	bl	8005ae0 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005932:	bf00      	nop
 8005934:	e7f0      	b.n	8005918 <prvTimerTask+0x8>
	...

08005938 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
 8005940:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8005942:	f7ff f8cb 	bl	8004adc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005946:	f107 0308 	add.w	r3, r7, #8
 800594a:	4618      	mov	r0, r3
 800594c:	f000 f866 	bl	8005a1c <prvSampleTimeNow>
 8005950:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d130      	bne.n	80059ba <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d10a      	bne.n	8005974 <prvProcessTimerOrBlockTask+0x3c>
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	429a      	cmp	r2, r3
 8005964:	d806      	bhi.n	8005974 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8005966:	f7ff f8c7 	bl	8004af8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800596a:	68f9      	ldr	r1, [r7, #12]
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f7ff ff81 	bl	8005874 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8005972:	e024      	b.n	80059be <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d008      	beq.n	800598c <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800597a:	4b13      	ldr	r3, [pc, #76]	@ (80059c8 <prvProcessTimerOrBlockTask+0x90>)
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d101      	bne.n	8005988 <prvProcessTimerOrBlockTask+0x50>
 8005984:	2301      	movs	r3, #1
 8005986:	e000      	b.n	800598a <prvProcessTimerOrBlockTask+0x52>
 8005988:	2300      	movs	r3, #0
 800598a:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800598c:	4b0f      	ldr	r3, [pc, #60]	@ (80059cc <prvProcessTimerOrBlockTask+0x94>)
 800598e:	6818      	ldr	r0, [r3, #0]
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	4619      	mov	r1, r3
 800599a:	f7fe fe9d 	bl	80046d8 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800599e:	f7ff f8ab 	bl	8004af8 <xTaskResumeAll>
 80059a2:	4603      	mov	r3, r0
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10a      	bne.n	80059be <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80059a8:	4b09      	ldr	r3, [pc, #36]	@ (80059d0 <prvProcessTimerOrBlockTask+0x98>)
 80059aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80059ae:	601a      	str	r2, [r3, #0]
 80059b0:	f3bf 8f4f 	dsb	sy
 80059b4:	f3bf 8f6f 	isb	sy
    }
 80059b8:	e001      	b.n	80059be <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80059ba:	f7ff f89d 	bl	8004af8 <xTaskResumeAll>
    }
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	200002cc 	.word	0x200002cc
 80059cc:	200002d0 	.word	0x200002d0
 80059d0:	e000ed04 	.word	0xe000ed04

080059d4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80059d4:	b480      	push	{r7}
 80059d6:	b085      	sub	sp, #20
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80059dc:	4b0e      	ldr	r3, [pc, #56]	@ (8005a18 <prvGetNextExpireTime+0x44>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <prvGetNextExpireTime+0x16>
 80059e6:	2201      	movs	r2, #1
 80059e8:	e000      	b.n	80059ec <prvGetNextExpireTime+0x18>
 80059ea:	2200      	movs	r2, #0
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d105      	bne.n	8005a04 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80059f8:	4b07      	ldr	r3, [pc, #28]	@ (8005a18 <prvGetNextExpireTime+0x44>)
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	60fb      	str	r3, [r7, #12]
 8005a02:	e001      	b.n	8005a08 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8005a04:	2300      	movs	r3, #0
 8005a06:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8005a08:	68fb      	ldr	r3, [r7, #12]
    }
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	3714      	adds	r7, #20
 8005a0e:	46bd      	mov	sp, r7
 8005a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a14:	4770      	bx	lr
 8005a16:	bf00      	nop
 8005a18:	200002c8 	.word	0x200002c8

08005a1c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b084      	sub	sp, #16
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8005a24:	f7ff f906 	bl	8004c34 <xTaskGetTickCount>
 8005a28:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8005a2a:	4b0b      	ldr	r3, [pc, #44]	@ (8005a58 <prvSampleTimeNow+0x3c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	429a      	cmp	r2, r3
 8005a32:	d205      	bcs.n	8005a40 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8005a34:	f000 f91e 	bl	8005c74 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2201      	movs	r2, #1
 8005a3c:	601a      	str	r2, [r3, #0]
 8005a3e:	e002      	b.n	8005a46 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8005a46:	4a04      	ldr	r2, [pc, #16]	@ (8005a58 <prvSampleTimeNow+0x3c>)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
    }
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}
 8005a56:	bf00      	nop
 8005a58:	200002d8 	.word	0x200002d8

08005a5c <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b086      	sub	sp, #24
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	607a      	str	r2, [r7, #4]
 8005a68:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	68ba      	ldr	r2, [r7, #8]
 8005a72:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8005a7a:	68ba      	ldr	r2, [r7, #8]
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	429a      	cmp	r2, r3
 8005a80:	d812      	bhi.n	8005aa8 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a82:	687a      	ldr	r2, [r7, #4]
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	1ad2      	subs	r2, r2, r3
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	429a      	cmp	r2, r3
 8005a8e:	d302      	bcc.n	8005a96 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8005a90:	2301      	movs	r3, #1
 8005a92:	617b      	str	r3, [r7, #20]
 8005a94:	e01b      	b.n	8005ace <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005a96:	4b10      	ldr	r3, [pc, #64]	@ (8005ad8 <prvInsertTimerInActiveList+0x7c>)
 8005a98:	681a      	ldr	r2, [r3, #0]
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3304      	adds	r3, #4
 8005a9e:	4619      	mov	r1, r3
 8005aa0:	4610      	mov	r0, r2
 8005aa2:	f7fe f8fa 	bl	8003c9a <vListInsert>
 8005aa6:	e012      	b.n	8005ace <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d206      	bcs.n	8005abe <prvInsertTimerInActiveList+0x62>
 8005ab0:	68ba      	ldr	r2, [r7, #8]
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d302      	bcc.n	8005abe <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	617b      	str	r3, [r7, #20]
 8005abc:	e007      	b.n	8005ace <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005abe:	4b07      	ldr	r3, [pc, #28]	@ (8005adc <prvInsertTimerInActiveList+0x80>)
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	3304      	adds	r3, #4
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	4610      	mov	r0, r2
 8005aca:	f7fe f8e6 	bl	8003c9a <vListInsert>
            }
        }

        return xProcessTimerNow;
 8005ace:	697b      	ldr	r3, [r7, #20]
    }
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	3718      	adds	r7, #24
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	bd80      	pop	{r7, pc}
 8005ad8:	200002cc 	.word	0x200002cc
 8005adc:	200002c8 	.word	0x200002c8

08005ae0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8005ae0:	b580      	push	{r7, lr}
 8005ae2:	b08c      	sub	sp, #48	@ 0x30
 8005ae4:	af02      	add	r7, sp, #8
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched, xResult;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005ae6:	e0b2      	b.n	8005c4e <prvProcessReceivedCommands+0x16e>
                }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005ae8:	68bb      	ldr	r3, [r7, #8]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	f2c0 80af 	blt.w	8005c4e <prvProcessReceivedCommands+0x16e>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	627b      	str	r3, [r7, #36]	@ 0x24

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005af4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af6:	695b      	ldr	r3, [r3, #20]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d004      	beq.n	8005b06 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005afc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afe:	3304      	adds	r3, #4
 8005b00:	4618      	mov	r0, r3
 8005b02:	f7fe f903 	bl	8003d0c <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	4618      	mov	r0, r3
 8005b0a:	f7ff ff87 	bl	8005a1c <prvSampleTimeNow>
 8005b0e:	6238      	str	r0, [r7, #32]

                switch( xMessage.xMessageID )
 8005b10:	68bb      	ldr	r3, [r7, #8]
 8005b12:	2b09      	cmp	r3, #9
 8005b14:	f200 8098 	bhi.w	8005c48 <prvProcessReceivedCommands+0x168>
 8005b18:	a201      	add	r2, pc, #4	@ (adr r2, 8005b20 <prvProcessReceivedCommands+0x40>)
 8005b1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b1e:	bf00      	nop
 8005b20:	08005b49 	.word	0x08005b49
 8005b24:	08005b49 	.word	0x08005b49
 8005b28:	08005b49 	.word	0x08005b49
 8005b2c:	08005bbf 	.word	0x08005bbf
 8005b30:	08005bd3 	.word	0x08005bd3
 8005b34:	08005c1f 	.word	0x08005c1f
 8005b38:	08005b49 	.word	0x08005b49
 8005b3c:	08005b49 	.word	0x08005b49
 8005b40:	08005bbf 	.word	0x08005bbf
 8005b44:	08005bd3 	.word	0x08005bd3
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                    case tmrCOMMAND_START_DONT_TRACE:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005b48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b4a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b4e:	f043 0301 	orr.w	r3, r3, #1
 8005b52:	b2da      	uxtb	r2, r3
 8005b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b56:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005b5a:	68fa      	ldr	r2, [r7, #12]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	699b      	ldr	r3, [r3, #24]
 8005b60:	18d1      	adds	r1, r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	6a3a      	ldr	r2, [r7, #32]
 8005b66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b68:	f7ff ff78 	bl	8005a5c <prvInsertTimerInActiveList>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d06c      	beq.n	8005c4c <prvProcessReceivedCommands+0x16c>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b74:	6a1b      	ldr	r3, [r3, #32]
 8005b76:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b78:	4798      	blx	r3
                            traceTIMER_EXPIRED( pxTimer );

                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005b80:	f003 0304 	and.w	r3, r3, #4
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d061      	beq.n	8005c4c <prvProcessReceivedCommands+0x16c>
                            {
                                xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005b88:	68fa      	ldr	r2, [r7, #12]
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	699b      	ldr	r3, [r3, #24]
 8005b8e:	441a      	add	r2, r3
 8005b90:	2300      	movs	r3, #0
 8005b92:	9300      	str	r3, [sp, #0]
 8005b94:	2300      	movs	r3, #0
 8005b96:	2100      	movs	r1, #0
 8005b98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005b9a:	f7ff fe1d 	bl	80057d8 <xTimerGenericCommand>
 8005b9e:	61f8      	str	r0, [r7, #28]
                                configASSERT( xResult );
 8005ba0:	69fb      	ldr	r3, [r7, #28]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d152      	bne.n	8005c4c <prvProcessReceivedCommands+0x16c>
        __asm volatile
 8005ba6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005baa:	f383 8811 	msr	BASEPRI, r3
 8005bae:	f3bf 8f6f 	isb	sy
 8005bb2:	f3bf 8f4f 	dsb	sy
 8005bb6:	61bb      	str	r3, [r7, #24]
    }
 8005bb8:	bf00      	nop
 8005bba:	bf00      	nop
 8005bbc:	e7fd      	b.n	8005bba <prvProcessReceivedCommands+0xda>
                        break;

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005bbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bc4:	f023 0301 	bic.w	r3, r3, #1
 8005bc8:	b2da      	uxtb	r2, r3
 8005bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bcc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005bd0:	e03d      	b.n	8005c4e <prvProcessReceivedCommands+0x16e>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bd8:	f043 0301 	orr.w	r3, r3, #1
 8005bdc:	b2da      	uxtb	r2, r3
 8005bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005bea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bec:	699b      	ldr	r3, [r3, #24]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10b      	bne.n	8005c0a <prvProcessReceivedCommands+0x12a>
        __asm volatile
 8005bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bf6:	f383 8811 	msr	BASEPRI, r3
 8005bfa:	f3bf 8f6f 	isb	sy
 8005bfe:	f3bf 8f4f 	dsb	sy
 8005c02:	617b      	str	r3, [r7, #20]
    }
 8005c04:	bf00      	nop
 8005c06:	bf00      	nop
 8005c08:	e7fd      	b.n	8005c06 <prvProcessReceivedCommands+0x126>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c0c:	699a      	ldr	r2, [r3, #24]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	18d1      	adds	r1, r2, r3
 8005c12:	6a3b      	ldr	r3, [r7, #32]
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c18:	f7ff ff20 	bl	8005a5c <prvInsertTimerInActiveList>
                        break;
 8005c1c:	e017      	b.n	8005c4e <prvProcessReceivedCommands+0x16e>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                            {
                                /* The timer has already been removed from the active list,
                                 * just free up the memory if the memory was dynamically
                                 * allocated. */
                                if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c24:	f003 0302 	and.w	r3, r3, #2
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d103      	bne.n	8005c34 <prvProcessReceivedCommands+0x154>
                                {
                                    vPortFree( pxTimer );
 8005c2c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005c2e:	f000 fbf9 	bl	8006424 <vPortFree>
                                 * no need to free the memory - just mark the timer as
                                 * "not active". */
                                pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
                            }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8005c32:	e00c      	b.n	8005c4e <prvProcessReceivedCommands+0x16e>
                                    pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c36:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c3a:	f023 0301 	bic.w	r3, r3, #1
 8005c3e:	b2da      	uxtb	r2, r3
 8005c40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c42:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8005c46:	e002      	b.n	8005c4e <prvProcessReceivedCommands+0x16e>

                    default:
                        /* Don't expect to get here. */
                        break;
 8005c48:	bf00      	nop
 8005c4a:	e000      	b.n	8005c4e <prvProcessReceivedCommands+0x16e>
                        break;
 8005c4c:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005c4e:	4b08      	ldr	r3, [pc, #32]	@ (8005c70 <prvProcessReceivedCommands+0x190>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f107 0108 	add.w	r1, r7, #8
 8005c56:	2200      	movs	r2, #0
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7fe fb21 	bl	80042a0 <xQueueReceive>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	f47f af41 	bne.w	8005ae8 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	3728      	adds	r7, #40	@ 0x28
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}
 8005c70:	200002d0 	.word	0x200002d0

08005c74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b088      	sub	sp, #32
 8005c78:	af02      	add	r7, sp, #8

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005c7a:	e049      	b.n	8005d10 <prvSwitchTimerLists+0x9c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005c7c:	4b2e      	ldr	r3, [pc, #184]	@ (8005d38 <prvSwitchTimerLists+0xc4>)
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	68db      	ldr	r3, [r3, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	613b      	str	r3, [r7, #16]

            /* Remove the timer from the list. */
            pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c86:	4b2c      	ldr	r3, [pc, #176]	@ (8005d38 <prvSwitchTimerLists+0xc4>)
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	68db      	ldr	r3, [r3, #12]
 8005c8c:	68db      	ldr	r3, [r3, #12]
 8005c8e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	3304      	adds	r3, #4
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fe f839 	bl	8003d0c <uxListRemove>
            traceTIMER_EXPIRED( pxTimer );

            /* Execute its callback, then send a command to restart the timer if
             * it is an auto-reload timer.  It cannot be restarted here as the lists
             * have not yet been switched. */
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	4798      	blx	r3

            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ca8:	f003 0304 	and.w	r3, r3, #4
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d02f      	beq.n	8005d10 <prvSwitchTimerLists+0x9c>
                 * the timer going into the same timer list then it has already expired
                 * and the timer should be re-inserted into the current list so it is
                 * processed again within this loop.  Otherwise a command should be sent
                 * to restart the timer to ensure it is only inserted into a list after
                 * the lists have been swapped. */
                xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	699b      	ldr	r3, [r3, #24]
 8005cb4:	693a      	ldr	r2, [r7, #16]
 8005cb6:	4413      	add	r3, r2
 8005cb8:	60bb      	str	r3, [r7, #8]

                if( xReloadTime > xNextExpireTime )
 8005cba:	68ba      	ldr	r2, [r7, #8]
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	429a      	cmp	r2, r3
 8005cc0:	d90e      	bls.n	8005ce0 <prvSwitchTimerLists+0x6c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	605a      	str	r2, [r3, #4]
                    listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	68fa      	ldr	r2, [r7, #12]
 8005ccc:	611a      	str	r2, [r3, #16]
                    vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005cce:	4b1a      	ldr	r3, [pc, #104]	@ (8005d38 <prvSwitchTimerLists+0xc4>)
 8005cd0:	681a      	ldr	r2, [r3, #0]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	4619      	mov	r1, r3
 8005cd8:	4610      	mov	r0, r2
 8005cda:	f7fd ffde 	bl	8003c9a <vListInsert>
 8005cde:	e017      	b.n	8005d10 <prvSwitchTimerLists+0x9c>
                }
                else
                {
                    xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	9300      	str	r3, [sp, #0]
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	2100      	movs	r1, #0
 8005cea:	68f8      	ldr	r0, [r7, #12]
 8005cec:	f7ff fd74 	bl	80057d8 <xTimerGenericCommand>
 8005cf0:	6078      	str	r0, [r7, #4]
                    configASSERT( xResult );
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d10b      	bne.n	8005d10 <prvSwitchTimerLists+0x9c>
        __asm volatile
 8005cf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	603b      	str	r3, [r7, #0]
    }
 8005d0a:	bf00      	nop
 8005d0c:	bf00      	nop
 8005d0e:	e7fd      	b.n	8005d0c <prvSwitchTimerLists+0x98>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005d10:	4b09      	ldr	r3, [pc, #36]	@ (8005d38 <prvSwitchTimerLists+0xc4>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d1b0      	bne.n	8005c7c <prvSwitchTimerLists+0x8>
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        pxTemp = pxCurrentTimerList;
 8005d1a:	4b07      	ldr	r3, [pc, #28]	@ (8005d38 <prvSwitchTimerLists+0xc4>)
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	617b      	str	r3, [r7, #20]
        pxCurrentTimerList = pxOverflowTimerList;
 8005d20:	4b06      	ldr	r3, [pc, #24]	@ (8005d3c <prvSwitchTimerLists+0xc8>)
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a04      	ldr	r2, [pc, #16]	@ (8005d38 <prvSwitchTimerLists+0xc4>)
 8005d26:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8005d28:	4a04      	ldr	r2, [pc, #16]	@ (8005d3c <prvSwitchTimerLists+0xc8>)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	6013      	str	r3, [r2, #0]
    }
 8005d2e:	bf00      	nop
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	200002c8 	.word	0x200002c8
 8005d3c:	200002cc 	.word	0x200002cc

08005d40 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8005d40:	b580      	push	{r7, lr}
 8005d42:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8005d44:	f000 f962 	bl	800600c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8005d48:	4b12      	ldr	r3, [pc, #72]	@ (8005d94 <prvCheckForValidListAndQueue+0x54>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d11d      	bne.n	8005d8c <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8005d50:	4811      	ldr	r0, [pc, #68]	@ (8005d98 <prvCheckForValidListAndQueue+0x58>)
 8005d52:	f7fd ff51 	bl	8003bf8 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8005d56:	4811      	ldr	r0, [pc, #68]	@ (8005d9c <prvCheckForValidListAndQueue+0x5c>)
 8005d58:	f7fd ff4e 	bl	8003bf8 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8005d5c:	4b10      	ldr	r3, [pc, #64]	@ (8005da0 <prvCheckForValidListAndQueue+0x60>)
 8005d5e:	4a0e      	ldr	r2, [pc, #56]	@ (8005d98 <prvCheckForValidListAndQueue+0x58>)
 8005d60:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8005d62:	4b10      	ldr	r3, [pc, #64]	@ (8005da4 <prvCheckForValidListAndQueue+0x64>)
 8005d64:	4a0d      	ldr	r2, [pc, #52]	@ (8005d9c <prvCheckForValidListAndQueue+0x5c>)
 8005d66:	601a      	str	r2, [r3, #0]

                        xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                    }
                #else
                    {
                        xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8005d68:	2200      	movs	r2, #0
 8005d6a:	210c      	movs	r1, #12
 8005d6c:	200a      	movs	r0, #10
 8005d6e:	f7fe f861 	bl	8003e34 <xQueueGenericCreate>
 8005d72:	4603      	mov	r3, r0
 8005d74:	4a07      	ldr	r2, [pc, #28]	@ (8005d94 <prvCheckForValidListAndQueue+0x54>)
 8005d76:	6013      	str	r3, [r2, #0]
                    }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                    {
                        if( xTimerQueue != NULL )
 8005d78:	4b06      	ldr	r3, [pc, #24]	@ (8005d94 <prvCheckForValidListAndQueue+0x54>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d005      	beq.n	8005d8c <prvCheckForValidListAndQueue+0x4c>
                        {
                            vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005d80:	4b04      	ldr	r3, [pc, #16]	@ (8005d94 <prvCheckForValidListAndQueue+0x54>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	4908      	ldr	r1, [pc, #32]	@ (8005da8 <prvCheckForValidListAndQueue+0x68>)
 8005d86:	4618      	mov	r0, r3
 8005d88:	f7fe fc7c 	bl	8004684 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8005d8c:	f000 f970 	bl	8006070 <vPortExitCritical>
    }
 8005d90:	bf00      	nop
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	200002d0 	.word	0x200002d0
 8005d98:	200002a0 	.word	0x200002a0
 8005d9c:	200002b4 	.word	0x200002b4
 8005da0:	200002c8 	.word	0x200002c8
 8005da4:	200002cc 	.word	0x200002cc
 8005da8:	08006758 	.word	0x08006758

08005dac <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	60b9      	str	r1, [r7, #8]
 8005db6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	3b04      	subs	r3, #4
 8005dbc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005dc4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3b04      	subs	r3, #4
 8005dca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	f023 0201 	bic.w	r2, r3, #1
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	3b04      	subs	r3, #4
 8005dda:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005ddc:	4a0c      	ldr	r2, [pc, #48]	@ (8005e10 <pxPortInitialiseStack+0x64>)
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	3b14      	subs	r3, #20
 8005de6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3b04      	subs	r3, #4
 8005df2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f06f 0202 	mvn.w	r2, #2
 8005dfa:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	3b20      	subs	r3, #32
 8005e00:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005e02:	68fb      	ldr	r3, [r7, #12]
}
 8005e04:	4618      	mov	r0, r3
 8005e06:	3714      	adds	r7, #20
 8005e08:	46bd      	mov	sp, r7
 8005e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0e:	4770      	bx	lr
 8005e10:	08005e15 	.word	0x08005e15

08005e14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e14:	b480      	push	{r7}
 8005e16:	b085      	sub	sp, #20
 8005e18:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8005e1a:	2300      	movs	r3, #0
 8005e1c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005e1e:	4b13      	ldr	r3, [pc, #76]	@ (8005e6c <prvTaskExitError+0x58>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e26:	d00b      	beq.n	8005e40 <prvTaskExitError+0x2c>
        __asm volatile
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	60fb      	str	r3, [r7, #12]
    }
 8005e3a:	bf00      	nop
 8005e3c:	bf00      	nop
 8005e3e:	e7fd      	b.n	8005e3c <prvTaskExitError+0x28>
        __asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	60bb      	str	r3, [r7, #8]
    }
 8005e52:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005e54:	bf00      	nop
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d0fc      	beq.n	8005e56 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005e5c:	bf00      	nop
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e68:	4770      	bx	lr
 8005e6a:	bf00      	nop
 8005e6c:	20000018 	.word	0x20000018

08005e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005e70:	4b07      	ldr	r3, [pc, #28]	@ (8005e90 <pxCurrentTCBConst2>)
 8005e72:	6819      	ldr	r1, [r3, #0]
 8005e74:	6808      	ldr	r0, [r1, #0]
 8005e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7a:	f380 8809 	msr	PSP, r0
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f04f 0000 	mov.w	r0, #0
 8005e86:	f380 8811 	msr	BASEPRI, r0
 8005e8a:	4770      	bx	lr
 8005e8c:	f3af 8000 	nop.w

08005e90 <pxCurrentTCBConst2>:
 8005e90:	2000019c 	.word	0x2000019c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8005e94:	bf00      	nop
 8005e96:	bf00      	nop

08005e98 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8005e98:	4808      	ldr	r0, [pc, #32]	@ (8005ebc <prvPortStartFirstTask+0x24>)
 8005e9a:	6800      	ldr	r0, [r0, #0]
 8005e9c:	6800      	ldr	r0, [r0, #0]
 8005e9e:	f380 8808 	msr	MSP, r0
 8005ea2:	f04f 0000 	mov.w	r0, #0
 8005ea6:	f380 8814 	msr	CONTROL, r0
 8005eaa:	b662      	cpsie	i
 8005eac:	b661      	cpsie	f
 8005eae:	f3bf 8f4f 	dsb	sy
 8005eb2:	f3bf 8f6f 	isb	sy
 8005eb6:	df00      	svc	0
 8005eb8:	bf00      	nop
 8005eba:	0000      	.short	0x0000
 8005ebc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8005ec0:	bf00      	nop
 8005ec2:	bf00      	nop

08005ec4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b086      	sub	sp, #24
 8005ec8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005eca:	4b47      	ldr	r3, [pc, #284]	@ (8005fe8 <xPortStartScheduler+0x124>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	4a47      	ldr	r2, [pc, #284]	@ (8005fec <xPortStartScheduler+0x128>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d10b      	bne.n	8005eec <xPortStartScheduler+0x28>
        __asm volatile
 8005ed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ed8:	f383 8811 	msr	BASEPRI, r3
 8005edc:	f3bf 8f6f 	isb	sy
 8005ee0:	f3bf 8f4f 	dsb	sy
 8005ee4:	613b      	str	r3, [r7, #16]
    }
 8005ee6:	bf00      	nop
 8005ee8:	bf00      	nop
 8005eea:	e7fd      	b.n	8005ee8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005eec:	4b3e      	ldr	r3, [pc, #248]	@ (8005fe8 <xPortStartScheduler+0x124>)
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a3f      	ldr	r2, [pc, #252]	@ (8005ff0 <xPortStartScheduler+0x12c>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d10b      	bne.n	8005f0e <xPortStartScheduler+0x4a>
        __asm volatile
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	60fb      	str	r3, [r7, #12]
    }
 8005f08:	bf00      	nop
 8005f0a:	bf00      	nop
 8005f0c:	e7fd      	b.n	8005f0a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005f0e:	4b39      	ldr	r3, [pc, #228]	@ (8005ff4 <xPortStartScheduler+0x130>)
 8005f10:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	781b      	ldrb	r3, [r3, #0]
 8005f16:	b2db      	uxtb	r3, r3
 8005f18:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	22ff      	movs	r2, #255	@ 0xff
 8005f1e:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005f20:	697b      	ldr	r3, [r7, #20]
 8005f22:	781b      	ldrb	r3, [r3, #0]
 8005f24:	b2db      	uxtb	r3, r3
 8005f26:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005f28:	78fb      	ldrb	r3, [r7, #3]
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005f30:	b2da      	uxtb	r2, r3
 8005f32:	4b31      	ldr	r3, [pc, #196]	@ (8005ff8 <xPortStartScheduler+0x134>)
 8005f34:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005f36:	4b31      	ldr	r3, [pc, #196]	@ (8005ffc <xPortStartScheduler+0x138>)
 8005f38:	2207      	movs	r2, #7
 8005f3a:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f3c:	e009      	b.n	8005f52 <xPortStartScheduler+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8005f3e:	4b2f      	ldr	r3, [pc, #188]	@ (8005ffc <xPortStartScheduler+0x138>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3b01      	subs	r3, #1
 8005f44:	4a2d      	ldr	r2, [pc, #180]	@ (8005ffc <xPortStartScheduler+0x138>)
 8005f46:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005f48:	78fb      	ldrb	r3, [r7, #3]
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	005b      	lsls	r3, r3, #1
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005f52:	78fb      	ldrb	r3, [r7, #3]
 8005f54:	b2db      	uxtb	r3, r3
 8005f56:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f5a:	2b80      	cmp	r3, #128	@ 0x80
 8005f5c:	d0ef      	beq.n	8005f3e <xPortStartScheduler+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005f5e:	4b27      	ldr	r3, [pc, #156]	@ (8005ffc <xPortStartScheduler+0x138>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f1c3 0307 	rsb	r3, r3, #7
 8005f66:	2b04      	cmp	r3, #4
 8005f68:	d00b      	beq.n	8005f82 <xPortStartScheduler+0xbe>
        __asm volatile
 8005f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f6e:	f383 8811 	msr	BASEPRI, r3
 8005f72:	f3bf 8f6f 	isb	sy
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	60bb      	str	r3, [r7, #8]
    }
 8005f7c:	bf00      	nop
 8005f7e:	bf00      	nop
 8005f80:	e7fd      	b.n	8005f7e <xPortStartScheduler+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005f82:	4b1e      	ldr	r3, [pc, #120]	@ (8005ffc <xPortStartScheduler+0x138>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	021b      	lsls	r3, r3, #8
 8005f88:	4a1c      	ldr	r2, [pc, #112]	@ (8005ffc <xPortStartScheduler+0x138>)
 8005f8a:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8005ffc <xPortStartScheduler+0x138>)
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005f94:	4a19      	ldr	r2, [pc, #100]	@ (8005ffc <xPortStartScheduler+0x138>)
 8005f96:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	b2da      	uxtb	r2, r3
 8005f9c:	697b      	ldr	r3, [r7, #20]
 8005f9e:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8005fa0:	4b17      	ldr	r3, [pc, #92]	@ (8006000 <xPortStartScheduler+0x13c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a16      	ldr	r2, [pc, #88]	@ (8006000 <xPortStartScheduler+0x13c>)
 8005fa6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005faa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8005fac:	4b14      	ldr	r3, [pc, #80]	@ (8006000 <xPortStartScheduler+0x13c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	4a13      	ldr	r2, [pc, #76]	@ (8006000 <xPortStartScheduler+0x13c>)
 8005fb2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005fb6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8005fb8:	f000 f8e0 	bl	800617c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8005fbc:	4b11      	ldr	r3, [pc, #68]	@ (8006004 <xPortStartScheduler+0x140>)
 8005fbe:	2200      	movs	r2, #0
 8005fc0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8005fc2:	f000 f8ff 	bl	80061c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005fc6:	4b10      	ldr	r3, [pc, #64]	@ (8006008 <xPortStartScheduler+0x144>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a0f      	ldr	r2, [pc, #60]	@ (8006008 <xPortStartScheduler+0x144>)
 8005fcc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8005fd0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8005fd2:	f7ff ff61 	bl	8005e98 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005fd6:	f7fe fef7 	bl	8004dc8 <vTaskSwitchContext>
    prvTaskExitError();
 8005fda:	f7ff ff1b 	bl	8005e14 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8005fde:	2300      	movs	r3, #0
}
 8005fe0:	4618      	mov	r0, r3
 8005fe2:	3718      	adds	r7, #24
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}
 8005fe8:	e000ed00 	.word	0xe000ed00
 8005fec:	410fc271 	.word	0x410fc271
 8005ff0:	410fc270 	.word	0x410fc270
 8005ff4:	e000e400 	.word	0xe000e400
 8005ff8:	200002dc 	.word	0x200002dc
 8005ffc:	200002e0 	.word	0x200002e0
 8006000:	e000ed20 	.word	0xe000ed20
 8006004:	20000018 	.word	0x20000018
 8006008:	e000ef34 	.word	0xe000ef34

0800600c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
        __asm volatile
 8006012:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006016:	f383 8811 	msr	BASEPRI, r3
 800601a:	f3bf 8f6f 	isb	sy
 800601e:	f3bf 8f4f 	dsb	sy
 8006022:	607b      	str	r3, [r7, #4]
    }
 8006024:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8006026:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <vPortEnterCritical+0x5c>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	3301      	adds	r3, #1
 800602c:	4a0e      	ldr	r2, [pc, #56]	@ (8006068 <vPortEnterCritical+0x5c>)
 800602e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8006030:	4b0d      	ldr	r3, [pc, #52]	@ (8006068 <vPortEnterCritical+0x5c>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d110      	bne.n	800605a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006038:	4b0c      	ldr	r3, [pc, #48]	@ (800606c <vPortEnterCritical+0x60>)
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	b2db      	uxtb	r3, r3
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00b      	beq.n	800605a <vPortEnterCritical+0x4e>
        __asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	603b      	str	r3, [r7, #0]
    }
 8006054:	bf00      	nop
 8006056:	bf00      	nop
 8006058:	e7fd      	b.n	8006056 <vPortEnterCritical+0x4a>
    }
}
 800605a:	bf00      	nop
 800605c:	370c      	adds	r7, #12
 800605e:	46bd      	mov	sp, r7
 8006060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006064:	4770      	bx	lr
 8006066:	bf00      	nop
 8006068:	20000018 	.word	0x20000018
 800606c:	e000ed04 	.word	0xe000ed04

08006070 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8006076:	4b12      	ldr	r3, [pc, #72]	@ (80060c0 <vPortExitCritical+0x50>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10b      	bne.n	8006096 <vPortExitCritical+0x26>
        __asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	607b      	str	r3, [r7, #4]
    }
 8006090:	bf00      	nop
 8006092:	bf00      	nop
 8006094:	e7fd      	b.n	8006092 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8006096:	4b0a      	ldr	r3, [pc, #40]	@ (80060c0 <vPortExitCritical+0x50>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	3b01      	subs	r3, #1
 800609c:	4a08      	ldr	r2, [pc, #32]	@ (80060c0 <vPortExitCritical+0x50>)
 800609e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80060a0:	4b07      	ldr	r3, [pc, #28]	@ (80060c0 <vPortExitCritical+0x50>)
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d105      	bne.n	80060b4 <vPortExitCritical+0x44>
 80060a8:	2300      	movs	r3, #0
 80060aa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80060ac:	683b      	ldr	r3, [r7, #0]
 80060ae:	f383 8811 	msr	BASEPRI, r3
    }
 80060b2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr
 80060c0:	20000018 	.word	0x20000018
	...

080060d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80060d0:	f3ef 8009 	mrs	r0, PSP
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	4b15      	ldr	r3, [pc, #84]	@ (8006130 <pxCurrentTCBConst>)
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	f01e 0f10 	tst.w	lr, #16
 80060e0:	bf08      	it	eq
 80060e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80060e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060ea:	6010      	str	r0, [r2, #0]
 80060ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80060f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80060f4:	f380 8811 	msr	BASEPRI, r0
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	f3bf 8f6f 	isb	sy
 8006100:	f7fe fe62 	bl	8004dc8 <vTaskSwitchContext>
 8006104:	f04f 0000 	mov.w	r0, #0
 8006108:	f380 8811 	msr	BASEPRI, r0
 800610c:	bc09      	pop	{r0, r3}
 800610e:	6819      	ldr	r1, [r3, #0]
 8006110:	6808      	ldr	r0, [r1, #0]
 8006112:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006116:	f01e 0f10 	tst.w	lr, #16
 800611a:	bf08      	it	eq
 800611c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006120:	f380 8809 	msr	PSP, r0
 8006124:	f3bf 8f6f 	isb	sy
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	f3af 8000 	nop.w

08006130 <pxCurrentTCBConst>:
 8006130:	2000019c 	.word	0x2000019c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8006134:	bf00      	nop
 8006136:	bf00      	nop

08006138 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
        __asm volatile
 800613e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006142:	f383 8811 	msr	BASEPRI, r3
 8006146:	f3bf 8f6f 	isb	sy
 800614a:	f3bf 8f4f 	dsb	sy
 800614e:	607b      	str	r3, [r7, #4]
    }
 8006150:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8006152:	f7fe fd7f 	bl	8004c54 <xTaskIncrementTick>
 8006156:	4603      	mov	r3, r0
 8006158:	2b00      	cmp	r3, #0
 800615a:	d003      	beq.n	8006164 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800615c:	4b06      	ldr	r3, [pc, #24]	@ (8006178 <SysTick_Handler+0x40>)
 800615e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	2300      	movs	r3, #0
 8006166:	603b      	str	r3, [r7, #0]
        __asm volatile
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	f383 8811 	msr	BASEPRI, r3
    }
 800616e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8006170:	bf00      	nop
 8006172:	3708      	adds	r7, #8
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	e000ed04 	.word	0xe000ed04

0800617c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800617c:	b480      	push	{r7}
 800617e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006180:	4b0b      	ldr	r3, [pc, #44]	@ (80061b0 <vPortSetupTimerInterrupt+0x34>)
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006186:	4b0b      	ldr	r3, [pc, #44]	@ (80061b4 <vPortSetupTimerInterrupt+0x38>)
 8006188:	2200      	movs	r2, #0
 800618a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800618c:	4b0a      	ldr	r3, [pc, #40]	@ (80061b8 <vPortSetupTimerInterrupt+0x3c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a0a      	ldr	r2, [pc, #40]	@ (80061bc <vPortSetupTimerInterrupt+0x40>)
 8006192:	fba2 2303 	umull	r2, r3, r2, r3
 8006196:	099b      	lsrs	r3, r3, #6
 8006198:	4a09      	ldr	r2, [pc, #36]	@ (80061c0 <vPortSetupTimerInterrupt+0x44>)
 800619a:	3b01      	subs	r3, #1
 800619c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800619e:	4b04      	ldr	r3, [pc, #16]	@ (80061b0 <vPortSetupTimerInterrupt+0x34>)
 80061a0:	2207      	movs	r2, #7
 80061a2:	601a      	str	r2, [r3, #0]
}
 80061a4:	bf00      	nop
 80061a6:	46bd      	mov	sp, r7
 80061a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ac:	4770      	bx	lr
 80061ae:	bf00      	nop
 80061b0:	e000e010 	.word	0xe000e010
 80061b4:	e000e018 	.word	0xe000e018
 80061b8:	20000008 	.word	0x20000008
 80061bc:	10624dd3 	.word	0x10624dd3
 80061c0:	e000e014 	.word	0xe000e014

080061c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80061c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80061d4 <vPortEnableVFP+0x10>
 80061c8:	6801      	ldr	r1, [r0, #0]
 80061ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80061ce:	6001      	str	r1, [r0, #0]
 80061d0:	4770      	bx	lr
 80061d2:	0000      	.short	0x0000
 80061d4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80061d8:	bf00      	nop
 80061da:	bf00      	nop

080061dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80061e2:	f3ef 8305 	mrs	r3, IPSR
 80061e6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2b0f      	cmp	r3, #15
 80061ec:	d915      	bls.n	800621a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80061ee:	4a18      	ldr	r2, [pc, #96]	@ (8006250 <vPortValidateInterruptPriority+0x74>)
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	4413      	add	r3, r2
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80061f8:	4b16      	ldr	r3, [pc, #88]	@ (8006254 <vPortValidateInterruptPriority+0x78>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	7afa      	ldrb	r2, [r7, #11]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d20b      	bcs.n	800621a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8006202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	607b      	str	r3, [r7, #4]
    }
 8006214:	bf00      	nop
 8006216:	bf00      	nop
 8006218:	e7fd      	b.n	8006216 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800621a:	4b0f      	ldr	r3, [pc, #60]	@ (8006258 <vPortValidateInterruptPriority+0x7c>)
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8006222:	4b0e      	ldr	r3, [pc, #56]	@ (800625c <vPortValidateInterruptPriority+0x80>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	429a      	cmp	r2, r3
 8006228:	d90b      	bls.n	8006242 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800622a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800622e:	f383 8811 	msr	BASEPRI, r3
 8006232:	f3bf 8f6f 	isb	sy
 8006236:	f3bf 8f4f 	dsb	sy
 800623a:	603b      	str	r3, [r7, #0]
    }
 800623c:	bf00      	nop
 800623e:	bf00      	nop
 8006240:	e7fd      	b.n	800623e <vPortValidateInterruptPriority+0x62>
    }
 8006242:	bf00      	nop
 8006244:	3714      	adds	r7, #20
 8006246:	46bd      	mov	sp, r7
 8006248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624c:	4770      	bx	lr
 800624e:	bf00      	nop
 8006250:	e000e3f0 	.word	0xe000e3f0
 8006254:	200002dc 	.word	0x200002dc
 8006258:	e000ed0c 	.word	0xe000ed0c
 800625c:	200002e0 	.word	0x200002e0

08006260 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b08a      	sub	sp, #40	@ 0x28
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8006268:	2300      	movs	r3, #0
 800626a:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 800626c:	f7fe fc36 	bl	8004adc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8006270:	4b66      	ldr	r3, [pc, #408]	@ (800640c <pvPortMalloc+0x1ac>)
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d101      	bne.n	800627c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8006278:	f000 f938 	bl	80064ec <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800627c:	4b64      	ldr	r3, [pc, #400]	@ (8006410 <pvPortMalloc+0x1b0>)
 800627e:	681a      	ldr	r2, [r3, #0]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	4013      	ands	r3, r2
 8006284:	2b00      	cmp	r3, #0
 8006286:	f040 80a9 	bne.w	80063dc <pvPortMalloc+0x17c>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) && 
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d02e      	beq.n	80062ee <pvPortMalloc+0x8e>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8006290:	2208      	movs	r2, #8
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) && 
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	429a      	cmp	r2, r3
 800629a:	d228      	bcs.n	80062ee <pvPortMalloc+0x8e>
            {
                xWantedSize += xHeapStructSize;
 800629c:	2208      	movs	r2, #8
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4413      	add	r3, r2
 80062a2:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f003 0307 	and.w	r3, r3, #7
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d022      	beq.n	80062f4 <pvPortMalloc+0x94>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) ) 
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f023 0307 	bic.w	r3, r3, #7
 80062b4:	3308      	adds	r3, #8
 80062b6:	687a      	ldr	r2, [r7, #4]
 80062b8:	429a      	cmp	r2, r3
 80062ba:	d215      	bcs.n	80062e8 <pvPortMalloc+0x88>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	f023 0307 	bic.w	r3, r3, #7
 80062c2:	3308      	adds	r3, #8
 80062c4:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f003 0307 	and.w	r3, r3, #7
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d011      	beq.n	80062f4 <pvPortMalloc+0x94>
        __asm volatile
 80062d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d4:	f383 8811 	msr	BASEPRI, r3
 80062d8:	f3bf 8f6f 	isb	sy
 80062dc:	f3bf 8f4f 	dsb	sy
 80062e0:	617b      	str	r3, [r7, #20]
    }
 80062e2:	bf00      	nop
 80062e4:	bf00      	nop
 80062e6:	e7fd      	b.n	80062e4 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 80062e8:	2300      	movs	r3, #0
 80062ea:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062ec:	e002      	b.n	80062f4 <pvPortMalloc+0x94>
                    mtCOVERAGE_TEST_MARKER();
                }
            } 
            else 
            {
                xWantedSize = 0;
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	e000      	b.n	80062f6 <pvPortMalloc+0x96>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80062f4:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d06f      	beq.n	80063dc <pvPortMalloc+0x17c>
 80062fc:	4b45      	ldr	r3, [pc, #276]	@ (8006414 <pvPortMalloc+0x1b4>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	687a      	ldr	r2, [r7, #4]
 8006302:	429a      	cmp	r2, r3
 8006304:	d86a      	bhi.n	80063dc <pvPortMalloc+0x17c>
            {
                /* Traverse the list from the start	(lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8006306:	4b44      	ldr	r3, [pc, #272]	@ (8006418 <pvPortMalloc+0x1b8>)
 8006308:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800630a:	4b43      	ldr	r3, [pc, #268]	@ (8006418 <pvPortMalloc+0x1b8>)
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006310:	e004      	b.n	800631c <pvPortMalloc+0xbc>
                {
                    pxPreviousBlock = pxBlock;
 8006312:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006314:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	687a      	ldr	r2, [r7, #4]
 8006322:	429a      	cmp	r2, r3
 8006324:	d903      	bls.n	800632e <pvPortMalloc+0xce>
 8006326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2b00      	cmp	r3, #0
 800632c:	d1f1      	bne.n	8006312 <pvPortMalloc+0xb2>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800632e:	4b37      	ldr	r3, [pc, #220]	@ (800640c <pvPortMalloc+0x1ac>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006334:	429a      	cmp	r2, r3
 8006336:	d051      	beq.n	80063dc <pvPortMalloc+0x17c>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006338:	6a3b      	ldr	r3, [r7, #32]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	2208      	movs	r2, #8
 800633e:	4413      	add	r3, r2
 8006340:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	681a      	ldr	r2, [r3, #0]
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800634a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	1ad2      	subs	r2, r2, r3
 8006352:	2308      	movs	r3, #8
 8006354:	005b      	lsls	r3, r3, #1
 8006356:	429a      	cmp	r2, r3
 8006358:	d920      	bls.n	800639c <pvPortMalloc+0x13c>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800635a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4413      	add	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	f003 0307 	and.w	r3, r3, #7
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <pvPortMalloc+0x124>
        __asm volatile
 800636c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006370:	f383 8811 	msr	BASEPRI, r3
 8006374:	f3bf 8f6f 	isb	sy
 8006378:	f3bf 8f4f 	dsb	sy
 800637c:	613b      	str	r3, [r7, #16]
    }
 800637e:	bf00      	nop
 8006380:	bf00      	nop
 8006382:	e7fd      	b.n	8006380 <pvPortMalloc+0x120>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006386:	685a      	ldr	r2, [r3, #4]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	1ad2      	subs	r2, r2, r3
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8006390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006396:	69b8      	ldr	r0, [r7, #24]
 8006398:	f000 f90a 	bl	80065b0 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800639c:	4b1d      	ldr	r3, [pc, #116]	@ (8006414 <pvPortMalloc+0x1b4>)
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063a2:	685b      	ldr	r3, [r3, #4]
 80063a4:	1ad3      	subs	r3, r2, r3
 80063a6:	4a1b      	ldr	r2, [pc, #108]	@ (8006414 <pvPortMalloc+0x1b4>)
 80063a8:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80063aa:	4b1a      	ldr	r3, [pc, #104]	@ (8006414 <pvPortMalloc+0x1b4>)
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	4b1b      	ldr	r3, [pc, #108]	@ (800641c <pvPortMalloc+0x1bc>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d203      	bcs.n	80063be <pvPortMalloc+0x15e>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80063b6:	4b17      	ldr	r3, [pc, #92]	@ (8006414 <pvPortMalloc+0x1b4>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a18      	ldr	r2, [pc, #96]	@ (800641c <pvPortMalloc+0x1bc>)
 80063bc:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80063be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063c0:	685a      	ldr	r2, [r3, #4]
 80063c2:	4b13      	ldr	r3, [pc, #76]	@ (8006410 <pvPortMalloc+0x1b0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	431a      	orrs	r2, r3
 80063c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ca:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80063cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063ce:	2200      	movs	r2, #0
 80063d0:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80063d2:	4b13      	ldr	r3, [pc, #76]	@ (8006420 <pvPortMalloc+0x1c0>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	3301      	adds	r3, #1
 80063d8:	4a11      	ldr	r2, [pc, #68]	@ (8006420 <pvPortMalloc+0x1c0>)
 80063da:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80063dc:	f7fe fb8c 	bl	8004af8 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f003 0307 	and.w	r3, r3, #7
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00b      	beq.n	8006402 <pvPortMalloc+0x1a2>
        __asm volatile
 80063ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063ee:	f383 8811 	msr	BASEPRI, r3
 80063f2:	f3bf 8f6f 	isb	sy
 80063f6:	f3bf 8f4f 	dsb	sy
 80063fa:	60fb      	str	r3, [r7, #12]
    }
 80063fc:	bf00      	nop
 80063fe:	bf00      	nop
 8006400:	e7fd      	b.n	80063fe <pvPortMalloc+0x19e>
    return pvReturn;
 8006402:	69fb      	ldr	r3, [r7, #28]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3728      	adds	r7, #40	@ 0x28
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}
 800640c:	20012eec 	.word	0x20012eec
 8006410:	20012f00 	.word	0x20012f00
 8006414:	20012ef0 	.word	0x20012ef0
 8006418:	20012ee4 	.word	0x20012ee4
 800641c:	20012ef4 	.word	0x20012ef4
 8006420:	20012ef8 	.word	0x20012ef8

08006424 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b086      	sub	sp, #24
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d04f      	beq.n	80064d6 <vPortFree+0xb2>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8006436:	2308      	movs	r3, #8
 8006438:	425b      	negs	r3, r3
 800643a:	697a      	ldr	r2, [r7, #20]
 800643c:	4413      	add	r3, r2
 800643e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006444:	693b      	ldr	r3, [r7, #16]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	4b25      	ldr	r3, [pc, #148]	@ (80064e0 <vPortFree+0xbc>)
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4013      	ands	r3, r2
 800644e:	2b00      	cmp	r3, #0
 8006450:	d10b      	bne.n	800646a <vPortFree+0x46>
        __asm volatile
 8006452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006456:	f383 8811 	msr	BASEPRI, r3
 800645a:	f3bf 8f6f 	isb	sy
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	60fb      	str	r3, [r7, #12]
    }
 8006464:	bf00      	nop
 8006466:	bf00      	nop
 8006468:	e7fd      	b.n	8006466 <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800646a:	693b      	ldr	r3, [r7, #16]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d00b      	beq.n	800648a <vPortFree+0x66>
        __asm volatile
 8006472:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006476:	f383 8811 	msr	BASEPRI, r3
 800647a:	f3bf 8f6f 	isb	sy
 800647e:	f3bf 8f4f 	dsb	sy
 8006482:	60bb      	str	r3, [r7, #8]
    }
 8006484:	bf00      	nop
 8006486:	bf00      	nop
 8006488:	e7fd      	b.n	8006486 <vPortFree+0x62>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	4b14      	ldr	r3, [pc, #80]	@ (80064e0 <vPortFree+0xbc>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	4013      	ands	r3, r2
 8006494:	2b00      	cmp	r3, #0
 8006496:	d01e      	beq.n	80064d6 <vPortFree+0xb2>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d11a      	bne.n	80064d6 <vPortFree+0xb2>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	4b0e      	ldr	r3, [pc, #56]	@ (80064e0 <vPortFree+0xbc>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	43db      	mvns	r3, r3
 80064aa:	401a      	ands	r2, r3
 80064ac:	693b      	ldr	r3, [r7, #16]
 80064ae:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80064b0:	f7fe fb14 	bl	8004adc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	685a      	ldr	r2, [r3, #4]
 80064b8:	4b0a      	ldr	r3, [pc, #40]	@ (80064e4 <vPortFree+0xc0>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4413      	add	r3, r2
 80064be:	4a09      	ldr	r2, [pc, #36]	@ (80064e4 <vPortFree+0xc0>)
 80064c0:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80064c2:	6938      	ldr	r0, [r7, #16]
 80064c4:	f000 f874 	bl	80065b0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80064c8:	4b07      	ldr	r3, [pc, #28]	@ (80064e8 <vPortFree+0xc4>)
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	4a06      	ldr	r2, [pc, #24]	@ (80064e8 <vPortFree+0xc4>)
 80064d0:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80064d2:	f7fe fb11 	bl	8004af8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80064d6:	bf00      	nop
 80064d8:	3718      	adds	r7, #24
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20012f00 	.word	0x20012f00
 80064e4:	20012ef0 	.word	0x20012ef0
 80064e8:	20012efc 	.word	0x20012efc

080064ec <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80064ec:	b480      	push	{r7}
 80064ee:	b085      	sub	sp, #20
 80064f0:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80064f2:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 80064f6:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 80064f8:	4b27      	ldr	r3, [pc, #156]	@ (8006598 <prvHeapInit+0xac>)
 80064fa:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f003 0307 	and.w	r3, r3, #7
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00c      	beq.n	8006520 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	3307      	adds	r3, #7
 800650a:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0307 	bic.w	r3, r3, #7
 8006512:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	1ad3      	subs	r3, r2, r3
 800651a:	4a1f      	ldr	r2, [pc, #124]	@ (8006598 <prvHeapInit+0xac>)
 800651c:	4413      	add	r3, r2
 800651e:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006524:	4a1d      	ldr	r2, [pc, #116]	@ (800659c <prvHeapInit+0xb0>)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800652a:	4b1c      	ldr	r3, [pc, #112]	@ (800659c <prvHeapInit+0xb0>)
 800652c:	2200      	movs	r2, #0
 800652e:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68ba      	ldr	r2, [r7, #8]
 8006534:	4413      	add	r3, r2
 8006536:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8006538:	2208      	movs	r2, #8
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	1a9b      	subs	r3, r3, r2
 800653e:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f023 0307 	bic.w	r3, r3, #7
 8006546:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	4a15      	ldr	r2, [pc, #84]	@ (80065a0 <prvHeapInit+0xb4>)
 800654c:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800654e:	4b14      	ldr	r3, [pc, #80]	@ (80065a0 <prvHeapInit+0xb4>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	2200      	movs	r2, #0
 8006554:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8006556:	4b12      	ldr	r3, [pc, #72]	@ (80065a0 <prvHeapInit+0xb4>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2200      	movs	r2, #0
 800655c:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	68fa      	ldr	r2, [r7, #12]
 8006566:	1ad2      	subs	r2, r2, r3
 8006568:	683b      	ldr	r3, [r7, #0]
 800656a:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800656c:	4b0c      	ldr	r3, [pc, #48]	@ (80065a0 <prvHeapInit+0xb4>)
 800656e:	681a      	ldr	r2, [r3, #0]
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	685b      	ldr	r3, [r3, #4]
 8006578:	4a0a      	ldr	r2, [pc, #40]	@ (80065a4 <prvHeapInit+0xb8>)
 800657a:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800657c:	683b      	ldr	r3, [r7, #0]
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	4a09      	ldr	r2, [pc, #36]	@ (80065a8 <prvHeapInit+0xbc>)
 8006582:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006584:	4b09      	ldr	r3, [pc, #36]	@ (80065ac <prvHeapInit+0xc0>)
 8006586:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800658a:	601a      	str	r2, [r3, #0]
}
 800658c:	bf00      	nop
 800658e:	3714      	adds	r7, #20
 8006590:	46bd      	mov	sp, r7
 8006592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006596:	4770      	bx	lr
 8006598:	200002e4 	.word	0x200002e4
 800659c:	20012ee4 	.word	0x20012ee4
 80065a0:	20012eec 	.word	0x20012eec
 80065a4:	20012ef4 	.word	0x20012ef4
 80065a8:	20012ef0 	.word	0x20012ef0
 80065ac:	20012f00 	.word	0x20012f00

080065b0 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80065b0:	b480      	push	{r7}
 80065b2:	b085      	sub	sp, #20
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80065b8:	4b28      	ldr	r3, [pc, #160]	@ (800665c <prvInsertBlockIntoFreeList+0xac>)
 80065ba:	60fb      	str	r3, [r7, #12]
 80065bc:	e002      	b.n	80065c4 <prvInsertBlockIntoFreeList+0x14>
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	60fb      	str	r3, [r7, #12]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	429a      	cmp	r2, r3
 80065cc:	d8f7      	bhi.n	80065be <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	4413      	add	r3, r2
 80065da:	687a      	ldr	r2, [r7, #4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	d108      	bne.n	80065f2 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	685b      	ldr	r3, [r3, #4]
 80065e8:	441a      	add	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	685b      	ldr	r3, [r3, #4]
 80065fa:	68ba      	ldr	r2, [r7, #8]
 80065fc:	441a      	add	r2, r3
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	429a      	cmp	r2, r3
 8006604:	d118      	bne.n	8006638 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681a      	ldr	r2, [r3, #0]
 800660a:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <prvInsertBlockIntoFreeList+0xb0>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	d00d      	beq.n	800662e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	685a      	ldr	r2, [r3, #4]
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	441a      	add	r2, r3
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	601a      	str	r2, [r3, #0]
 800662c:	e008      	b.n	8006640 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800662e:	4b0c      	ldr	r3, [pc, #48]	@ (8006660 <prvInsertBlockIntoFreeList+0xb0>)
 8006630:	681a      	ldr	r2, [r3, #0]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	601a      	str	r2, [r3, #0]
 8006636:	e003      	b.n	8006640 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681a      	ldr	r2, [r3, #0]
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8006640:	68fa      	ldr	r2, [r7, #12]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d002      	beq.n	800664e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	687a      	ldr	r2, [r7, #4]
 800664c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800664e:	bf00      	nop
 8006650:	3714      	adds	r7, #20
 8006652:	46bd      	mov	sp, r7
 8006654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006658:	4770      	bx	lr
 800665a:	bf00      	nop
 800665c:	20012ee4 	.word	0x20012ee4
 8006660:	20012eec 	.word	0x20012eec

08006664 <memset>:
 8006664:	4402      	add	r2, r0
 8006666:	4603      	mov	r3, r0
 8006668:	4293      	cmp	r3, r2
 800666a:	d100      	bne.n	800666e <memset+0xa>
 800666c:	4770      	bx	lr
 800666e:	f803 1b01 	strb.w	r1, [r3], #1
 8006672:	e7f9      	b.n	8006668 <memset+0x4>

08006674 <__libc_init_array>:
 8006674:	b570      	push	{r4, r5, r6, lr}
 8006676:	4d0d      	ldr	r5, [pc, #52]	@ (80066ac <__libc_init_array+0x38>)
 8006678:	4c0d      	ldr	r4, [pc, #52]	@ (80066b0 <__libc_init_array+0x3c>)
 800667a:	1b64      	subs	r4, r4, r5
 800667c:	10a4      	asrs	r4, r4, #2
 800667e:	2600      	movs	r6, #0
 8006680:	42a6      	cmp	r6, r4
 8006682:	d109      	bne.n	8006698 <__libc_init_array+0x24>
 8006684:	4d0b      	ldr	r5, [pc, #44]	@ (80066b4 <__libc_init_array+0x40>)
 8006686:	4c0c      	ldr	r4, [pc, #48]	@ (80066b8 <__libc_init_array+0x44>)
 8006688:	f000 f826 	bl	80066d8 <_init>
 800668c:	1b64      	subs	r4, r4, r5
 800668e:	10a4      	asrs	r4, r4, #2
 8006690:	2600      	movs	r6, #0
 8006692:	42a6      	cmp	r6, r4
 8006694:	d105      	bne.n	80066a2 <__libc_init_array+0x2e>
 8006696:	bd70      	pop	{r4, r5, r6, pc}
 8006698:	f855 3b04 	ldr.w	r3, [r5], #4
 800669c:	4798      	blx	r3
 800669e:	3601      	adds	r6, #1
 80066a0:	e7ee      	b.n	8006680 <__libc_init_array+0xc>
 80066a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80066a6:	4798      	blx	r3
 80066a8:	3601      	adds	r6, #1
 80066aa:	e7f2      	b.n	8006692 <__libc_init_array+0x1e>
 80066ac:	08006eec 	.word	0x08006eec
 80066b0:	08006eec 	.word	0x08006eec
 80066b4:	08006eec 	.word	0x08006eec
 80066b8:	08006ef0 	.word	0x08006ef0

080066bc <memcpy>:
 80066bc:	440a      	add	r2, r1
 80066be:	4291      	cmp	r1, r2
 80066c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80066c4:	d100      	bne.n	80066c8 <memcpy+0xc>
 80066c6:	4770      	bx	lr
 80066c8:	b510      	push	{r4, lr}
 80066ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80066ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80066d2:	4291      	cmp	r1, r2
 80066d4:	d1f9      	bne.n	80066ca <memcpy+0xe>
 80066d6:	bd10      	pop	{r4, pc}

080066d8 <_init>:
 80066d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066da:	bf00      	nop
 80066dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066de:	bc08      	pop	{r3}
 80066e0:	469e      	mov	lr, r3
 80066e2:	4770      	bx	lr

080066e4 <_fini>:
 80066e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066e6:	bf00      	nop
 80066e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ea:	bc08      	pop	{r3}
 80066ec:	469e      	mov	lr, r3
 80066ee:	4770      	bx	lr
